{"ast":null,"code":"/*\r\n* Copyright 2013 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Token from './Token';\nimport Integer from '../../util/Integer';\nvar SimpleToken = /** @class */function (_super) {\n  __extends(SimpleToken, _super);\n  function SimpleToken(previous, value, bitCount) {\n    var _this = _super.call(this, previous) || this;\n    _this.value = value;\n    _this.bitCount = bitCount;\n    return _this;\n  }\n  /**\r\n   * @Override\r\n   */\n  SimpleToken.prototype.appendTo = function (bitArray, text) {\n    bitArray.appendBits(this.value, this.bitCount);\n  };\n  SimpleToken.prototype.add = function (value, bitCount) {\n    return new SimpleToken(this, value, bitCount);\n  };\n  SimpleToken.prototype.addBinaryShift = function (start, byteCount) {\n    // no-op can't binary shift a simple token\n    console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');\n    return new SimpleToken(this, start, byteCount);\n  };\n  /**\r\n   * @Override\r\n   */\n  SimpleToken.prototype.toString = function () {\n    var value = this.value & (1 << this.bitCount) - 1;\n    value |= 1 << this.bitCount;\n    return '<' + Integer.toBinaryString(value | 1 << this.bitCount).substring(1) + '>';\n  };\n  return SimpleToken;\n}(Token);\nexport default SimpleToken;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}