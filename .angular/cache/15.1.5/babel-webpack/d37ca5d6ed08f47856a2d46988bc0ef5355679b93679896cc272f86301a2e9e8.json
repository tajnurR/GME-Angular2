{"ast":null,"code":"import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder } from '@zxing/library';\nvar svgNs = 'http://www.w3.org/2000/svg';\n/**/\nvar BrowserQRCodeSvgWriter = /** @class */function () {\n  function BrowserQRCodeSvgWriter() {}\n  /**\r\n   * Writes and renders a QRCode SVG element.\r\n   *\r\n   * @param contents\r\n   * @param width\r\n   * @param height\r\n   * @param hints\r\n   */\n  BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException('Found empty contents');\n    }\n    // if (format != BarcodeFormat.QR_CODE) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n    var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\n    var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n    if (hints) {\n      if (undefined !== hints.get(EncodeHintType.ERROR_CORRECTION)) {\n        var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\n        errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\n      }\n      if (undefined !== hints.get(EncodeHintType.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10);\n      }\n    }\n    var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\r\n   * Renders the result and then appends it to the DOM.\r\n   */\n  BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n    if (typeof containerElement === 'string') {\n      var targetEl = document.querySelector(containerElement);\n      if (!targetEl) {\n        throw new Error('Could no find the target HTML element.');\n      }\n      containerElement = targetEl;\n    }\n    var svgElement = this.write(contents, width, height, hints);\n    if (containerElement instanceof HTMLElement) {\n      containerElement.appendChild(svgElement);\n    }\n  };\n  /**\r\n   * Note that the input matrix uses 0 == white, 1 == black.\r\n   * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\r\n   */\n  BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n    return svgElement;\n  };\n  /**\r\n   * Creates a SVG element.\r\n   *\r\n   * @param w SVG's width attribute\r\n   * @param h SVG's height attribute\r\n   */\n  BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var svgElement = document.createElementNS(svgNs, 'svg');\n    var width = w.toString();\n    var height = h.toString();\n    svgElement.setAttribute('height', height);\n    svgElement.setAttribute('width', width);\n    svgElement.setAttribute('viewBox', \"0 0 \" + width + \" \" + height);\n    return svgElement;\n  };\n  /**\r\n   * Creates a SVG rect element.\r\n   *\r\n   * @param x Element's x coordinate\r\n   * @param y Element's y coordinate\r\n   * @param w Element's width attribute\r\n   * @param h Element's height attribute\r\n   */\n  BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var rect = document.createElementNS(svgNs, 'rect');\n    rect.setAttribute('x', x.toString());\n    rect.setAttribute('y', y.toString());\n    rect.setAttribute('height', w.toString());\n    rect.setAttribute('width', h.toString());\n    rect.setAttribute('fill', '#000000');\n    return rect;\n  };\n  BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  return BrowserQRCodeSvgWriter;\n}();\nexport { BrowserQRCodeSvgWriter };","map":{"version":3,"names":["EncodeHintType","IllegalArgumentException","IllegalStateException","QRCodeDecoderErrorCorrectionLevel","QRCodeEncoder","svgNs","BrowserQRCodeSvgWriter","prototype","write","contents","width","height","hints","length","errorCorrectionLevel","L","quietZone","QUIET_ZONE_SIZE","undefined","get","ERROR_CORRECTION","correctionStr","toString","fromString","MARGIN","Number","parseInt","code","encode","renderResult","writeToDom","containerElement","targetEl","document","querySelector","Error","svgElement","HTMLElement","appendChild","input","getMatrix","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","createSVGElement","inputY","outputY","inputX","outputX","svgRectElement","createSvgRectElement","w","h","createElementNS","setAttribute","x","y","rect"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/browser/esm/writers/BrowserQRCodeSvgWriter.js"],"sourcesContent":["import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder, } from '@zxing/library';\r\nvar svgNs = 'http://www.w3.org/2000/svg';\r\n/**/\r\nvar BrowserQRCodeSvgWriter = /** @class */ (function () {\r\n    function BrowserQRCodeSvgWriter() {\r\n    }\r\n    /**\r\n     * Writes and renders a QRCode SVG element.\r\n     *\r\n     * @param contents\r\n     * @param width\r\n     * @param height\r\n     * @param hints\r\n     */\r\n    BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\r\n        if (contents.length === 0) {\r\n            throw new IllegalArgumentException('Found empty contents');\r\n        }\r\n        // if (format != BarcodeFormat.QR_CODE) {\r\n        //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\r\n        // }\r\n        if (width < 0 || height < 0) {\r\n            throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\r\n        }\r\n        var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\r\n        var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\r\n        if (hints) {\r\n            if (undefined !== hints.get(EncodeHintType.ERROR_CORRECTION)) {\r\n                var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\r\n                errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\r\n            }\r\n            if (undefined !== hints.get(EncodeHintType.MARGIN)) {\r\n                quietZone = Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10);\r\n            }\r\n        }\r\n        var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\r\n        return this.renderResult(code, width, height, quietZone);\r\n    };\r\n    /**\r\n     * Renders the result and then appends it to the DOM.\r\n     */\r\n    BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\r\n        if (typeof containerElement === 'string') {\r\n            var targetEl = document.querySelector(containerElement);\r\n            if (!targetEl) {\r\n                throw new Error('Could no find the target HTML element.');\r\n            }\r\n            containerElement = targetEl;\r\n        }\r\n        var svgElement = this.write(contents, width, height, hints);\r\n        if (containerElement instanceof HTMLElement) {\r\n            containerElement.appendChild(svgElement);\r\n        }\r\n    };\r\n    /**\r\n     * Note that the input matrix uses 0 == white, 1 == black.\r\n     * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\r\n     */\r\n    BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\r\n        var input = code.getMatrix();\r\n        if (input === null) {\r\n            throw new IllegalStateException();\r\n        }\r\n        var inputWidth = input.getWidth();\r\n        var inputHeight = input.getHeight();\r\n        var qrWidth = inputWidth + (quietZone * 2);\r\n        var qrHeight = inputHeight + (quietZone * 2);\r\n        var outputWidth = Math.max(width, qrWidth);\r\n        var outputHeight = Math.max(height, qrHeight);\r\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\r\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\r\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\r\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\r\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\r\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\r\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\r\n        var svgElement = this.createSVGElement(outputWidth, outputHeight);\r\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\r\n            // Write the contents of this row of the barcode\r\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\r\n                if (input.get(inputX, inputY) === 1) {\r\n                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\r\n                    svgElement.appendChild(svgRectElement);\r\n                }\r\n            }\r\n        }\r\n        return svgElement;\r\n    };\r\n    /**\r\n     * Creates a SVG element.\r\n     *\r\n     * @param w SVG's width attribute\r\n     * @param h SVG's height attribute\r\n     */\r\n    BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\r\n        var svgElement = document.createElementNS(svgNs, 'svg');\r\n        var width = w.toString();\r\n        var height = h.toString();\r\n        svgElement.setAttribute('height', height);\r\n        svgElement.setAttribute('width', width);\r\n        svgElement.setAttribute('viewBox', \"0 0 \" + width + \" \" + height);\r\n        return svgElement;\r\n    };\r\n    /**\r\n     * Creates a SVG rect element.\r\n     *\r\n     * @param x Element's x coordinate\r\n     * @param y Element's y coordinate\r\n     * @param w Element's width attribute\r\n     * @param h Element's height attribute\r\n     */\r\n    BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\r\n        var rect = document.createElementNS(svgNs, 'rect');\r\n        rect.setAttribute('x', x.toString());\r\n        rect.setAttribute('y', y.toString());\r\n        rect.setAttribute('height', w.toString());\r\n        rect.setAttribute('width', h.toString());\r\n        rect.setAttribute('fill', '#000000');\r\n        return rect;\r\n    };\r\n    BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\r\n    return BrowserQRCodeSvgWriter;\r\n}());\r\nexport { BrowserQRCodeSvgWriter };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}