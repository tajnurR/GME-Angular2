{"ast":null,"code":"import FormatException from '../../../../FormatException';\nimport IllegalStateException from '../../../../IllegalStateException';\nimport StringBuilder from '../../../../util/StringBuilder';\nimport BlockParsedResult from './BlockParsedResult';\nimport DecodedChar from './DecodedChar';\nimport DecodedInformation from './DecodedInformation';\nimport DecodedNumeric from './DecodedNumeric';\nimport FieldParser from './FieldParser';\nvar GeneralAppIdDecoder = /** @class */function () {\n  function GeneralAppIdDecoder(information) {\n    this.buffer = new StringBuilder();\n    this.information = information;\n  }\n  GeneralAppIdDecoder.prototype.decodeAllCodes = function (buff, initialPosition) {\n    var currentPosition = initialPosition;\n    var remaining = null;\n    do {\n      var info = this.decodeGeneralPurposeField(currentPosition, remaining);\n      var parsedFields = FieldParser.parseFieldsInGeneralPurpose(info.getNewString());\n      if (parsedFields != null) {\n        buff.append(parsedFields);\n      }\n      if (info.isRemaining()) {\n        remaining = '' + info.getRemainingValue();\n      } else {\n        remaining = null;\n      }\n      if (currentPosition === info.getNewPosition()) {\n        // No step forward!\n        break;\n      }\n      currentPosition = info.getNewPosition();\n    } while (true);\n    return buff.toString();\n  };\n  GeneralAppIdDecoder.prototype.isStillNumeric = function (pos) {\n    // It's numeric if it still has 7 positions\n    // and one of the first 4 bits is \"1\".\n    if (pos + 7 > this.information.getSize()) {\n      return pos + 4 <= this.information.getSize();\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return true;\n      }\n    }\n    return this.information.get(pos + 3);\n  };\n  GeneralAppIdDecoder.prototype.decodeNumeric = function (pos) {\n    if (pos + 7 > this.information.getSize()) {\n      var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);\n      if (numeric_1 === 0) {\n        return new DecodedNumeric(this.information.getSize(), DecodedNumeric.FNC1, DecodedNumeric.FNC1);\n      }\n      return new DecodedNumeric(this.information.getSize(), numeric_1 - 1, DecodedNumeric.FNC1);\n    }\n    var numeric = this.extractNumericValueFromBitArray(pos, 7);\n    var digit1 = (numeric - 8) / 11;\n    var digit2 = (numeric - 8) % 11;\n    return new DecodedNumeric(pos + 7, digit1, digit2);\n  };\n  GeneralAppIdDecoder.prototype.extractNumericValueFromBitArray = function (pos, bits) {\n    return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\n  };\n  GeneralAppIdDecoder.extractNumericValueFromBitArray = function (information, pos, bits) {\n    var value = 0;\n    for (var i = 0; i < bits; ++i) {\n      if (information.get(pos + i)) {\n        value |= 1 << bits - i - 1;\n      }\n    }\n    return value;\n  };\n  GeneralAppIdDecoder.prototype.decodeGeneralPurposeField = function (pos, remaining) {\n    // this.buffer.setLength(0);\n    this.buffer.setLengthToZero();\n    if (remaining != null) {\n      this.buffer.append(remaining);\n    }\n    this.current.setPosition(pos);\n    var lastDecoded = this.parseBlocks();\n    if (lastDecoded != null && lastDecoded.isRemaining()) {\n      return new DecodedInformation(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\n    }\n    return new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n  };\n  GeneralAppIdDecoder.prototype.parseBlocks = function () {\n    var isFinished;\n    var result;\n    do {\n      var initialPosition = this.current.getPosition();\n      if (this.current.isAlpha()) {\n        result = this.parseAlphaBlock();\n        isFinished = result.isFinished();\n      } else if (this.current.isIsoIec646()) {\n        result = this.parseIsoIec646Block();\n        isFinished = result.isFinished();\n      } else {\n        // it must be numeric\n        result = this.parseNumericBlock();\n        isFinished = result.isFinished();\n      }\n      var positionChanged = initialPosition !== this.current.getPosition();\n      if (!positionChanged && !isFinished) {\n        break;\n      }\n    } while (!isFinished);\n    return result.getDecodedInformation();\n  };\n  GeneralAppIdDecoder.prototype.parseNumericBlock = function () {\n    while (this.isStillNumeric(this.current.getPosition())) {\n      var numeric = this.decodeNumeric(this.current.getPosition());\n      this.current.setPosition(numeric.getNewPosition());\n      if (numeric.isFirstDigitFNC1()) {\n        var information = void 0;\n        if (numeric.isSecondDigitFNC1()) {\n          information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        } else {\n          information = new DecodedInformation(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\n        }\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(numeric.getFirstDigit());\n      if (numeric.isSecondDigitFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(numeric.getSecondDigit());\n    }\n    if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\n      this.current.setAlpha();\n      this.current.incrementPosition(4);\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.parseIsoIec646Block = function () {\n    while (this.isStillIsoIec646(this.current.getPosition())) {\n      var iso = this.decodeIsoIec646(this.current.getPosition());\n      this.current.setPosition(iso.getNewPosition());\n      if (iso.isFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(iso.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setAlpha();\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.parseAlphaBlock = function () {\n    while (this.isStillAlpha(this.current.getPosition())) {\n      var alpha = this.decodeAlphanumeric(this.current.getPosition());\n      this.current.setPosition(alpha.getNewPosition());\n      if (alpha.isFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information); // end of the char block\n      }\n\n      this.buffer.append(alpha.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setIsoIec646();\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.isStillIsoIec646 = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 7 > this.information.getSize()) {\n      return false;\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 116) {\n      return true;\n    }\n    if (pos + 8 > this.information.getSize()) {\n      return false;\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    return eightBitValue >= 232 && eightBitValue < 253;\n  };\n  GeneralAppIdDecoder.prototype.decodeIsoIec646 = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue === 15) {\n      return new DecodedChar(pos + 5, DecodedChar.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 90) {\n      return new DecodedChar(pos + 7, '' + (sevenBitValue + 1));\n    }\n    if (sevenBitValue >= 90 && sevenBitValue < 116) {\n      return new DecodedChar(pos + 7, '' + (sevenBitValue + 7));\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    var c;\n    switch (eightBitValue) {\n      case 232:\n        c = '!';\n        break;\n      case 233:\n        c = '\"';\n        break;\n      case 234:\n        c = '%';\n        break;\n      case 235:\n        c = '&';\n        break;\n      case 236:\n        c = '\\'';\n        break;\n      case 237:\n        c = '(';\n        break;\n      case 238:\n        c = ')';\n        break;\n      case 239:\n        c = '*';\n        break;\n      case 240:\n        c = '+';\n        break;\n      case 241:\n        c = ',';\n        break;\n      case 242:\n        c = '-';\n        break;\n      case 243:\n        c = '.';\n        break;\n      case 244:\n        c = '/';\n        break;\n      case 245:\n        c = ':';\n        break;\n      case 246:\n        c = ';';\n        break;\n      case 247:\n        c = '<';\n        break;\n      case 248:\n        c = '=';\n        break;\n      case 249:\n        c = '>';\n        break;\n      case 250:\n        c = '?';\n        break;\n      case 251:\n        c = '_';\n        break;\n      case 252:\n        c = ' ';\n        break;\n      default:\n        throw new FormatException();\n    }\n    return new DecodedChar(pos + 8, c);\n  };\n  GeneralAppIdDecoder.prototype.isStillAlpha = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    // We now check if it's a valid 5-bit value (0..9 and FNC1)\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 6 > this.information.getSize()) {\n      return false;\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\n  };\n\n  GeneralAppIdDecoder.prototype.decodeAlphanumeric = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue === 15) {\n      return new DecodedChar(pos + 5, DecodedChar.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    if (sixBitValue >= 32 && sixBitValue < 58) {\n      return new DecodedChar(pos + 6, '' + (sixBitValue + 33));\n    }\n    var c;\n    switch (sixBitValue) {\n      case 58:\n        c = '*';\n        break;\n      case 59:\n        c = ',';\n        break;\n      case 60:\n        c = '-';\n        break;\n      case 61:\n        c = '.';\n        break;\n      case 62:\n        c = '/';\n        break;\n      default:\n        throw new IllegalStateException('Decoding invalid alphanumeric value: ' + sixBitValue);\n    }\n    return new DecodedChar(pos + 6, c);\n  };\n  GeneralAppIdDecoder.prototype.isAlphaTo646ToAlphaLatch = function (pos) {\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\n      if (i === 2) {\n        if (!this.information.get(pos + 2)) {\n          return false;\n        }\n      } else if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isAlphaOr646ToNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 3 positions and they are all zeros\n    if (pos + 3 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isNumericToAlphaNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 4 positions and they are all zeros, or\n    // if there is a subset of this just before the end of the symbol\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\n      if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return GeneralAppIdDecoder;\n}();\nexport default GeneralAppIdDecoder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}