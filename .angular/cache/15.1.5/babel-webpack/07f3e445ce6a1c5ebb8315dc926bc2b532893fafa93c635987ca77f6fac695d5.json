{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing.oned {*/\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport NotFoundException from '../NotFoundException';\nimport Code128Reader from './Code128Reader';\nimport Code39Reader from './Code39Reader';\nimport ITFReader from './ITFReader';\nimport MultiFormatUPCEANReader from './MultiFormatUPCEANReader';\nimport OneDReader from './OneDReader';\nimport RSSExpandedReader from './rss/expanded/RSSExpandedReader';\nimport RSS14Reader from './rss/RSS14Reader';\n/**\r\n * @author Daniel Switkin <dswitkin@google.com>\r\n * @author Sean Owen\r\n */\nvar MultiFormatOneDReader = /** @class */function (_super) {\n  __extends(MultiFormatOneDReader, _super);\n  function MultiFormatOneDReader(hints) {\n    var _this = _super.call(this) || this;\n    _this.readers = [];\n    var possibleFormats = !hints ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n    var useCode39CheckDigit = hints && hints.get(DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT) !== undefined;\n    if (possibleFormats) {\n      if (possibleFormats.includes(BarcodeFormat.EAN_13) || possibleFormats.includes(BarcodeFormat.UPC_A) || possibleFormats.includes(BarcodeFormat.EAN_8) || possibleFormats.includes(BarcodeFormat.UPC_E)) {\n        _this.readers.push(new MultiFormatUPCEANReader(hints));\n      }\n      if (possibleFormats.includes(BarcodeFormat.CODE_39)) {\n        _this.readers.push(new Code39Reader(useCode39CheckDigit));\n      }\n      // if (possibleFormats.includes(BarcodeFormat.CODE_93)) {\n      //    this.readers.push(new Code93Reader());\n      // }\n      if (possibleFormats.includes(BarcodeFormat.CODE_128)) {\n        _this.readers.push(new Code128Reader());\n      }\n      if (possibleFormats.includes(BarcodeFormat.ITF)) {\n        _this.readers.push(new ITFReader());\n      }\n      // if (possibleFormats.includes(BarcodeFormat.CODABAR)) {\n      //    this.readers.push(new CodaBarReader());\n      // }\n      if (possibleFormats.includes(BarcodeFormat.RSS_14)) {\n        _this.readers.push(new RSS14Reader());\n      }\n      if (possibleFormats.includes(BarcodeFormat.RSS_EXPANDED)) {\n        console.warn('RSS Expanded reader IS NOT ready for production yet! use at your own risk.');\n        _this.readers.push(new RSSExpandedReader());\n      }\n    }\n    if (_this.readers.length === 0) {\n      _this.readers.push(new MultiFormatUPCEANReader(hints));\n      _this.readers.push(new Code39Reader());\n      // this.readers.push(new CodaBarReader());\n      // this.readers.push(new Code93Reader());\n      _this.readers.push(new MultiFormatUPCEANReader(hints));\n      _this.readers.push(new Code128Reader());\n      _this.readers.push(new ITFReader());\n      _this.readers.push(new RSS14Reader());\n      // this.readers.push(new RSSExpandedReader());\n    }\n\n    return _this;\n  }\n  // @Override\n  MultiFormatOneDReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    for (var i = 0; i < this.readers.length; i++) {\n      try {\n        return this.readers[i].decodeRow(rowNumber, row, hints);\n      } catch (re) {\n        // continue\n      }\n    }\n    throw new NotFoundException();\n  };\n  // @Override\n  MultiFormatOneDReader.prototype.reset = function () {\n    this.readers.forEach(function (reader) {\n      return reader.reset();\n    });\n  };\n  return MultiFormatOneDReader;\n}(OneDReader);\nexport default MultiFormatOneDReader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}