{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing.oned {*/\nimport BarcodeFormat from '../BarcodeFormat';\nimport Result from '../Result';\nimport NotFoundException from '../NotFoundException';\nimport EAN13Reader from './EAN13Reader';\nimport UPCEANReader from './UPCEANReader';\n/**\r\n * Encapsulates functionality and implementation that is common to all families\r\n * of one-dimensional barcodes.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n * @author Sean Owen\r\n * @author sam2332 (Sam Rudloff)\r\n *\r\n * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCAReader.java\r\n *\r\n * @experimental\r\n */\nvar UPCAReader = /** @class */function (_super) {\n  __extends(UPCAReader, _super);\n  function UPCAReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.ean13Reader = new EAN13Reader();\n    return _this;\n  }\n  // @Override\n  UPCAReader.prototype.getBarcodeFormat = function () {\n    return BarcodeFormat.UPC_A;\n  };\n  // Note that we don't try rotation without the try harder flag, even if rotation was supported.\n  // @Override\n  UPCAReader.prototype.decode = function (image, hints) {\n    return this.maybeReturnResult(this.ean13Reader.decode(image));\n  };\n  // @Override\n  UPCAReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    return this.maybeReturnResult(this.ean13Reader.decodeRow(rowNumber, row, hints));\n  };\n  // @Override\n  UPCAReader.prototype.decodeMiddle = function (row, startRange, resultString) {\n    return this.ean13Reader.decodeMiddle(row, startRange, resultString);\n  };\n  UPCAReader.prototype.maybeReturnResult = function (result) {\n    var text = result.getText();\n    if (text.charAt(0) === '0') {\n      var upcaResult = new Result(text.substring(1), null, null, result.getResultPoints(), BarcodeFormat.UPC_A);\n      if (result.getResultMetadata() != null) {\n        upcaResult.putAllMetadata(result.getResultMetadata());\n      }\n      return upcaResult;\n    } else {\n      throw new NotFoundException();\n    }\n  };\n  UPCAReader.prototype.reset = function () {\n    this.ean13Reader.reset();\n  };\n  return UPCAReader;\n}(UPCEANReader);\nexport default UPCAReader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}