{"ast":null,"code":"/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.FormatException;\nimport FormatException from '../../FormatException';\n// import com.google.zxing.common.CharacterSetECI;\nimport CharacterSetECI from '../../common/CharacterSetECI';\n// import com.google.zxing.common.DecoderResult;\nimport DecoderResult from '../../common/DecoderResult';\n// import com.google.zxing.pdf417.PDF417ResultMetadata;\nimport PDF417ResultMetadata from '../PDF417ResultMetadata';\n// import java.io.ByteArrayOutputStream;\n// import java.math.BigInteger;\n// import java.nio.charset.Charset;\n// import java.nio.charset.StandardCharsets;\n// import java.util.Arrays;\nimport Arrays from '../../util/Arrays';\nimport StringBuilder from '../../util/StringBuilder';\nimport Integer from '../../util/Integer';\nimport Long from '../../util/Long';\nimport ByteArrayOutputStream from '../../util/ByteArrayOutputStream';\nimport StringEncoding from '../../util/StringEncoding';\n/*private*/\nvar Mode = /*#__PURE__*/(() => {\n  (function (Mode) {\n    Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n    Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n    Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n    Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n    Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n    Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n  })(Mode || (Mode = {}));\n  return Mode;\n})();\n/**\r\n * Indirectly access the global BigInt constructor, it\r\n * allows browsers that doesn't support BigInt to run\r\n * the library without breaking due to \"undefined BigInt\"\r\n * errors.\r\n */\nfunction getBigIntConstructor() {\n  if (typeof window !== 'undefined') {\n    return window['BigInt'] || null;\n  }\n  if (typeof global !== 'undefined') {\n    return global['BigInt'] || null;\n  }\n  if (typeof self !== 'undefined') {\n    return self['BigInt'] || null;\n  }\n  throw new Error('Can\\'t search globals for BigInt!');\n}\n/**\r\n * Used to store the BigInt constructor.\r\n */\nvar BigInteger;\n/**\r\n * This function creates a bigint value. It allows browsers\r\n * that doesn't support BigInt to run the rest of the library\r\n * by not directly accessing the BigInt constructor.\r\n */\nfunction createBigInt(num) {\n  if (typeof BigInteger === 'undefined') {\n    BigInteger = getBigIntConstructor();\n  }\n  if (BigInteger === null) {\n    throw new Error('BigInt is not supported!');\n  }\n  return BigInteger(num);\n}\nfunction getEXP900() {\n  // in Java - array with length = 16\n  var EXP900 = [];\n  EXP900[0] = createBigInt(1);\n  var nineHundred = createBigInt(900);\n  EXP900[1] = nineHundred;\n  // in Java - array with length = 16\n  for (var i /*int*/ = 2; i < 16; i++) {\n    EXP900[i] = EXP900[i - 1] * nineHundred;\n  }\n  return EXP900;\n}\n/**\r\n * <p>This class contains the methods for decoding the PDF417 codewords.</p>\r\n *\r\n * @author SITA Lab (kevin.osullivan@sita.aero)\r\n * @author Guenther Grau\r\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  //   private DecodedBitStreamParser() {\n  // }\n  /**\r\n   *\r\n   * @param codewords\r\n   * @param ecLevel\r\n   *\r\n   * @throws FormatException\r\n   */\n  DecodedBitStreamParser.decode = function (codewords, ecLevel) {\n    // pass encoding to result (will be used for decode symbols in byte mode)\n    var result = new StringBuilder('');\n    // let encoding: Charset = StandardCharsets.ISO_8859_1;\n    var encoding = CharacterSetECI.ISO8859_1;\n    /**\r\n     * @note the next command is specific from this TypeScript library\r\n     * because TS can't properly cast some values to char and\r\n     * convert it to string later correctly due to encoding\r\n     * differences from Java version. As reported here:\r\n     * https://github.com/zxing-js/library/pull/264/files#r382831593\r\n     */\n    result.enableDecoding(encoding);\n    // Get compaction mode\n    var codeIndex = 1;\n    var code = codewords[codeIndex++];\n    var resultMetadata = new PDF417ResultMetadata();\n    while (codeIndex < codewords[0]) {\n      switch (code) {\n        case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          codeIndex = DecodedBitStreamParser.byteCompaction(code, codewords, encoding, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n          result.append( /*(char)*/codewords[codeIndex++]);\n          break;\n        case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.ECI_CHARSET:\n          var charsetECI = CharacterSetECI.getCharacterSetECIByValue(codewords[codeIndex++]);\n          // encoding = Charset.forName(charsetECI.getName());\n          break;\n        case DecodedBitStreamParser.ECI_GENERAL_PURPOSE:\n          // Can't do anything with generic ECI; skip its 2 characters\n          codeIndex += 2;\n          break;\n        case DecodedBitStreamParser.ECI_USER_DEFINED:\n          // Can't do anything with user ECI; skip its 1 character\n          codeIndex++;\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          codeIndex = DecodedBitStreamParser.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          // Should not see these outside a macro block\n          throw new FormatException();\n        default:\n          // Default to text compaction. During testing numerous barcodes\n          // appeared to be missing the starting mode. In these cases defaulting\n          // to text compaction seems to work.\n          codeIndex--;\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n      }\n      if (codeIndex < codewords.length) {\n        code = codewords[codeIndex++];\n      } else {\n        throw FormatException.getFormatInstance();\n      }\n    }\n    if (result.length() === 0) {\n      throw FormatException.getFormatInstance();\n    }\n    var decoderResult = new DecoderResult(null, result.toString(), null, ecLevel);\n    decoderResult.setOther(resultMetadata);\n    return decoderResult;\n  };\n  /**\r\n   *\r\n   * @param int\r\n   * @param param1\r\n   * @param codewords\r\n   * @param int\r\n   * @param codeIndex\r\n   * @param PDF417ResultMetadata\r\n   * @param resultMetadata\r\n   *\r\n   * @throws FormatException\r\n   */\n  // @SuppressWarnings(\"deprecation\")\n  DecodedBitStreamParser.decodeMacroBlock = function (codewords, codeIndex, resultMetadata) {\n    if (codeIndex + DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n      // we must have at least two bytes left for the segment index\n      throw FormatException.getFormatInstance();\n    }\n    var segmentIndexArray = new Int32Array(DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS);\n    for (var i /*int*/ = 0; i < DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n      segmentIndexArray[i] = codewords[codeIndex];\n    }\n    resultMetadata.setSegmentIndex(Integer.parseInt(DecodedBitStreamParser.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS)));\n    var fileId = new StringBuilder();\n    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, fileId);\n    resultMetadata.setFileId(fileId.toString());\n    var optionalFieldsStart = -1;\n    if (codewords[codeIndex] === DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n      optionalFieldsStart = codeIndex + 1;\n    }\n    while (codeIndex < codewords[0]) {\n      switch (codewords[codeIndex]) {\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          codeIndex++;\n          switch (codewords[codeIndex]) {\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n              var fileName = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, fileName);\n              resultMetadata.setFileName(fileName.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n              var sender = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, sender);\n              resultMetadata.setSender(sender.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n              var addressee = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, addressee);\n              resultMetadata.setAddressee(addressee.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n              var segmentCount = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, segmentCount);\n              resultMetadata.setSegmentCount(Integer.parseInt(segmentCount.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n              var timestamp = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, timestamp);\n              resultMetadata.setTimestamp(Long.parseLong(timestamp.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n              var checksum = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, checksum);\n              resultMetadata.setChecksum(Integer.parseInt(checksum.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n              var fileSize = new StringBuilder();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, fileSize);\n              resultMetadata.setFileSize(Long.parseLong(fileSize.toString()));\n              break;\n            default:\n              throw FormatException.getFormatInstance();\n          }\n          break;\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          codeIndex++;\n          resultMetadata.setLastSegment(true);\n          break;\n        default:\n          throw FormatException.getFormatInstance();\n      }\n    }\n    // copy optional fields to additional options\n    if (optionalFieldsStart !== -1) {\n      var optionalFieldsLength = codeIndex - optionalFieldsStart;\n      if (resultMetadata.isLastSegment()) {\n        // do not include terminator\n        optionalFieldsLength--;\n      }\n      resultMetadata.setOptionalData(Arrays.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n    }\n    return codeIndex;\n  };\n  /**\r\n   * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\r\n   * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\r\n   * well as selected control characters.\r\n   *\r\n   * @param codewords The array of codewords (data + error)\r\n   * @param codeIndex The current index into the codeword array.\r\n   * @param result    The decoded data is appended to the result.\r\n   * @return The next index into the codeword array.\r\n   */\n  DecodedBitStreamParser.textCompaction = function (codewords, codeIndex, result) {\n    // 2 character per codeword\n    var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    // Used to hold the byte compaction value if there is a mode shift\n    var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    var index = 0;\n    var end = false;\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        textCompactionData[index] = code / 30;\n        textCompactionData[index + 1] = code % 30;\n        index += 2;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            // reinitialize text compaction mode to alpha sub mode\n            textCompactionData[index++] = DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH;\n            break;\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n          case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n            // The Mode Shift codeword 913 shall cause a temporary\n            // switch from Text Compaction mode to Byte Compaction mode.\n            // This switch shall be in effect for only the next codeword,\n            // after which the mode shall revert to the prevailing sub-mode\n            // of the Text Compaction mode. Codeword 913 is only available\n            // in Text Compaction mode; its use is described in 5.4.2.4.\n            textCompactionData[index] = DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n            code = codewords[codeIndex++];\n            byteCompactionData[index] = code;\n            index++;\n            break;\n        }\n      }\n    }\n    DecodedBitStreamParser.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n    return codeIndex;\n  };\n  /**\r\n   * The Text Compaction mode includes all the printable ASCII characters\r\n   * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\r\n   * (9: e), LF or line feed (10: e), and CR or carriage\r\n   * return (13: e). The Text Compaction mode also includes various latch\r\n   * and shift characters which are used exclusively within the mode. The Text\r\n   * Compaction mode encodes up to 2 characters per codeword. The compaction rules\r\n   * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\r\n   * switches are defined in 5.4.2.3.\r\n   *\r\n   * @param textCompactionData The text compaction data.\r\n   * @param byteCompactionData The byte compaction data if there\r\n   *                           was a mode shift.\r\n   * @param length             The size of the text compaction and byte compaction data.\r\n   * @param result             The decoded data is appended to the result.\r\n   */\n  DecodedBitStreamParser.decodeTextCompaction = function (textCompactionData, byteCompactionData, length, result) {\n    // Beginning from an initial state of the Alpha sub-mode\n    // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n    // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n    // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n    var subMode = Mode.ALPHA;\n    var priorToShiftMode = Mode.ALPHA;\n    var i = 0;\n    while (i < length) {\n      var subModeCh = textCompactionData[i];\n      var ch = /*char*/'';\n      switch (subMode) {\n        case Mode.ALPHA:\n          // Alpha (alphabetic: uppercase)\n          if (subModeCh < 26) {\n            // Upper case Alpha Character\n            // Note: 65 = 'A' ASCII -> there is byte code of symbol\n            ch = /*(char)('A' + subModeCh) */String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.LOWER:\n          // Lower (alphabetic: lowercase)\n          if (subModeCh < 26) {\n            ch = /*(char)('a' + subModeCh)*/String.fromCharCode(97 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.AS:\n                // Shift to alpha\n                priorToShiftMode = subMode;\n                subMode = Mode.ALPHA_SHIFT;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // TODO Does this need to use the current character encoding? See other occurrences below\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.MIXED:\n          // Mixed (punctuation: e)\n          if (subModeCh < DecodedBitStreamParser.PL) {\n            ch = DecodedBitStreamParser.MIXED_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PL:\n                subMode = Mode.PUNCT;\n                break;\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.AL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT:\n          // Punctuation\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.ALPHA_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < 26) {\n            ch = /*(char)('A' + subModeCh)*/String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // PS before Shift-to-Byte is used as a padding character,\n                // see 5.4.2.4 of the specification\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n      }\n      // if (ch !== 0) {\n      if (ch !== '') {\n        // Append decoded character to result\n        result.append(ch);\n      }\n      i++;\n    }\n  };\n  /**\r\n   * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\r\n   * This includes all ASCII characters value 0 to 127 inclusive and provides for international\r\n   * character set support.\r\n   *\r\n   * @param mode      The byte compaction mode i.e. 901 or 924\r\n   * @param codewords The array of codewords (data + error)\r\n   * @param encoding  Currently active character encoding\r\n   * @param codeIndex The current index into the codeword array.\r\n   * @param result    The decoded data is appended to the result.\r\n   * @return The next index into the codeword array.\r\n   */\n  DecodedBitStreamParser.byteCompaction = function (mode, codewords, encoding, codeIndex, result) {\n    var decodedBytes = new ByteArrayOutputStream();\n    var count = 0;\n    var value = /*long*/0;\n    var end = false;\n    switch (mode) {\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        // Total number of Byte Compaction characters to be encoded\n        // is not a multiple of 6\n        var byteCompactedCodewords = new Int32Array(6);\n        var nextCode = codewords[codeIndex++];\n        while (codeIndex < codewords[0] && !end) {\n          byteCompactedCodewords[count++] = nextCode;\n          // Base 900\n          value = 900 * value + nextCode;\n          nextCode = codewords[codeIndex++];\n          // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n          switch (nextCode) {\n            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n            case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n              codeIndex--;\n              end = true;\n              break;\n            default:\n              if (count % 5 === 0 && count > 0) {\n                // Decode every 5 codewords\n                // Convert to Base 256\n                for (var j /*int*/ = 0; j < 6; ++j) {\n                  /* @note\r\n                   * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\r\n                   * So the next bitwise operation could not be done with simple numbers\r\n                   */\n                  decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                }\n                value = 0;\n                count = 0;\n              }\n              break;\n          }\n        }\n        // if the end of all codewords is reached the last codeword needs to be added\n        if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n          byteCompactedCodewords[count++] = nextCode;\n        }\n        // If Byte Compaction mode is invoked with codeword 901,\n        // the last group of codewords is interpreted directly\n        // as one byte per codeword, without compaction.\n        for (var i /*int*/ = 0; i < count; i++) {\n          decodedBytes.write( /*(byte)*/byteCompactedCodewords[i]);\n        }\n        break;\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n        // Total number of Byte Compaction characters to be encoded\n        // is an integer multiple of 6\n        while (codeIndex < codewords[0] && !end) {\n          var code = codewords[codeIndex++];\n          if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n            count++;\n            // Base 900\n            value = 900 * value + code;\n          } else {\n            switch (code) {\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n              case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                codeIndex--;\n                end = true;\n                break;\n            }\n          }\n          if (count % 5 === 0 && count > 0) {\n            // Decode every 5 codewords\n            // Convert to Base 256\n            /* @note\r\n             * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\r\n             * So the next bitwise operation could not be done with simple numbers\r\n            */\n            for (var j /*int*/ = 0; j < 6; ++j) {\n              decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n            }\n            value = 0;\n            count = 0;\n          }\n        }\n        break;\n    }\n    result.append(StringEncoding.decode(decodedBytes.toByteArray(), encoding));\n    return codeIndex;\n  };\n  /**\r\n   * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\r\n   *\r\n   * @param codewords The array of codewords (data + error)\r\n   * @param codeIndex The current index into the codeword array.\r\n   * @param result    The decoded data is appended to the result.\r\n   * @return The next index into the codeword array.\r\n   *\r\n   * @throws FormatException\r\n   */\n  DecodedBitStreamParser.numericCompaction = function (codewords, codeIndex /*int*/, result) {\n    var count = 0;\n    var end = false;\n    var numericCodewords = new Int32Array(DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS);\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (codeIndex === codewords[0]) {\n        end = true;\n      }\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        numericCodewords[count] = code;\n        count++;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n        }\n      }\n      if ((count % DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n        // Re-invoking Numeric Compaction mode (by using codeword 902\n        // while in Numeric Compaction mode) serves  to terminate the\n        // current Numeric Compaction mode grouping as described in 5.4.4.2,\n        // and then to start a new one grouping.\n        result.append(DecodedBitStreamParser.decodeBase900toBase10(numericCodewords, count));\n        count = 0;\n      }\n    }\n    return codeIndex;\n  };\n  /**\r\n   * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\r\n   *\r\n   * @param codewords The array of codewords\r\n   * @param count     The number of codewords\r\n   * @return The decoded string representing the Numeric data.\r\n   *\r\n   * EXAMPLE\r\n   * Encode the fifteen digit numeric string 000213298174000\r\n   * Prefix the numeric string with a 1 and set the initial value of\r\n   * t = 1 000 213 298 174 000\r\n   * Calculate codeword 0\r\n   * d0 = 1 000 213 298 174 000 mod 900 = 200\r\n   *\r\n   * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\r\n   * Calculate codeword 1\r\n   * d1 = 1 111 348 109 082 mod 900 = 282\r\n   *\r\n   * t = 1 111 348 109 082 div 900 = 1 234 831 232\r\n   * Calculate codeword 2\r\n   * d2 = 1 234 831 232 mod 900 = 632\r\n   *\r\n   * t = 1 234 831 232 div 900 = 1 372 034\r\n   * Calculate codeword 3\r\n   * d3 = 1 372 034 mod 900 = 434\r\n   *\r\n   * t = 1 372 034 div 900 = 1 524\r\n   * Calculate codeword 4\r\n   * d4 = 1 524 mod 900 = 624\r\n   *\r\n   * t = 1 524 div 900 = 1\r\n   * Calculate codeword 5\r\n   * d5 = 1 mod 900 = 1\r\n   * t = 1 div 900 = 0\r\n   * Codeword sequence is: 1, 624, 434, 632, 282, 200\r\n   *\r\n   * Decode the above codewords involves\r\n   *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\r\n   * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\r\n   *\r\n   * Remove leading 1 =>  Result is 000213298174000\r\n   *\r\n   * @throws FormatException\r\n   */\n  DecodedBitStreamParser.decodeBase900toBase10 = function (codewords, count) {\n    var result = createBigInt(0);\n    for (var i /*int*/ = 0; i < count; i++) {\n      result += DecodedBitStreamParser.EXP900[count - i - 1] * createBigInt(codewords[i]);\n    }\n    var resultString = result.toString();\n    if (resultString.charAt(0) !== '1') {\n      throw new FormatException();\n    }\n    return resultString.substring(1);\n  };\n  DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH = 900;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH = 901;\n  DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH = 902;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n  DecodedBitStreamParser.ECI_USER_DEFINED = 925;\n  DecodedBitStreamParser.ECI_GENERAL_PURPOSE = 926;\n  DecodedBitStreamParser.ECI_CHARSET = 927;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n  DecodedBitStreamParser.MACRO_PDF417_TERMINATOR = 922;\n  DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n  DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS = 15;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n  DecodedBitStreamParser.PL = 25;\n  DecodedBitStreamParser.LL = 27;\n  DecodedBitStreamParser.AS = 27;\n  DecodedBitStreamParser.ML = 28;\n  DecodedBitStreamParser.AL = 28;\n  DecodedBitStreamParser.PS = 29;\n  DecodedBitStreamParser.PAL = 29;\n  DecodedBitStreamParser.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n  DecodedBitStreamParser.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n  /**\r\n   * Table containing values for the exponent of 900.\r\n   * This is used in the numeric compaction decode algorithm.\r\n   */\n  DecodedBitStreamParser.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n  DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n  return DecodedBitStreamParser;\n}();\nexport default DecodedBitStreamParser;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}