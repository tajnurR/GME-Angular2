{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport Arrays from '../../util/Arrays';\nimport * as C from './EncoderConstants';\nexport function static_SHIFT_TABLE(SHIFT_TABLE) {\n  var e_1, _a;\n  try {\n    for (var SHIFT_TABLE_1 = __values(SHIFT_TABLE), SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next(); !SHIFT_TABLE_1_1.done; SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next()) {\n      var table = SHIFT_TABLE_1_1.value /*Int32Array*/;\n      Arrays.fill(table, -1);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (SHIFT_TABLE_1_1 && !SHIFT_TABLE_1_1.done && (_a = SHIFT_TABLE_1.return)) _a.call(SHIFT_TABLE_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  SHIFT_TABLE[C.MODE_UPPER][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_LOWER][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_LOWER][C.MODE_UPPER] = 28;\n  SHIFT_TABLE[C.MODE_MIXED][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_DIGIT][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_DIGIT][C.MODE_UPPER] = 15;\n  return SHIFT_TABLE;\n}\nexport var /*final*/SHIFT_TABLE = static_SHIFT_TABLE(Arrays.createInt32Array(6, 6)); // mode shift codes, per table","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}