{"ast":null,"code":"/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// package com.google.zxing.pdf417;\n// import com.google.zxing.BarcodeFormat;\nimport BarcodeFormat from '../BarcodeFormat';\n// import com.google.zxing.ChecksumException;\nimport ChecksumException from '../ChecksumException';\n// import com.google.zxing.FormatException;\nimport FormatException from '../FormatException';\n// import com.google.zxing.NotFoundException;\nimport NotFoundException from '../NotFoundException';\n// import com.google.zxing.Result;\nimport Result from '../Result';\n// import com.google.zxing.common.DecoderResult;\n// import com.google.zxing.multi.MultipleBarcodeReader;\n// import com.google.zxing.pdf417.decoder.PDF417ScanningDecoder;\n// import com.google.zxing.pdf417.detector.Detector;\n// import com.google.zxing.pdf417.detector.PDF417DetectorResult;\nimport PDF417Common from './PDF417Common';\nimport Integer from '../util/Integer';\nimport ResultMetadataType from '../ResultMetadataType';\nimport Detector from './detector/Detector';\nimport PDF417ScanningDecoder from './decoder/PDF417ScanningDecoder';\n// import java.util.ArrayList;\n// import java.util.List;\n// import java.util.Map;\n/**\r\n * This implementation can detect and decode PDF417 codes in an image.\r\n *\r\n * @author Guenther Grau\r\n */\nvar PDF417Reader = /** @class */function () {\n  function PDF417Reader() {}\n  // private static /*final Result[]*/ EMPTY_RESULT_ARRAY: Result[] = new Result([0]);\n  /**\r\n   * Locates and decodes a PDF417 code in an image.\r\n   *\r\n   * @return a String representing the content encoded by the PDF417 code\r\n   * @throws NotFoundException if a PDF417 code cannot be found,\r\n   * @throws FormatException if a PDF417 cannot be decoded\r\n   * @throws ChecksumException\r\n   */\n  // @Override\n  PDF417Reader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    var result = PDF417Reader.decode(image, hints, false);\n    if (result == null || result.length === 0 || result[0] == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    return result[0];\n  };\n  /**\r\n   *\r\n   * @param BinaryBitmap\r\n   * @param image\r\n   * @throws NotFoundException\r\n   */\n  //   @Override\n  PDF417Reader.prototype.decodeMultiple = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    try {\n      return PDF417Reader.decode(image, hints, true);\n    } catch (ignored) {\n      if (ignored instanceof FormatException || ignored instanceof ChecksumException) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n      throw ignored;\n    }\n  };\n  /**\r\n   *\r\n   * @param image\r\n   * @param hints\r\n   * @param multiple\r\n   *\r\n   * @throws NotFoundException\r\n   * @throws FormatException√ü\r\n   * @throws ChecksumException\r\n   */\n  PDF417Reader.decode = function (image, hints, multiple) {\n    var e_1, _a;\n    var results = new Array();\n    var detectorResult = Detector.detectMultiple(image, hints, multiple);\n    try {\n      for (var _b = __values(detectorResult.getPoints()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var points = _c.value;\n        var decoderResult = PDF417ScanningDecoder.decode(detectorResult.getBits(), points[4], points[5], points[6], points[7], PDF417Reader.getMinCodewordWidth(points), PDF417Reader.getMaxCodewordWidth(points));\n        var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat.PDF_417);\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, decoderResult.getECLevel());\n        var pdf417ResultMetadata = decoderResult.getOther();\n        if (pdf417ResultMetadata != null) {\n          result.putMetadata(ResultMetadataType.PDF417_EXTRA_METADATA, pdf417ResultMetadata);\n        }\n        results.push(result);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return results.map(function (x) {\n      return x;\n    });\n  };\n  PDF417Reader.getMaxWidth = function (p1, p2) {\n    if (p1 == null || p2 == null) {\n      return 0;\n    }\n    return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n  };\n  PDF417Reader.getMinWidth = function (p1, p2) {\n    if (p1 == null || p2 == null) {\n      return Integer.MAX_VALUE;\n    }\n    return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n  };\n  PDF417Reader.getMaxCodewordWidth = function (p) {\n    return Math.floor(Math.max(Math.max(PDF417Reader.getMaxWidth(p[0], p[4]), PDF417Reader.getMaxWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN), Math.max(PDF417Reader.getMaxWidth(p[1], p[5]), PDF417Reader.getMaxWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN)));\n  };\n  PDF417Reader.getMinCodewordWidth = function (p) {\n    return Math.floor(Math.min(Math.min(PDF417Reader.getMinWidth(p[0], p[4]), PDF417Reader.getMinWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN), Math.min(PDF417Reader.getMinWidth(p[1], p[5]), PDF417Reader.getMinWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN)));\n  };\n  // @Override\n  PDF417Reader.prototype.reset = function () {\n    // nothing needs to be reset\n  };\n  return PDF417Reader;\n}();\nexport default PDF417Reader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}