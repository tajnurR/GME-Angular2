{"ast":null,"code":"/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\r\n * It allows the algorithm to vary polymorphically, for example allowing a very expensive\r\n * thresholding technique for servers and a fast one for mobile. It also permits the implementation\r\n * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\nvar Binarizer = /** @class */function () {\n  function Binarizer(source) {\n    this.source = source;\n  }\n  Binarizer.prototype.getLuminanceSource = function () {\n    return this.source;\n  };\n  Binarizer.prototype.getWidth = function () {\n    return this.source.getWidth();\n  };\n  Binarizer.prototype.getHeight = function () {\n    return this.source.getHeight();\n  };\n  return Binarizer;\n}();\nexport default Binarizer;","map":{"version":3,"names":["Binarizer","source","prototype","getLuminanceSource","getWidth","getHeight"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/Binarizer.js"],"sourcesContent":["/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\r\n * It allows the algorithm to vary polymorphically, for example allowing a very expensive\r\n * thresholding technique for servers and a fast one for mobile. It also permits the implementation\r\n * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nvar Binarizer = /** @class */ (function () {\r\n    function Binarizer(source) {\r\n        this.source = source;\r\n    }\r\n    Binarizer.prototype.getLuminanceSource = function () {\r\n        return this.source;\r\n    };\r\n    Binarizer.prototype.getWidth = function () {\r\n        return this.source.getWidth();\r\n    };\r\n    Binarizer.prototype.getHeight = function () {\r\n        return this.source.getHeight();\r\n    };\r\n    return Binarizer;\r\n}());\r\nexport default Binarizer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAAS,CAACC,MAAM,EAAE;IACvB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACAD,SAAS,CAACE,SAAS,CAACC,kBAAkB,GAAG,YAAY;IACjD,OAAO,IAAI,CAACF,MAAM;EACtB,CAAC;EACDD,SAAS,CAACE,SAAS,CAACE,QAAQ,GAAG,YAAY;IACvC,OAAO,IAAI,CAACH,MAAM,CAACG,QAAQ,EAAE;EACjC,CAAC;EACDJ,SAAS,CAACE,SAAS,CAACG,SAAS,GAAG,YAAY;IACxC,OAAO,IAAI,CAACJ,MAAM,CAACI,SAAS,EAAE;EAClC,CAAC;EACD,OAAOL,SAAS;AACpB,CAAC,EAAG;AACJ,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}