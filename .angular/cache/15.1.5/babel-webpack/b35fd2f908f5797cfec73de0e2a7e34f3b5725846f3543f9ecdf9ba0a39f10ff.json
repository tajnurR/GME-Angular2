{"ast":null,"code":"/*\r\n* Copyright 2013 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport SimpleToken from './SimpleToken';\nvar BinaryShiftToken = /** @class */function (_super) {\n  __extends(BinaryShiftToken, _super);\n  function BinaryShiftToken(previous, binaryShiftStart, binaryShiftByteCount) {\n    var _this = _super.call(this, previous, 0, 0) || this;\n    _this.binaryShiftStart = binaryShiftStart;\n    _this.binaryShiftByteCount = binaryShiftByteCount;\n    return _this;\n  }\n  /**\r\n   * @Override\r\n   */\n  BinaryShiftToken.prototype.appendTo = function (bitArray, text) {\n    for (var i = 0; i < this.binaryShiftByteCount; i++) {\n      if (i === 0 || i === 31 && this.binaryShiftByteCount <= 62) {\n        // We need a header before the first character, and before\n        // character 31 when the total byte code is <= 62\n        bitArray.appendBits(31, 5); // BINARY_SHIFT\n        if (this.binaryShiftByteCount > 62) {\n          bitArray.appendBits(this.binaryShiftByteCount - 31, 16);\n        } else if (i === 0) {\n          // 1 <= binaryShiftByteCode <= 62\n          bitArray.appendBits(Math.min(this.binaryShiftByteCount, 31), 5);\n        } else {\n          // 32 <= binaryShiftCount <= 62 and i == 31\n          bitArray.appendBits(this.binaryShiftByteCount - 31, 5);\n        }\n      }\n      bitArray.appendBits(text[this.binaryShiftStart + i], 8);\n    }\n  };\n  BinaryShiftToken.prototype.addBinaryShift = function (start, byteCount) {\n    // int bitCount = (byteCount * 8) + (byteCount <= 31 ? 10 : byteCount <= 62 ? 20 : 21);\n    return new BinaryShiftToken(this, start, byteCount);\n  };\n  /**\r\n   * @Override\r\n   */\n  BinaryShiftToken.prototype.toString = function () {\n    return '<' + this.binaryShiftStart + '::' + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + '>';\n  };\n  return BinaryShiftToken;\n}(SimpleToken);\nexport default BinaryShiftToken;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}