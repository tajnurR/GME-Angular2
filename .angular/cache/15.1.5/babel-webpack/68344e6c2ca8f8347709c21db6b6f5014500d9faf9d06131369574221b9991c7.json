{"ast":null,"code":"/*\r\n * Copyright (C) 2010 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport BarcodeFormat from '../BarcodeFormat';\n// import UPCEANReader from './UPCEANReader';\nimport AbstractUPCEANReader from './AbstractUPCEANReader';\nimport Result from '../Result';\nimport ResultPoint from '../ResultPoint';\nimport ResultMetadataType from '../ResultMetadataType';\nimport NotFoundException from '../NotFoundException';\n/**\r\n * @see UPCEANExtension2Support\r\n */\nvar UPCEANExtension5Support = /** @class */function () {\n  function UPCEANExtension5Support() {\n    this.CHECK_DIGIT_ENCODINGS = [0x18, 0x14, 0x12, 0x11, 0x0C, 0x06, 0x03, 0x0A, 0x09, 0x05];\n    this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n    this.decodeRowStringBuffer = '';\n  }\n  UPCEANExtension5Support.prototype.decodeRow = function (rowNumber, row, extensionStartRange) {\n    var result = this.decodeRowStringBuffer;\n    var end = this.decodeMiddle(row, extensionStartRange, result);\n    var resultString = result.toString();\n    var extensionData = UPCEANExtension5Support.parseExtensionString(resultString);\n    var resultPoints = [new ResultPoint((extensionStartRange[0] + extensionStartRange[1]) / 2.0, rowNumber), new ResultPoint(end, rowNumber)];\n    var extensionResult = new Result(resultString, null, 0, resultPoints, BarcodeFormat.UPC_EAN_EXTENSION, new Date().getTime());\n    if (extensionData != null) {\n      extensionResult.putAllMetadata(extensionData);\n    }\n    return extensionResult;\n  };\n  UPCEANExtension5Support.prototype.decodeMiddle = function (row, startRange, resultString) {\n    var e_1, _a;\n    var counters = this.decodeMiddleCounters;\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var end = row.getSize();\n    var rowOffset = startRange[1];\n    var lgPatternFound = 0;\n    for (var x = 0; x < 5 && rowOffset < end; x++) {\n      var bestMatch = AbstractUPCEANReader.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader.L_AND_G_PATTERNS);\n      resultString += String.fromCharCode('0'.charCodeAt(0) + bestMatch % 10);\n      try {\n        for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n          rowOffset += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      if (bestMatch >= 10) {\n        lgPatternFound |= 1 << 4 - x;\n      }\n      if (x !== 4) {\n        // Read off separator if not last\n        rowOffset = row.getNextSet(rowOffset);\n        rowOffset = row.getNextUnset(rowOffset);\n      }\n    }\n    if (resultString.length !== 5) {\n      throw new NotFoundException();\n    }\n    var checkDigit = this.determineCheckDigit(lgPatternFound);\n    if (UPCEANExtension5Support.extensionChecksum(resultString.toString()) !== checkDigit) {\n      throw new NotFoundException();\n    }\n    return rowOffset;\n  };\n  UPCEANExtension5Support.extensionChecksum = function (s) {\n    var length = s.length;\n    var sum = 0;\n    for (var i = length - 2; i >= 0; i -= 2) {\n      sum += s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    sum *= 3;\n    for (var i = length - 1; i >= 0; i -= 2) {\n      sum += s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    sum *= 3;\n    return sum % 10;\n  };\n  UPCEANExtension5Support.prototype.determineCheckDigit = function (lgPatternFound) {\n    for (var d = 0; d < 10; d++) {\n      if (lgPatternFound === this.CHECK_DIGIT_ENCODINGS[d]) {\n        return d;\n      }\n    }\n    throw new NotFoundException();\n  };\n  UPCEANExtension5Support.parseExtensionString = function (raw) {\n    if (raw.length !== 5) {\n      return null;\n    }\n    var value = UPCEANExtension5Support.parseExtension5String(raw);\n    if (value == null) {\n      return null;\n    }\n    return new Map([[ResultMetadataType.SUGGESTED_PRICE, value]]);\n  };\n  UPCEANExtension5Support.parseExtension5String = function (raw) {\n    var currency;\n    switch (raw.charAt(0)) {\n      case '0':\n        currency = 'Â£';\n        break;\n      case '5':\n        currency = '$';\n        break;\n      case '9':\n        // Reference: http://www.jollytech.com\n        switch (raw) {\n          case '90000':\n            // No suggested retail price\n            return null;\n          case '99991':\n            // Complementary\n            return '0.00';\n          case '99990':\n            return 'Used';\n        }\n        // Otherwise... unknown currency?\n        currency = '';\n        break;\n      default:\n        currency = '';\n        break;\n    }\n    var rawAmount = parseInt(raw.substring(1));\n    var unitsString = (rawAmount / 100).toString();\n    var hundredths = rawAmount % 100;\n    var hundredthsString = hundredths < 10 ? '0' + hundredths : hundredths.toString(); // fixme\n    return currency + unitsString + '.' + hundredthsString;\n  };\n  return UPCEANExtension5Support;\n}();\nexport default UPCEANExtension5Support;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}