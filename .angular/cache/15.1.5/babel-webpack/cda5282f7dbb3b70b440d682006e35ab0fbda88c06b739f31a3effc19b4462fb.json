{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport NotFoundException from '../NotFoundException';\n/**\r\n * Implementations of this class can, given locations of finder patterns for a QR code in an\r\n * image, sample the right points in the image to reconstruct the QR code, accounting for\r\n * perspective distortion. It is abstracted since it is relatively expensive and should be allowed\r\n * to take advantage of platform-specific optimized implementations, like Sun's Java Advanced\r\n * Imaging library, but which may not be available in other environments such as J2ME, and vice\r\n * versa.\r\n *\r\n * The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}\r\n * with an instance of a class which implements this interface.\r\n *\r\n * @author Sean Owen\r\n */\nvar GridSampler = /** @class */function () {\n  function GridSampler() {}\n  /**\r\n   * <p>Checks a set of points that have been transformed to sample points on an image against\r\n   * the image's dimensions to see if the point are even within the image.</p>\r\n   *\r\n   * <p>This method will actually \"nudge\" the endpoints back onto the image if they are found to be\r\n   * barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder\r\n   * patterns in an image where the QR Code runs all the way to the image border.</p>\r\n   *\r\n   * <p>For efficiency, the method will check points from either end of the line until one is found\r\n   * to be within the image. Because the set of points are assumed to be linear, this is valid.</p>\r\n   *\r\n   * @param image image into which the points should map\r\n   * @param points actual points in x1,y1,...,xn,yn form\r\n   * @throws NotFoundException if an endpoint is lies outside the image boundaries\r\n   */\n  GridSampler.checkAndNudgePoints = function (image, points) {\n    var width = image.getWidth();\n    var height = image.getHeight();\n    // Check and nudge points from start until we see some that are OK:\n    var nudged = true;\n    for (var offset = 0; offset < points.length && nudged; offset += 2) {\n      var x = Math.floor(points[offset]);\n      var y = Math.floor(points[offset + 1]);\n      if (x < -1 || x > width || y < -1 || y > height) {\n        throw new NotFoundException();\n      }\n      nudged = false;\n      if (x === -1) {\n        points[offset] = 0.0;\n        nudged = true;\n      } else if (x === width) {\n        points[offset] = width - 1;\n        nudged = true;\n      }\n      if (y === -1) {\n        points[offset + 1] = 0.0;\n        nudged = true;\n      } else if (y === height) {\n        points[offset + 1] = height - 1;\n        nudged = true;\n      }\n    }\n    // Check and nudge points from end:\n    nudged = true;\n    for (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {\n      var x = Math.floor(points[offset]);\n      var y = Math.floor(points[offset + 1]);\n      if (x < -1 || x > width || y < -1 || y > height) {\n        throw new NotFoundException();\n      }\n      nudged = false;\n      if (x === -1) {\n        points[offset] = 0.0;\n        nudged = true;\n      } else if (x === width) {\n        points[offset] = width - 1;\n        nudged = true;\n      }\n      if (y === -1) {\n        points[offset + 1] = 0.0;\n        nudged = true;\n      } else if (y === height) {\n        points[offset + 1] = height - 1;\n        nudged = true;\n      }\n    }\n  };\n  return GridSampler;\n}();\nexport default GridSampler;","map":{"version":3,"names":["NotFoundException","GridSampler","checkAndNudgePoints","image","points","width","getWidth","height","getHeight","nudged","offset","length","x","Math","floor","y"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/common/GridSampler.js"],"sourcesContent":["/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport NotFoundException from '../NotFoundException';\r\n/**\r\n * Implementations of this class can, given locations of finder patterns for a QR code in an\r\n * image, sample the right points in the image to reconstruct the QR code, accounting for\r\n * perspective distortion. It is abstracted since it is relatively expensive and should be allowed\r\n * to take advantage of platform-specific optimized implementations, like Sun's Java Advanced\r\n * Imaging library, but which may not be available in other environments such as J2ME, and vice\r\n * versa.\r\n *\r\n * The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}\r\n * with an instance of a class which implements this interface.\r\n *\r\n * @author Sean Owen\r\n */\r\nvar GridSampler = /** @class */ (function () {\r\n    function GridSampler() {\r\n    }\r\n    /**\r\n     * <p>Checks a set of points that have been transformed to sample points on an image against\r\n     * the image's dimensions to see if the point are even within the image.</p>\r\n     *\r\n     * <p>This method will actually \"nudge\" the endpoints back onto the image if they are found to be\r\n     * barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder\r\n     * patterns in an image where the QR Code runs all the way to the image border.</p>\r\n     *\r\n     * <p>For efficiency, the method will check points from either end of the line until one is found\r\n     * to be within the image. Because the set of points are assumed to be linear, this is valid.</p>\r\n     *\r\n     * @param image image into which the points should map\r\n     * @param points actual points in x1,y1,...,xn,yn form\r\n     * @throws NotFoundException if an endpoint is lies outside the image boundaries\r\n     */\r\n    GridSampler.checkAndNudgePoints = function (image, points) {\r\n        var width = image.getWidth();\r\n        var height = image.getHeight();\r\n        // Check and nudge points from start until we see some that are OK:\r\n        var nudged = true;\r\n        for (var offset = 0; offset < points.length && nudged; offset += 2) {\r\n            var x = Math.floor(points[offset]);\r\n            var y = Math.floor(points[offset + 1]);\r\n            if (x < -1 || x > width || y < -1 || y > height) {\r\n                throw new NotFoundException();\r\n            }\r\n            nudged = false;\r\n            if (x === -1) {\r\n                points[offset] = 0.0;\r\n                nudged = true;\r\n            }\r\n            else if (x === width) {\r\n                points[offset] = width - 1;\r\n                nudged = true;\r\n            }\r\n            if (y === -1) {\r\n                points[offset + 1] = 0.0;\r\n                nudged = true;\r\n            }\r\n            else if (y === height) {\r\n                points[offset + 1] = height - 1;\r\n                nudged = true;\r\n            }\r\n        }\r\n        // Check and nudge points from end:\r\n        nudged = true;\r\n        for (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {\r\n            var x = Math.floor(points[offset]);\r\n            var y = Math.floor(points[offset + 1]);\r\n            if (x < -1 || x > width || y < -1 || y > height) {\r\n                throw new NotFoundException();\r\n            }\r\n            nudged = false;\r\n            if (x === -1) {\r\n                points[offset] = 0.0;\r\n                nudged = true;\r\n            }\r\n            else if (x === width) {\r\n                points[offset] = width - 1;\r\n                nudged = true;\r\n            }\r\n            if (y === -1) {\r\n                points[offset + 1] = 0.0;\r\n                nudged = true;\r\n            }\r\n            else if (y === height) {\r\n                points[offset + 1] = height - 1;\r\n                nudged = true;\r\n            }\r\n        }\r\n    };\r\n    return GridSampler;\r\n}());\r\nexport default GridSampler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}