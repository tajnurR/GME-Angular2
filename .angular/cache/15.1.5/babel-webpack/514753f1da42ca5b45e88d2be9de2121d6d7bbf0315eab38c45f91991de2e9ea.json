{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport GenericGFPoly from './GenericGFPoly';\nimport System from '../../util/System';\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\r\n *\r\n * @author Sean Owen\r\n * @author William Rucklidge\r\n */\nvar ReedSolomonEncoder = /** @class */function () {\n  /**\r\n   * A reed solomon error-correcting encoding constructor is created by\r\n   * passing as Galois Field with of size equal to the number of code\r\n   * words (symbols) in the alphabet (the number of values in each\r\n   * element of arrays that are encoded/decoded).\r\n   * @param field A galois field with a number of elements equal to the size\r\n   * of the alphabet of symbols to encode.\r\n   */\n  function ReedSolomonEncoder(field) {\n    this.field = field;\n    this.cachedGenerators = [];\n    this.cachedGenerators.push(new GenericGFPoly(field, Int32Array.from([1])));\n  }\n  ReedSolomonEncoder.prototype.buildGenerator = function (degree /*int*/) {\n    var cachedGenerators = this.cachedGenerators;\n    if (degree >= cachedGenerators.length) {\n      var lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n      var field = this.field;\n      for (var d = cachedGenerators.length; d <= degree; d++) {\n        var nextGenerator = lastGenerator.multiply(new GenericGFPoly(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n        cachedGenerators.push(nextGenerator);\n        lastGenerator = nextGenerator;\n      }\n    }\n    return cachedGenerators[degree];\n  };\n  /**\r\n   * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\r\n   * to detect and correct errors that may have been introduced when the resulting\r\n   * data is stored or transmitted.</p>\r\n   *\r\n   * @param toEncode array used for both and output. Caller initializes the array with\r\n   * the code words (symbols) to be encoded followed by empty elements allocated to make\r\n   * space for error-correction code words in the encoded output. The array contains\r\n   * the encdoded output when encode returns. Code words are encoded as numbers from\r\n   * 0 to n-1, where n is the number of possible code words (symbols), as determined\r\n   * by the size of the Galois Field passed in the constructor of this object.\r\n   * @param ecBytes the number of elements reserved in the array (first parameter)\r\n   * to store error-correction code words. Thus, the number of code words (symbols)\r\n   * to encode in the first parameter is thus toEncode.length - ecBytes.\r\n   * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\r\n   * be more or fewer than 256 symbols being encoded, as determined by the number of\r\n   * elements in the Galois Field passed as a constructor to this object.\r\n   * @throws IllegalArgumentException thrown in response to validation errros.\r\n   */\n  ReedSolomonEncoder.prototype.encode = function (toEncode, ecBytes /*int*/) {\n    if (ecBytes === 0) {\n      throw new IllegalArgumentException('No error correction bytes');\n    }\n    var dataBytes = toEncode.length - ecBytes;\n    if (dataBytes <= 0) {\n      throw new IllegalArgumentException('No data bytes provided');\n    }\n    var generator = this.buildGenerator(ecBytes);\n    var infoCoefficients = new Int32Array(dataBytes);\n    System.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n    var info = new GenericGFPoly(this.field, infoCoefficients);\n    info = info.multiplyByMonomial(ecBytes, 1);\n    var remainder = info.divide(generator)[1];\n    var coefficients = remainder.getCoefficients();\n    var numZeroCoefficients = ecBytes - coefficients.length;\n    for (var i = 0; i < numZeroCoefficients; i++) {\n      toEncode[dataBytes + i] = 0;\n    }\n    System.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n  };\n  return ReedSolomonEncoder;\n}();\nexport default ReedSolomonEncoder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}