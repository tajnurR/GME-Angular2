{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\nvar AbstractGenericGF = /** @class */function () {\n  function AbstractGenericGF() {}\n  /**\r\n   * @return 2 to the power of a in GF(size)\r\n   */\n  AbstractGenericGF.prototype.exp = function (a) {\n    return this.expTable[a];\n  };\n  /**\r\n   * @return base 2 log of a in GF(size)\r\n   */\n  AbstractGenericGF.prototype.log = function (a /*int*/) {\n    if (a === 0) {\n      throw new IllegalArgumentException();\n    }\n    return this.logTable[a];\n  };\n  /**\r\n   * Implements both addition and subtraction -- they are the same in GF(size).\r\n   *\r\n   * @return sum/difference of a and b\r\n   */\n  AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\n    return a ^ b;\n  };\n  return AbstractGenericGF;\n}();\nexport default AbstractGenericGF;","map":{"version":3,"names":["IllegalArgumentException","AbstractGenericGF","prototype","exp","a","expTable","log","logTable","addOrSubtract","b"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/common/reedsolomon/AbstractGenericGF.js"],"sourcesContent":["/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport IllegalArgumentException from '../../IllegalArgumentException';\r\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\r\nvar AbstractGenericGF = /** @class */ (function () {\r\n    function AbstractGenericGF() {\r\n    }\r\n    /**\r\n     * @return 2 to the power of a in GF(size)\r\n     */\r\n    AbstractGenericGF.prototype.exp = function (a) {\r\n        return this.expTable[a];\r\n    };\r\n    /**\r\n     * @return base 2 log of a in GF(size)\r\n     */\r\n    AbstractGenericGF.prototype.log = function (a /*int*/) {\r\n        if (a === 0) {\r\n            throw new IllegalArgumentException();\r\n        }\r\n        return this.logTable[a];\r\n    };\r\n    /**\r\n     * Implements both addition and subtraction -- they are the same in GF(size).\r\n     *\r\n     * @return sum/difference of a and b\r\n     */\r\n    AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\r\n        return a ^ b;\r\n    };\r\n    return AbstractGenericGF;\r\n}());\r\nexport default AbstractGenericGF;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,wBAAwB,MAAM,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiB,GAAG,CAC7B;EACA;AACJ;AACA;EACIA,iBAAiB,CAACC,SAAS,CAACC,GAAG,GAAG,UAAUC,CAAC,EAAE;IAC3C,OAAO,IAAI,CAACC,QAAQ,CAACD,CAAC,CAAC;EAC3B,CAAC;EACD;AACJ;AACA;EACIH,iBAAiB,CAACC,SAAS,CAACI,GAAG,GAAG,UAAUF,CAAC,CAAC,SAAS;IACnD,IAAIA,CAAC,KAAK,CAAC,EAAE;MACT,MAAM,IAAIJ,wBAAwB,EAAE;IACxC;IACA,OAAO,IAAI,CAACO,QAAQ,CAACH,CAAC,CAAC;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIH,iBAAiB,CAACO,aAAa,GAAG,UAAUJ,CAAC,CAAC,SAASK,CAAC,CAAC,SAAS;IAC9D,OAAOL,CAAC,GAAGK,CAAC;EAChB,CAAC;EACD,OAAOR,iBAAiB;AAC5B,CAAC,EAAG;AACJ,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}