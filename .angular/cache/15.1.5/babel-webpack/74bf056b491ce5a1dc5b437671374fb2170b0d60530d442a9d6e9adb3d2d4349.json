{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*namespace com.google.zxing.qrcode.encoder {*/\nimport BitArray from '../../common/BitArray';\nimport Integer from '../../util/Integer';\nimport QRCode from './QRCode';\nimport MaskUtil from './MaskUtil';\nimport WriterException from '../../WriterException';\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * @author satorux@google.com (Satoru Takabayashi) - creator\r\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\r\n */\nvar MatrixUtil = /** @class */function () {\n  function MatrixUtil() {\n    // do nothing\n  }\n  // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n  //\n  // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n  // with the ByteMatrix initialized all to zero.\n  MatrixUtil.clearMatrix = function (matrix) {\n    // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n    matrix.clear( /*(byte) */ /*-1*/255);\n  };\n  // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n  // success, store the result in \"matrix\" and return true.\n  MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\n    MatrixUtil.clearMatrix(matrix);\n    MatrixUtil.embedBasicPatterns(version, matrix);\n    // Type information appear with any version.\n    MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\n    // Version info appear if version >= 7.\n    MatrixUtil.maybeEmbedVersionInfo(version, matrix);\n    // Data should be embedded at end.\n    MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n  };\n  // Embed basic patterns. On success, modify the matrix and return true.\n  // The basic patterns are:\n  // - Position detection patterns\n  // - Timing patterns\n  // - Dark dot at the left bottom corner\n  // - Position adjustment patterns, if need be\n  MatrixUtil.embedBasicPatterns = function (version, matrix) {\n    // Let's get started with embedding big squares at corners.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\n    // Then, embed the dark dot at the left bottom corner.\n    MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\n    // Position adjustment patterns appear if version >= 2.\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\n    // Timing patterns should be embedded after position adj. patterns.\n    MatrixUtil.embedTimingPatterns(matrix);\n  };\n  // Embed type information. On success, modify the matrix.\n  MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern /*int*/, matrix) {\n    var typeInfoBits = new BitArray();\n    MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n    for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n      // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n      // \"typeInfoBits\".\n      var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\n      // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n      var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n      var x1 = coordinates[0];\n      var y1 = coordinates[1];\n      matrix.setBoolean(x1, y1, bit);\n      if (i < 8) {\n        // Right top corner.\n        var x2 = matrix.getWidth() - i - 1;\n        var y2 = 8;\n        matrix.setBoolean(x2, y2, bit);\n      } else {\n        // Left bottom corner.\n        var x2 = 8;\n        var y2 = matrix.getHeight() - 7 + (i - 8);\n        matrix.setBoolean(x2, y2, bit);\n      }\n    }\n  };\n  // Embed version information if need be. On success, modify the matrix and return true.\n  // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n  MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n    if (version.getVersionNumber() < 7) {\n      // Version info is necessary if version >= 7.\n      return; // Don't need version info.\n    }\n\n    var versionInfoBits = new BitArray();\n    MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n    var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n    for (var i = 0; i < 6; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        // Place bits in LSB (least significant bit) to MSB order.\n        var bit = versionInfoBits.get(bitIndex);\n        bitIndex--;\n        // Left bottom corner.\n        matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\n        // Right bottom corner.\n        matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n      }\n    }\n  };\n  // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n  // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n  // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n  MatrixUtil.embedDataBits = function (dataBits, maskPattern /*int*/, matrix) {\n    var bitIndex = 0;\n    var direction = -1;\n    // Start from the right bottom cell.\n    var x = matrix.getWidth() - 1;\n    var y = matrix.getHeight() - 1;\n    while (x > 0) {\n      // Skip the vertical timing pattern.\n      if (x === 6) {\n        x -= 1;\n      }\n      while (y >= 0 && y < matrix.getHeight()) {\n        for (var i = 0; i < 2; ++i) {\n          var xx = x - i;\n          // Skip the cell if it's not empty.\n          if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n            continue;\n          }\n          var bit = void 0;\n          if (bitIndex < dataBits.getSize()) {\n            bit = dataBits.get(bitIndex);\n            ++bitIndex;\n          } else {\n            // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n            // in 8.4.9 of JISX0510:2004 (p. 24).\n            bit = false;\n          }\n          // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n          if (maskPattern !== 255 && MaskUtil.getDataMaskBit(maskPattern, xx, y)) {\n            bit = !bit;\n          }\n          matrix.setBoolean(xx, y, bit);\n        }\n        y += direction;\n      }\n      direction = -direction; // Reverse the direction.\n      y += direction;\n      x -= 2; // Move to the left.\n    }\n    // All bits should be consumed.\n    if (bitIndex !== dataBits.getSize()) {\n      throw new WriterException('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n    }\n  };\n  // Return the position of the most significant bit set (one: to) in the \"value\". The most\n  // significant bit is position 32. If there is no bit set, return 0. Examples:\n  // - findMSBSet(0) => 0\n  // - findMSBSet(1) => 1\n  // - findMSBSet(255) => 8\n  MatrixUtil.findMSBSet = function (value /*int*/) {\n    return 32 - Integer.numberOfLeadingZeros(value);\n  };\n  // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n  // code is used for encoding type information and version information.\n  // Example: Calculation of version information of 7.\n  // f(x) is created from 7.\n  //   - 7 = 000111 in 6 bits\n  //   - f(x) = x^2 + x^1 + x^0\n  // g(x) is given by the standard (p. 67)\n  //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n  // Multiply f(x) by x^(18 - 6)\n  //   - f'(x) = f(x) * x^(18 - 6)\n  //   - f'(x) = x^14 + x^13 + x^12\n  // Calculate the remainder of f'(x) / g(x)\n  //         x^2\n  //         __________________________________________________\n  //   g(x) )x^14 + x^13 + x^12\n  //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n  //         --------------------------------------------------\n  //                              x^11 + x^10 + x^7 + x^4 + x^2\n  //\n  // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n  // Encode it in binary: 110010010100\n  // The return value is 0xc94 (1100 1001 0100)\n  //\n  // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n  // operations. We don't care if coefficients are positive or negative.\n  MatrixUtil.calculateBCHCode = function (value /*int*/, poly /*int*/) {\n    if (poly === 0) {\n      throw new IllegalArgumentException('0 polynomial');\n    }\n    // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n    // from 13 to make it 12.\n    var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n    value <<= msbSetInPoly - 1;\n    // Do the division business using exclusive-or operations.\n    while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n      value ^= poly << MatrixUtil.findMSBSet(value) - msbSetInPoly;\n    }\n    // Now the \"value\" is the remainder (i.e. the BCH code)\n    return value;\n  };\n  // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n  // Encode error correction level and mask pattern. See 8.9 of\n  // JISX0510:2004 (p.45) for details.\n  MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern /*int*/, bits) {\n    if (!QRCode.isValidMaskPattern(maskPattern)) {\n      throw new WriterException('Invalid mask pattern');\n    }\n    var typeInfo = ecLevel.getBits() << 3 | maskPattern;\n    bits.appendBits(typeInfo, 5);\n    var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n    bits.appendBits(bchCode, 10);\n    var maskBits = new BitArray();\n    maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n    bits.xor(maskBits);\n    if (bits.getSize() !== 15) {\n      // Just in case.\n      throw new WriterException('should not happen but we got: ' + bits.getSize());\n    }\n  };\n  // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n  // See 8.10 of JISX0510:2004 (p.45) for details.\n  MatrixUtil.makeVersionInfoBits = function (version, bits) {\n    bits.appendBits(version.getVersionNumber(), 6);\n    var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n    bits.appendBits(bchCode, 12);\n    if (bits.getSize() !== 18) {\n      // Just in case.\n      throw new WriterException('should not happen but we got: ' + bits.getSize());\n    }\n  };\n  // Check if \"value\" is empty.\n  MatrixUtil.isEmpty = function (value /*int*/) {\n    return value === 255; // -1\n  };\n\n  MatrixUtil.embedTimingPatterns = function (matrix) {\n    // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n    // separation patterns (1: size). Thus, 8 = 7 + 1.\n    for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n      var bit = (i + 1) % 2;\n      // Horizontal line.\n      if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n        matrix.setNumber(i, 6, bit);\n      }\n      // Vertical line.\n      if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n        matrix.setNumber(6, i, bit);\n      }\n    }\n  };\n  // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n  MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n    if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n      throw new WriterException();\n    }\n    matrix.setNumber(8, matrix.getHeight() - 8, 1);\n  };\n  MatrixUtil.embedHorizontalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var x = 0; x < 8; ++x) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n        throw new WriterException();\n      }\n      matrix.setNumber(xStart + x, yStart, 0);\n    }\n  };\n  MatrixUtil.embedVerticalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 7; ++y) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n        throw new WriterException();\n      }\n      matrix.setNumber(xStart, yStart + y, 0);\n    }\n  };\n  MatrixUtil.embedPositionAdjustmentPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 5; ++y) {\n      var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n      for (var x = 0; x < 5; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n  MatrixUtil.embedPositionDetectionPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 7; ++y) {\n      var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n      for (var x = 0; x < 7; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n  // Embed position detection patterns and surrounding vertical/horizontal separators.\n  MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n    // Embed three big squares at corners.\n    var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\n    // Left top corner.\n    MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\n    // Right top corner.\n    MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\n    // Embed horizontal separation patterns around the squares.\n    var hspWidth = 8;\n    // Left top corner.\n    MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\n    // Right top corner.\n    MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\n    // Embed vertical separation patterns around the squares.\n    var vspSize = 7;\n    // Left top corner.\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\n    // Right top corner.\n    MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n  };\n  // Embed position adjustment patterns if need be.\n  MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n    if (version.getVersionNumber() < 2) {\n      // The patterns appear if version >= 2\n      return;\n    }\n    var index = version.getVersionNumber() - 1;\n    var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n    for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n      var y = coordinates[i];\n      if (y >= 0) {\n        for (var j = 0; j !== length_1; j++) {\n          var x = coordinates[j];\n          if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n            // If the cell is unset, we embed the position adjustment pattern here.\n            // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n            // left top corner.\n            MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n          }\n        }\n      }\n    }\n  };\n  MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1, 1, 1])]);\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1])]);\n  // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([Int32Array.from([-1, -1, -1, -1, -1, -1, -1]), Int32Array.from([6, 18, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, -1, -1, -1, -1, -1]), Int32Array.from([6, 26, -1, -1, -1, -1, -1]), Int32Array.from([6, 30, -1, -1, -1, -1, -1]), Int32Array.from([6, 34, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, 38, -1, -1, -1, -1]), Int32Array.from([6, 24, 42, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, -1, -1, -1, -1]), Int32Array.from([6, 28, 50, -1, -1, -1, -1]), Int32Array.from([6, 30, 54, -1, -1, -1, -1]), Int32Array.from([6, 32, 58, -1, -1, -1, -1]), Int32Array.from([6, 34, 62, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, 66, -1, -1, -1]), Int32Array.from([6, 26, 48, 70, -1, -1, -1]), Int32Array.from([6, 26, 50, 74, -1, -1, -1]), Int32Array.from([6, 30, 54, 78, -1, -1, -1]), Int32Array.from([6, 30, 56, 82, -1, -1, -1]), Int32Array.from([6, 30, 58, 86, -1, -1, -1]), Int32Array.from([6, 34, 62, 90, -1, -1, -1]), Int32Array.from([6, 28, 50, 72, 94, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, -1, -1]), Int32Array.from([6, 30, 54, 78, 102, -1, -1]), Int32Array.from([6, 28, 54, 80, 106, -1, -1]), Int32Array.from([6, 32, 58, 84, 110, -1, -1]), Int32Array.from([6, 30, 58, 86, 114, -1, -1]), Int32Array.from([6, 34, 62, 90, 118, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, 122, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, -1]), Int32Array.from([6, 26, 52, 78, 104, 130, -1]), Int32Array.from([6, 30, 56, 82, 108, 134, -1]), Int32Array.from([6, 34, 60, 86, 112, 138, -1]), Int32Array.from([6, 30, 58, 86, 114, 142, -1]), Int32Array.from([6, 34, 62, 90, 118, 146, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, 150]), Int32Array.from([6, 24, 50, 76, 102, 128, 154]), Int32Array.from([6, 28, 54, 80, 106, 132, 158]), Int32Array.from([6, 32, 58, 84, 110, 136, 162]), Int32Array.from([6, 26, 54, 82, 110, 138, 166]), Int32Array.from([6, 30, 58, 86, 114, 142, 170])]);\n  // Type info cells at the left top corner.\n  MatrixUtil.TYPE_INFO_COORDINATES = Array.from([Int32Array.from([8, 0]), Int32Array.from([8, 1]), Int32Array.from([8, 2]), Int32Array.from([8, 3]), Int32Array.from([8, 4]), Int32Array.from([8, 5]), Int32Array.from([8, 7]), Int32Array.from([8, 8]), Int32Array.from([7, 8]), Int32Array.from([5, 8]), Int32Array.from([4, 8]), Int32Array.from([3, 8]), Int32Array.from([2, 8]), Int32Array.from([1, 8]), Int32Array.from([0, 8])]);\n  // From Appendix D in JISX0510:2004 (p. 67)\n  MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n  // From Appendix C in JISX0510:2004 (p.65).\n  MatrixUtil.TYPE_INFO_POLY = 0x537;\n  MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n  return MatrixUtil;\n}();\nexport default MatrixUtil;","map":{"version":3,"names":["BitArray","Integer","QRCode","MaskUtil","WriterException","IllegalArgumentException","MatrixUtil","clearMatrix","matrix","clear","buildMatrix","dataBits","ecLevel","version","maskPattern","embedBasicPatterns","embedTypeInfo","maybeEmbedVersionInfo","embedDataBits","embedPositionDetectionPatternsAndSeparators","embedDarkDotAtLeftBottomCorner","maybeEmbedPositionAdjustmentPatterns","embedTimingPatterns","typeInfoBits","makeTypeInfoBits","i","size","getSize","bit","get","coordinates","TYPE_INFO_COORDINATES","x1","y1","setBoolean","x2","getWidth","y2","getHeight","getVersionNumber","versionInfoBits","makeVersionInfoBits","bitIndex","j","direction","x","y","xx","isEmpty","getDataMaskBit","findMSBSet","value","numberOfLeadingZeros","calculateBCHCode","poly","msbSetInPoly","bits","isValidMaskPattern","typeInfo","getBits","appendBits","bchCode","TYPE_INFO_POLY","maskBits","TYPE_INFO_MASK_PATTERN","xor","VERSION_INFO_POLY","setNumber","embedHorizontalSeparationPattern","xStart","yStart","embedVerticalSeparationPattern","embedPositionAdjustmentPattern","patternY","POSITION_ADJUSTMENT_PATTERN","embedPositionDetectionPattern","POSITION_DETECTION_PATTERN","pdpWidth","length","hspWidth","vspSize","index","POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE","length_1","Array","from","Int32Array"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/qrcode/encoder/MatrixUtil.js"],"sourcesContent":["/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\nimport BitArray from '../../common/BitArray';\r\nimport Integer from '../../util/Integer';\r\nimport QRCode from './QRCode';\r\nimport MaskUtil from './MaskUtil';\r\nimport WriterException from '../../WriterException';\r\nimport IllegalArgumentException from '../../IllegalArgumentException';\r\n/**\r\n * @author satorux@google.com (Satoru Takabayashi) - creator\r\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\r\n */\r\nvar MatrixUtil = /** @class */ (function () {\r\n    function MatrixUtil() {\r\n        // do nothing\r\n    }\r\n    // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\r\n    //\r\n    // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\r\n    // with the ByteMatrix initialized all to zero.\r\n    MatrixUtil.clearMatrix = function (matrix) {\r\n        // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\r\n        matrix.clear(/*(byte) */ /*-1*/ 255);\r\n    };\r\n    // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\r\n    // success, store the result in \"matrix\" and return true.\r\n    MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\r\n        MatrixUtil.clearMatrix(matrix);\r\n        MatrixUtil.embedBasicPatterns(version, matrix);\r\n        // Type information appear with any version.\r\n        MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\r\n        // Version info appear if version >= 7.\r\n        MatrixUtil.maybeEmbedVersionInfo(version, matrix);\r\n        // Data should be embedded at end.\r\n        MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\r\n    };\r\n    // Embed basic patterns. On success, modify the matrix and return true.\r\n    // The basic patterns are:\r\n    // - Position detection patterns\r\n    // - Timing patterns\r\n    // - Dark dot at the left bottom corner\r\n    // - Position adjustment patterns, if need be\r\n    MatrixUtil.embedBasicPatterns = function (version, matrix) {\r\n        // Let's get started with embedding big squares at corners.\r\n        MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\r\n        // Then, embed the dark dot at the left bottom corner.\r\n        MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\r\n        // Position adjustment patterns appear if version >= 2.\r\n        MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\r\n        // Timing patterns should be embedded after position adj. patterns.\r\n        MatrixUtil.embedTimingPatterns(matrix);\r\n    };\r\n    // Embed type information. On success, modify the matrix.\r\n    MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern /*int*/, matrix) {\r\n        var typeInfoBits = new BitArray();\r\n        MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\r\n        for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\r\n            // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\r\n            // \"typeInfoBits\".\r\n            var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\r\n            // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\r\n            var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\r\n            var x1 = coordinates[0];\r\n            var y1 = coordinates[1];\r\n            matrix.setBoolean(x1, y1, bit);\r\n            if (i < 8) {\r\n                // Right top corner.\r\n                var x2 = matrix.getWidth() - i - 1;\r\n                var y2 = 8;\r\n                matrix.setBoolean(x2, y2, bit);\r\n            }\r\n            else {\r\n                // Left bottom corner.\r\n                var x2 = 8;\r\n                var y2 = matrix.getHeight() - 7 + (i - 8);\r\n                matrix.setBoolean(x2, y2, bit);\r\n            }\r\n        }\r\n    };\r\n    // Embed version information if need be. On success, modify the matrix and return true.\r\n    // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\r\n    MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\r\n        if (version.getVersionNumber() < 7) { // Version info is necessary if version >= 7.\r\n            return; // Don't need version info.\r\n        }\r\n        var versionInfoBits = new BitArray();\r\n        MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\r\n        var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\r\n        for (var i = 0; i < 6; ++i) {\r\n            for (var j = 0; j < 3; ++j) {\r\n                // Place bits in LSB (least significant bit) to MSB order.\r\n                var bit = versionInfoBits.get(bitIndex);\r\n                bitIndex--;\r\n                // Left bottom corner.\r\n                matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\r\n                // Right bottom corner.\r\n                matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\r\n            }\r\n        }\r\n    };\r\n    // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\r\n    // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\r\n    // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\r\n    MatrixUtil.embedDataBits = function (dataBits, maskPattern /*int*/, matrix) {\r\n        var bitIndex = 0;\r\n        var direction = -1;\r\n        // Start from the right bottom cell.\r\n        var x = matrix.getWidth() - 1;\r\n        var y = matrix.getHeight() - 1;\r\n        while (x > 0) {\r\n            // Skip the vertical timing pattern.\r\n            if (x === 6) {\r\n                x -= 1;\r\n            }\r\n            while (y >= 0 && y < matrix.getHeight()) {\r\n                for (var i = 0; i < 2; ++i) {\r\n                    var xx = x - i;\r\n                    // Skip the cell if it's not empty.\r\n                    if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\r\n                        continue;\r\n                    }\r\n                    var bit = void 0;\r\n                    if (bitIndex < dataBits.getSize()) {\r\n                        bit = dataBits.get(bitIndex);\r\n                        ++bitIndex;\r\n                    }\r\n                    else {\r\n                        // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\r\n                        // in 8.4.9 of JISX0510:2004 (p. 24).\r\n                        bit = false;\r\n                    }\r\n                    // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\r\n                    if (maskPattern !== 255 && MaskUtil.getDataMaskBit(maskPattern, xx, y)) {\r\n                        bit = !bit;\r\n                    }\r\n                    matrix.setBoolean(xx, y, bit);\r\n                }\r\n                y += direction;\r\n            }\r\n            direction = -direction; // Reverse the direction.\r\n            y += direction;\r\n            x -= 2; // Move to the left.\r\n        }\r\n        // All bits should be consumed.\r\n        if (bitIndex !== dataBits.getSize()) {\r\n            throw new WriterException('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\r\n        }\r\n    };\r\n    // Return the position of the most significant bit set (one: to) in the \"value\". The most\r\n    // significant bit is position 32. If there is no bit set, return 0. Examples:\r\n    // - findMSBSet(0) => 0\r\n    // - findMSBSet(1) => 1\r\n    // - findMSBSet(255) => 8\r\n    MatrixUtil.findMSBSet = function (value /*int*/) {\r\n        return 32 - Integer.numberOfLeadingZeros(value);\r\n    };\r\n    // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\r\n    // code is used for encoding type information and version information.\r\n    // Example: Calculation of version information of 7.\r\n    // f(x) is created from 7.\r\n    //   - 7 = 000111 in 6 bits\r\n    //   - f(x) = x^2 + x^1 + x^0\r\n    // g(x) is given by the standard (p. 67)\r\n    //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\r\n    // Multiply f(x) by x^(18 - 6)\r\n    //   - f'(x) = f(x) * x^(18 - 6)\r\n    //   - f'(x) = x^14 + x^13 + x^12\r\n    // Calculate the remainder of f'(x) / g(x)\r\n    //         x^2\r\n    //         __________________________________________________\r\n    //   g(x) )x^14 + x^13 + x^12\r\n    //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\r\n    //         --------------------------------------------------\r\n    //                              x^11 + x^10 + x^7 + x^4 + x^2\r\n    //\r\n    // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\r\n    // Encode it in binary: 110010010100\r\n    // The return value is 0xc94 (1100 1001 0100)\r\n    //\r\n    // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\r\n    // operations. We don't care if coefficients are positive or negative.\r\n    MatrixUtil.calculateBCHCode = function (value /*int*/, poly /*int*/) {\r\n        if (poly === 0) {\r\n            throw new IllegalArgumentException('0 polynomial');\r\n        }\r\n        // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\r\n        // from 13 to make it 12.\r\n        var msbSetInPoly = MatrixUtil.findMSBSet(poly);\r\n        value <<= msbSetInPoly - 1;\r\n        // Do the division business using exclusive-or operations.\r\n        while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\r\n            value ^= poly << (MatrixUtil.findMSBSet(value) - msbSetInPoly);\r\n        }\r\n        // Now the \"value\" is the remainder (i.e. the BCH code)\r\n        return value;\r\n    };\r\n    // Make bit vector of type information. On success, store the result in \"bits\" and return true.\r\n    // Encode error correction level and mask pattern. See 8.9 of\r\n    // JISX0510:2004 (p.45) for details.\r\n    MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern /*int*/, bits) {\r\n        if (!QRCode.isValidMaskPattern(maskPattern)) {\r\n            throw new WriterException('Invalid mask pattern');\r\n        }\r\n        var typeInfo = (ecLevel.getBits() << 3) | maskPattern;\r\n        bits.appendBits(typeInfo, 5);\r\n        var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\r\n        bits.appendBits(bchCode, 10);\r\n        var maskBits = new BitArray();\r\n        maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\r\n        bits.xor(maskBits);\r\n        if (bits.getSize() !== 15) { // Just in case.\r\n            throw new WriterException('should not happen but we got: ' + bits.getSize());\r\n        }\r\n    };\r\n    // Make bit vector of version information. On success, store the result in \"bits\" and return true.\r\n    // See 8.10 of JISX0510:2004 (p.45) for details.\r\n    MatrixUtil.makeVersionInfoBits = function (version, bits) {\r\n        bits.appendBits(version.getVersionNumber(), 6);\r\n        var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\r\n        bits.appendBits(bchCode, 12);\r\n        if (bits.getSize() !== 18) { // Just in case.\r\n            throw new WriterException('should not happen but we got: ' + bits.getSize());\r\n        }\r\n    };\r\n    // Check if \"value\" is empty.\r\n    MatrixUtil.isEmpty = function (value /*int*/) {\r\n        return value === 255; // -1\r\n    };\r\n    MatrixUtil.embedTimingPatterns = function (matrix) {\r\n        // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\r\n        // separation patterns (1: size). Thus, 8 = 7 + 1.\r\n        for (var i = 8; i < matrix.getWidth() - 8; ++i) {\r\n            var bit = (i + 1) % 2;\r\n            // Horizontal line.\r\n            if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\r\n                matrix.setNumber(i, 6, bit);\r\n            }\r\n            // Vertical line.\r\n            if (MatrixUtil.isEmpty(matrix.get(6, i))) {\r\n                matrix.setNumber(6, i, bit);\r\n            }\r\n        }\r\n    };\r\n    // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\r\n    MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\r\n        if (matrix.get(8, matrix.getHeight() - 8) === 0) {\r\n            throw new WriterException();\r\n        }\r\n        matrix.setNumber(8, matrix.getHeight() - 8, 1);\r\n    };\r\n    MatrixUtil.embedHorizontalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\r\n        for (var x = 0; x < 8; ++x) {\r\n            if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\r\n                throw new WriterException();\r\n            }\r\n            matrix.setNumber(xStart + x, yStart, 0);\r\n        }\r\n    };\r\n    MatrixUtil.embedVerticalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\r\n        for (var y = 0; y < 7; ++y) {\r\n            if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\r\n                throw new WriterException();\r\n            }\r\n            matrix.setNumber(xStart, yStart + y, 0);\r\n        }\r\n    };\r\n    MatrixUtil.embedPositionAdjustmentPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\r\n        for (var y = 0; y < 5; ++y) {\r\n            var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\r\n            for (var x = 0; x < 5; ++x) {\r\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\r\n            }\r\n        }\r\n    };\r\n    MatrixUtil.embedPositionDetectionPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\r\n        for (var y = 0; y < 7; ++y) {\r\n            var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\r\n            for (var x = 0; x < 7; ++x) {\r\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\r\n            }\r\n        }\r\n    };\r\n    // Embed position detection patterns and surrounding vertical/horizontal separators.\r\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\r\n        // Embed three big squares at corners.\r\n        var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\r\n        // Left top corner.\r\n        MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\r\n        // Embed horizontal separation patterns around the squares.\r\n        var hspWidth = 8;\r\n        // Left top corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\r\n        // Embed vertical separation patterns around the squares.\r\n        var vspSize = 7;\r\n        // Left top corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\r\n    };\r\n    // Embed position adjustment patterns if need be.\r\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\r\n        if (version.getVersionNumber() < 2) { // The patterns appear if version >= 2\r\n            return;\r\n        }\r\n        var index = version.getVersionNumber() - 1;\r\n        var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\r\n        for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\r\n            var y = coordinates[i];\r\n            if (y >= 0) {\r\n                for (var j = 0; j !== length_1; j++) {\r\n                    var x = coordinates[j];\r\n                    if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\r\n                        // If the cell is unset, we embed the position adjustment pattern here.\r\n                        // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\r\n                        // left top corner.\r\n                        MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([\r\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\r\n    ]);\r\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([\r\n        Int32Array.from([1, 1, 1, 1, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 1, 1, 1, 1]),\r\n    ]);\r\n    // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\r\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([\r\n        Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 18, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 22, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 26, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 30, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 34, -1, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 22, 38, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 24, 42, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 26, 46, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 28, 50, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 30, 54, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 32, 58, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 34, 62, -1, -1, -1, -1]),\r\n        Int32Array.from([6, 26, 46, 66, -1, -1, -1]),\r\n        Int32Array.from([6, 26, 48, 70, -1, -1, -1]),\r\n        Int32Array.from([6, 26, 50, 74, -1, -1, -1]),\r\n        Int32Array.from([6, 30, 54, 78, -1, -1, -1]),\r\n        Int32Array.from([6, 30, 56, 82, -1, -1, -1]),\r\n        Int32Array.from([6, 30, 58, 86, -1, -1, -1]),\r\n        Int32Array.from([6, 34, 62, 90, -1, -1, -1]),\r\n        Int32Array.from([6, 28, 50, 72, 94, -1, -1]),\r\n        Int32Array.from([6, 26, 50, 74, 98, -1, -1]),\r\n        Int32Array.from([6, 30, 54, 78, 102, -1, -1]),\r\n        Int32Array.from([6, 28, 54, 80, 106, -1, -1]),\r\n        Int32Array.from([6, 32, 58, 84, 110, -1, -1]),\r\n        Int32Array.from([6, 30, 58, 86, 114, -1, -1]),\r\n        Int32Array.from([6, 34, 62, 90, 118, -1, -1]),\r\n        Int32Array.from([6, 26, 50, 74, 98, 122, -1]),\r\n        Int32Array.from([6, 30, 54, 78, 102, 126, -1]),\r\n        Int32Array.from([6, 26, 52, 78, 104, 130, -1]),\r\n        Int32Array.from([6, 30, 56, 82, 108, 134, -1]),\r\n        Int32Array.from([6, 34, 60, 86, 112, 138, -1]),\r\n        Int32Array.from([6, 30, 58, 86, 114, 142, -1]),\r\n        Int32Array.from([6, 34, 62, 90, 118, 146, -1]),\r\n        Int32Array.from([6, 30, 54, 78, 102, 126, 150]),\r\n        Int32Array.from([6, 24, 50, 76, 102, 128, 154]),\r\n        Int32Array.from([6, 28, 54, 80, 106, 132, 158]),\r\n        Int32Array.from([6, 32, 58, 84, 110, 136, 162]),\r\n        Int32Array.from([6, 26, 54, 82, 110, 138, 166]),\r\n        Int32Array.from([6, 30, 58, 86, 114, 142, 170]),\r\n    ]);\r\n    // Type info cells at the left top corner.\r\n    MatrixUtil.TYPE_INFO_COORDINATES = Array.from([\r\n        Int32Array.from([8, 0]),\r\n        Int32Array.from([8, 1]),\r\n        Int32Array.from([8, 2]),\r\n        Int32Array.from([8, 3]),\r\n        Int32Array.from([8, 4]),\r\n        Int32Array.from([8, 5]),\r\n        Int32Array.from([8, 7]),\r\n        Int32Array.from([8, 8]),\r\n        Int32Array.from([7, 8]),\r\n        Int32Array.from([5, 8]),\r\n        Int32Array.from([4, 8]),\r\n        Int32Array.from([3, 8]),\r\n        Int32Array.from([2, 8]),\r\n        Int32Array.from([1, 8]),\r\n        Int32Array.from([0, 8]),\r\n    ]);\r\n    // From Appendix D in JISX0510:2004 (p. 67)\r\n    MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\r\n    // From Appendix C in JISX0510:2004 (p.65).\r\n    MatrixUtil.TYPE_INFO_POLY = 0x537;\r\n    MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\r\n    return MatrixUtil;\r\n}());\r\nexport default MatrixUtil;\r\n"],"mappings":"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CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAC9CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}