{"ast":null,"code":"/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*namespace com.google.zxing {*/\n/**\r\n * These are a set of hints that you may pass to Writers to specify their behavior.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\nvar EncodeHintType;\n(function (EncodeHintType) {\n  /**\r\n   * Specifies what degree of error correction to use, for example in QR Codes.\r\n   * Type depends on the encoder. For example for QR codes it's type\r\n   * {@link com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ErrorCorrectionLevel}.\r\n   * For Aztec it is of type {@link Integer}, representing the minimal percentage of error correction words.\r\n   * For PDF417 it is of type {@link Integer}, valid values being 0 to 8.\r\n   * In all cases, it can also be a {@link String} representation of the desired value as well.\r\n   * Note: an Aztec symbol should have a minimum of 25% EC words.\r\n   */\n  EncodeHintType[EncodeHintType[\"ERROR_CORRECTION\"] = 0] = \"ERROR_CORRECTION\";\n  /**\r\n   * Specifies what character encoding to use where applicable (type {@link String})\r\n   */\n  EncodeHintType[EncodeHintType[\"CHARACTER_SET\"] = 1] = \"CHARACTER_SET\";\n  /**\r\n   * Specifies the matrix shape for Data Matrix (type {@link com.google.zxing.datamatrix.encoder.SymbolShapeHint})\r\n   */\n  EncodeHintType[EncodeHintType[\"DATA_MATRIX_SHAPE\"] = 2] = \"DATA_MATRIX_SHAPE\";\n  /**\r\n   * Specifies a minimum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n   *\r\n   * @deprecated use width/height params in\r\n   * {@link com.google.zxing.datamatrix.DataMatrixWriter#encode(String, BarcodeFormat, int, int)}\r\n   */\n  /*@Deprecated*/\n  EncodeHintType[EncodeHintType[\"MIN_SIZE\"] = 3] = \"MIN_SIZE\";\n  /**\r\n   * Specifies a maximum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n   *\r\n   * @deprecated without replacement\r\n   */\n  /*@Deprecated*/\n  EncodeHintType[EncodeHintType[\"MAX_SIZE\"] = 4] = \"MAX_SIZE\";\n  /**\r\n   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary\r\n   * by format; for example it controls margin before and after the barcode horizontally for\r\n   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value).\r\n   */\n  EncodeHintType[EncodeHintType[\"MARGIN\"] = 5] = \"MARGIN\";\n  /**\r\n   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or \"true\" or \"false\"\r\n   * {@link String} value).\r\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_COMPACT\"] = 6] = \"PDF417_COMPACT\";\n  /**\r\n   * Specifies what compaction mode to use for PDF417 (type\r\n   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its\r\n   * enum values).\r\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_COMPACTION\"] = 7] = \"PDF417_COMPACTION\";\n  /**\r\n   * Specifies the minimum and maximum number of rows and columns for PDF417 (type\r\n   * {@link com.google.zxing.pdf417.encoder.Dimensions Dimensions}).\r\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_DIMENSIONS\"] = 8] = \"PDF417_DIMENSIONS\";\n  /**\r\n   * Specifies the required number of layers for an Aztec code.\r\n   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code.\r\n   * 0 indicates to use the minimum number of layers (the default).\r\n   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code.\r\n   * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n   */\n  EncodeHintType[EncodeHintType[\"AZTEC_LAYERS\"] = 9] = \"AZTEC_LAYERS\";\n  /**\r\n   * Specifies the exact version of QR code to be encoded.\r\n   * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n   */\n  EncodeHintType[EncodeHintType[\"QR_VERSION\"] = 10] = \"QR_VERSION\";\n})(EncodeHintType || (EncodeHintType = {}));\nexport default EncodeHintType;","map":{"version":3,"names":["EncodeHintType"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/EncodeHintType.js"],"sourcesContent":["/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*namespace com.google.zxing {*/\r\n/**\r\n * These are a set of hints that you may pass to Writers to specify their behavior.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nvar EncodeHintType;\r\n(function (EncodeHintType) {\r\n    /**\r\n     * Specifies what degree of error correction to use, for example in QR Codes.\r\n     * Type depends on the encoder. For example for QR codes it's type\r\n     * {@link com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ErrorCorrectionLevel}.\r\n     * For Aztec it is of type {@link Integer}, representing the minimal percentage of error correction words.\r\n     * For PDF417 it is of type {@link Integer}, valid values being 0 to 8.\r\n     * In all cases, it can also be a {@link String} representation of the desired value as well.\r\n     * Note: an Aztec symbol should have a minimum of 25% EC words.\r\n     */\r\n    EncodeHintType[EncodeHintType[\"ERROR_CORRECTION\"] = 0] = \"ERROR_CORRECTION\";\r\n    /**\r\n     * Specifies what character encoding to use where applicable (type {@link String})\r\n     */\r\n    EncodeHintType[EncodeHintType[\"CHARACTER_SET\"] = 1] = \"CHARACTER_SET\";\r\n    /**\r\n     * Specifies the matrix shape for Data Matrix (type {@link com.google.zxing.datamatrix.encoder.SymbolShapeHint})\r\n     */\r\n    EncodeHintType[EncodeHintType[\"DATA_MATRIX_SHAPE\"] = 2] = \"DATA_MATRIX_SHAPE\";\r\n    /**\r\n     * Specifies a minimum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n     *\r\n     * @deprecated use width/height params in\r\n     * {@link com.google.zxing.datamatrix.DataMatrixWriter#encode(String, BarcodeFormat, int, int)}\r\n     */\r\n    /*@Deprecated*/\r\n    EncodeHintType[EncodeHintType[\"MIN_SIZE\"] = 3] = \"MIN_SIZE\";\r\n    /**\r\n     * Specifies a maximum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n     *\r\n     * @deprecated without replacement\r\n     */\r\n    /*@Deprecated*/\r\n    EncodeHintType[EncodeHintType[\"MAX_SIZE\"] = 4] = \"MAX_SIZE\";\r\n    /**\r\n     * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary\r\n     * by format; for example it controls margin before and after the barcode horizontally for\r\n     * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"MARGIN\"] = 5] = \"MARGIN\";\r\n    /**\r\n     * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or \"true\" or \"false\"\r\n     * {@link String} value).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"PDF417_COMPACT\"] = 6] = \"PDF417_COMPACT\";\r\n    /**\r\n     * Specifies what compaction mode to use for PDF417 (type\r\n     * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its\r\n     * enum values).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"PDF417_COMPACTION\"] = 7] = \"PDF417_COMPACTION\";\r\n    /**\r\n     * Specifies the minimum and maximum number of rows and columns for PDF417 (type\r\n     * {@link com.google.zxing.pdf417.encoder.Dimensions Dimensions}).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"PDF417_DIMENSIONS\"] = 8] = \"PDF417_DIMENSIONS\";\r\n    /**\r\n     * Specifies the required number of layers for an Aztec code.\r\n     * A negative number (-1, -2, -3, -4) specifies a compact Aztec code.\r\n     * 0 indicates to use the minimum number of layers (the default).\r\n     * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code.\r\n     * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"AZTEC_LAYERS\"] = 9] = \"AZTEC_LAYERS\";\r\n    /**\r\n     * Specifies the exact version of QR code to be encoded.\r\n     * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    EncodeHintType[EncodeHintType[\"QR_VERSION\"] = 10] = \"QR_VERSION\";\r\n})(EncodeHintType || (EncodeHintType = {}));\r\nexport default EncodeHintType;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB;EAC3E;AACJ;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;EACrE;AACJ;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB;EAC7E;AACJ;AACA;AACA;AACA;AACA;EACI;EACAA,cAAc,CAACA,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EAC3D;AACJ;AACA;AACA;AACA;EACI;EACAA,cAAc,CAACA,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EAC3D;AACJ;AACA;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EACvD;AACJ;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB;EACvE;AACJ;AACA;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB;EAC7E;AACJ;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB;EAC7E;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EACnE;AACJ;AACA;AACA;EACIA,cAAc,CAACA,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;AACpE,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,eAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}