{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*namespace com.google.zxing.common {*/\nimport IllegalArgumentException from '../IllegalArgumentException';\n/**\r\n * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\r\n * number of bits read is not often a multiple of 8.</p>\r\n *\r\n * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\r\n * it passed in, in which case all bets are off.</p>\r\n *\r\n * @author Sean Owen\r\n */\nvar BitSource = /** @class */function () {\n  /**\r\n   * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\r\n   * Bits are read within a byte from most-significant to least-significant bit.\r\n   */\n  function BitSource(bytes) {\n    this.bytes = bytes;\n    this.byteOffset = 0;\n    this.bitOffset = 0;\n  }\n  /**\r\n   * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\r\n   */\n  BitSource.prototype.getBitOffset = function () {\n    return this.bitOffset;\n  };\n  /**\r\n   * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\r\n   */\n  BitSource.prototype.getByteOffset = function () {\n    return this.byteOffset;\n  };\n  /**\r\n   * @param numBits number of bits to read\r\n   * @return int representing the bits read. The bits will appear as the least-significant\r\n   *         bits of the int\r\n   * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\r\n   */\n  BitSource.prototype.readBits = function (numBits /*int*/) {\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n      throw new IllegalArgumentException('' + numBits);\n    }\n    var result = 0;\n    var bitOffset = this.bitOffset;\n    var byteOffset = this.byteOffset;\n    var bytes = this.bytes;\n    // First, read remainder from current byte\n    if (bitOffset > 0) {\n      var bitsLeft = 8 - bitOffset;\n      var toRead = numBits < bitsLeft ? numBits : bitsLeft;\n      var bitsToNotRead = bitsLeft - toRead;\n      var mask = 0xFF >> 8 - toRead << bitsToNotRead;\n      result = (bytes[byteOffset] & mask) >> bitsToNotRead;\n      numBits -= toRead;\n      bitOffset += toRead;\n      if (bitOffset === 8) {\n        bitOffset = 0;\n        byteOffset++;\n      }\n    }\n    // Next read whole bytes\n    if (numBits > 0) {\n      while (numBits >= 8) {\n        result = result << 8 | bytes[byteOffset] & 0xFF;\n        byteOffset++;\n        numBits -= 8;\n      }\n      // Finally read a partial byte\n      if (numBits > 0) {\n        var bitsToNotRead = 8 - numBits;\n        var mask = 0xFF >> bitsToNotRead << bitsToNotRead;\n        result = result << numBits | (bytes[byteOffset] & mask) >> bitsToNotRead;\n        bitOffset += numBits;\n      }\n    }\n    this.bitOffset = bitOffset;\n    this.byteOffset = byteOffset;\n    return result;\n  };\n  /**\r\n   * @return number of bits that can be read successfully\r\n   */\n  BitSource.prototype.available = function () {\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n  };\n  return BitSource;\n}();\nexport default BitSource;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}