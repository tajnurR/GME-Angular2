{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*namespace com.google.zxing.qrcode.detector {*/\nimport DecodeHintType from '../../DecodeHintType';\nimport ResultPoint from '../../ResultPoint';\nimport FinderPattern from './FinderPattern';\nimport FinderPatternInfo from './FinderPatternInfo';\nimport NotFoundException from '../../NotFoundException';\n/*import java.io.Serializable;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collections;*/\n/*import java.util.Comparator;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\r\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\r\n * markers at three corners of a QR Code.</p>\r\n *\r\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\r\n *\r\n * @author Sean Owen\r\n */\nvar FinderPatternFinder = /** @class */function () {\n  /**\r\n   * <p>Creates a finder that will search the image for three finder patterns.</p>\r\n   *\r\n   * @param image image to search\r\n   */\n  // public constructor(image: BitMatrix) {\n  //   this(image, null)\n  // }\n  function FinderPatternFinder(image, resultPointCallback) {\n    this.image = image;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = [];\n    this.crossCheckStateCount = new Int32Array(5);\n    this.resultPointCallback = resultPointCallback;\n  }\n  FinderPatternFinder.prototype.getImage = function () {\n    return this.image;\n  };\n  FinderPatternFinder.prototype.getPossibleCenters = function () {\n    return this.possibleCenters;\n  };\n  FinderPatternFinder.prototype.find = function (hints) {\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType.TRY_HARDER);\n    var pureBarcode = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType.PURE_BARCODE);\n    var image = this.image;\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // We are looking for black/white/black/white/black modules in\n    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n    // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n    // image, and then account for the center being 3 modules in size. This gives the smallest\n    // number of pixels the center could be, so skip this often. When trying harder, look for all\n    // QR versions regardless of how dense they are.\n    var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder.MAX_MODULES));\n    if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n      iSkip = FinderPatternFinder.MIN_SKIP;\n    }\n    var done = false;\n    var stateCount = new Int32Array(5);\n    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n      // Get a row of black/white values\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      stateCount[3] = 0;\n      stateCount[4] = 0;\n      var currentState = 0;\n      for (var j = 0; j < maxJ; j++) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if ((currentState & 1) === 1) {\n            // Counting white pixels\n            currentState++;\n          }\n          stateCount[currentState]++;\n        } else {\n          // White pixel\n          if ((currentState & 1) === 0) {\n            // Counting black pixels\n            if (currentState === 4) {\n              // A winner?\n              if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                if (confirmed === true) {\n                  // Start examining every other line. Checking each line turned out to be too\n                  // expensive and didn't improve performance.\n                  iSkip = 2;\n                  if (this.hasSkipped === true) {\n                    done = this.haveMultiplyConfirmedCenters();\n                  } else {\n                    var rowSkip = this.findRowSkip();\n                    if (rowSkip > stateCount[2]) {\n                      // Skip rows between row of lower confirmed center\n                      // and top of presumed third confirmed center\n                      // but back up a bit to get a full chance of detecting\n                      // it, entire width of center of finder pattern\n                      // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                      // of pattern we saw) to be conservative, and also back off by iSkip which\n                      // is about to be re-added\n                      i += rowSkip - stateCount[2] - iSkip;\n                      j = maxJ - 1;\n                    }\n                  }\n                } else {\n                  stateCount[0] = stateCount[2];\n                  stateCount[1] = stateCount[3];\n                  stateCount[2] = stateCount[4];\n                  stateCount[3] = 1;\n                  stateCount[4] = 0;\n                  currentState = 3;\n                  continue;\n                }\n                // Clear state to start looking again\n                currentState = 0;\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n              } else {\n                // No, shift counts back by two\n                stateCount[0] = stateCount[2];\n                stateCount[1] = stateCount[3];\n                stateCount[2] = stateCount[4];\n                stateCount[3] = 1;\n                stateCount[4] = 0;\n                currentState = 3;\n              }\n            } else {\n              stateCount[++currentState]++;\n            }\n          } else {\n            // Counting white pixels\n            stateCount[currentState]++;\n          }\n        }\n      }\n      if (FinderPatternFinder.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n        if (confirmed === true) {\n          iSkip = stateCount[0];\n          if (this.hasSkipped) {\n            // Found a third one\n            done = this.haveMultiplyConfirmedCenters();\n          }\n        }\n      }\n    }\n    var patternInfo = this.selectBestPatterns();\n    ResultPoint.orderBestPatterns(patternInfo);\n    return new FinderPatternInfo(patternInfo);\n  };\n  /**\r\n   * Given a count of black/white/black/white/black pixels just seen and an end position,\r\n   * figures the location of the center of this run.\r\n   */\n  FinderPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n    return end - stateCount[4] - stateCount[3] - stateCount[2] / 2.0;\n  };\n  /**\r\n   * @param stateCount count of black/white/black/white/black pixels just read\r\n   * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\r\n   *         used by finder patterns to be considered a match\r\n   */\n  FinderPatternFinder.foundPatternCross = function (stateCount) {\n    var totalModuleSize = 0;\n    for (var i = 0; i < 5; i++) {\n      var count = stateCount[i];\n      if (count === 0) {\n        return false;\n      }\n      totalModuleSize += count;\n    }\n    if (totalModuleSize < 7) {\n      return false;\n    }\n    var moduleSize = totalModuleSize / 7.0;\n    var maxVariance = moduleSize / 2.0;\n    // Allow less than 50% variance from 1-1-3-1-1 proportions\n    return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;\n  };\n  FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n    var crossCheckStateCount = this.crossCheckStateCount;\n    crossCheckStateCount[0] = 0;\n    crossCheckStateCount[1] = 0;\n    crossCheckStateCount[2] = 0;\n    crossCheckStateCount[3] = 0;\n    crossCheckStateCount[4] = 0;\n    return crossCheckStateCount;\n  };\n  /**\r\n   * After a vertical and horizontal scan finds a potential finder pattern, this method\r\n   * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\r\n   * finder pattern to see if the same proportion is detected.\r\n   *\r\n   * @param startI row where a finder pattern was detected\r\n   * @param centerJ center of the section that appears to cross a finder pattern\r\n   * @param maxCount maximum reasonable number of modules that should be\r\n   *  observed in any reading state, based on the results of the horizontal scan\r\n   * @param originalStateCountTotal The original state count total.\r\n   * @return true if proportions are withing expected limits\r\n   */\n  FinderPatternFinder.prototype.crossCheckDiagonal = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up, left from center finding black center mass\n    var i = 0;\n    var image = this.image;\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (startI < i || centerJ < i) {\n      return false;\n    }\n    // Continue up, left finding white space\n    while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n      return false;\n    }\n    // Continue up, left finding black border\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i++;\n    }\n    if (stateCount[0] > maxCount) {\n      return false;\n    }\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // Now also count down, right from center\n    i = 1;\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n      stateCount[2]++;\n      i++;\n    }\n    // Ran off the edge?\n    if (startI + i >= maxI || centerJ + i >= maxJ) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return false;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 100% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder.foundPatternCross(stateCount);\n  };\n  /**\r\n   * <p>After a horizontal scan finds a potential finder pattern, this method\r\n   * \"cross-checks\" by scanning down vertically through the center of the possible\r\n   * finder pattern to see if the same proportion is detected.</p>\r\n   *\r\n   * @param startI row where a finder pattern was detected\r\n   * @param centerJ center of the section that appears to cross a finder pattern\r\n   * @param maxCount maximum reasonable number of modules that should be\r\n   * observed in any reading state, based on the results of the horizontal scan\r\n   * @return vertical center of finder pattern, or {@link Float#NaN} if not found\r\n   */\n  FinderPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up from center\n    var i = startI;\n    while (i >= 0 && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i--;\n    }\n    if (i < 0) {\n      return NaN;\n    }\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    // Now also count down from center\n    i = startI + 1;\n    while (i < maxI && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (i === maxI) {\n      return NaN;\n    }\n    while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (i === maxI || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 40% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\r\n   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\r\n   * except it reads horizontally instead of vertically. This is used to cross-cross\r\n   * check a vertical cross check and locate the real center of the alignment pattern.</p>\r\n   */\n  FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxJ = image.getWidth();\n    var stateCount = this.getCrossCheckStateCount();\n    var j = startJ;\n    while (j >= 0 && image.get(j, centerI)) {\n      stateCount[2]++;\n      j--;\n    }\n    if (j < 0) {\n      return NaN;\n    }\n    while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      j--;\n    }\n    if (j < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      j--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    j = startJ + 1;\n    while (j < maxJ && image.get(j, centerI)) {\n      stateCount[2]++;\n      j++;\n    }\n    if (j === maxJ) {\n      return NaN;\n    }\n    while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      j++;\n    }\n    if (j === maxJ || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      j++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is significantly different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n  };\n  /**\r\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\r\n   * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\r\n   * with another horizontal scan. This is needed primarily to locate the real horizontal\r\n   * center of the pattern in cases of extreme skew.\r\n   * And then we cross-cross-cross check with another diagonal scan.</p>\r\n   *\r\n   * <p>If that succeeds the finder pattern location is added to a list that tracks\r\n   * the number of times each location has been nearly-matched as a finder pattern.\r\n   * Each additional find is more evidence that the location is in fact a finder\r\n   * pattern center\r\n   *\r\n   * @param stateCount reading state module counts from horizontal scan\r\n   * @param i row where finder pattern may be found\r\n   * @param j end of possible finder pattern in row\r\n   * @param pureBarcode true if in \"pure barcode\" mode\r\n   * @return true if a finder pattern candidate was found this time\r\n   */\n  FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/, pureBarcode) {\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i, /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal);\n    if (!isNaN(centerI)) {\n      // Re-cross check\n      centerJ = this.crossCheckHorizontal( /*(int) */Math.floor(centerJ), /*(int) */Math.floor(centerI), stateCount[2], stateCountTotal);\n      if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal( /*(int) */Math.floor(centerI), /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n        var estimatedModuleSize = stateCountTotal / 7.0;\n        var found = false;\n        var possibleCenters = this.possibleCenters;\n        for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n          var center = possibleCenters[index];\n          // Look for about the same center and module size:\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          var point = new FinderPattern(centerJ, centerI, estimatedModuleSize);\n          possibleCenters.push(point);\n          if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n            this.resultPointCallback.foundPossibleResultPoint(point);\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * @return number of rows we could safely skip during scanning, based on the first\r\n   *         two finder patterns that have been located. In some cases their position will\r\n   *         allow us to infer that the third pattern must lie below a certain point farther\r\n   *         down in the image.\r\n   */\n  FinderPatternFinder.prototype.findRowSkip = function () {\n    var e_1, _a;\n    var max = this.possibleCenters.length;\n    if (max <= 1) {\n      return 0;\n    }\n    var firstConfirmedCenter = null;\n    try {\n      for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var center = _c.value;\n        if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          if (firstConfirmedCenter == null) {\n            firstConfirmedCenter = center;\n          } else {\n            // We have two confirmed centers\n            // How far down can we skip before resuming looking for the next\n            // pattern? In the worst case, only the difference between the\n            // difference in the x / y coordinates of the two centers.\n            // This is the case where you find top left last.\n            this.hasSkipped = true;\n            return (/*(int) */Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)\n            );\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * @return true iff we have found at least 3 finder patterns that have been detected\r\n   *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\r\n   *         candidates is \"pretty similar\"\r\n   */\n  FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n    var e_2, _a, e_3, _b;\n    var confirmedCount = 0;\n    var totalModuleSize = 0.0;\n    var max = this.possibleCenters.length;\n    try {\n      for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pattern = _d.value;\n        if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          confirmedCount++;\n          totalModuleSize += pattern.getEstimatedModuleSize();\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    if (confirmedCount < 3) {\n      return false;\n    }\n    // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n    // and that we need to keep looking. We detect this by asking if the estimated module sizes\n    // vary too much. We arbitrarily say that when the total deviation from average exceeds\n    // 5% of the total module size estimates, it's too much.\n    var average = totalModuleSize / max;\n    var totalDeviation = 0.0;\n    try {\n      for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var pattern = _f.value;\n        totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return totalDeviation <= 0.05 * totalModuleSize;\n  };\n  /**\r\n   * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\r\n   *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\r\n   *         size differs from the average among those patterns the least\r\n   * @throws NotFoundException if 3 such finder patterns do not exist\r\n   */\n  FinderPatternFinder.prototype.selectBestPatterns = function () {\n    var e_4, _a, e_5, _b;\n    var startSize = this.possibleCenters.length;\n    if (startSize < 3) {\n      // Couldn't find enough finder patterns\n      throw new NotFoundException();\n    }\n    var possibleCenters = this.possibleCenters;\n    var average;\n    // Filter outlier possibilities whose module size is too different\n    if (startSize > 3) {\n      // But we can only afford to do so if we have at least 4 possibilities to choose from\n      var totalModuleSize = 0.0;\n      var square = 0.0;\n      try {\n        for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var center = _d.value;\n          var size = center.getEstimatedModuleSize();\n          totalModuleSize += size;\n          square += size * size;\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n      average = totalModuleSize / startSize;\n      var stdDev = Math.sqrt(square / startSize - average * average);\n      possibleCenters.sort(\n      /**\r\n       * <p>Orders by furthest from average</p>\r\n       */\n      // FurthestFromAverageComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n        var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n        return dA < dB ? -1 : dA > dB ? 1 : 0;\n      });\n      var limit = Math.max(0.2 * average, stdDev);\n      for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n        var pattern = possibleCenters[i];\n        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n          possibleCenters.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    if (possibleCenters.length > 3) {\n      // Throw away all but those first size candidate points we found.\n      var totalModuleSize = 0.0;\n      try {\n        for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n          var possibleCenter = possibleCenters_1_1.value;\n          totalModuleSize += possibleCenter.getEstimatedModuleSize();\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      average = totalModuleSize / possibleCenters.length;\n      possibleCenters.sort(\n      /**\r\n       * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\r\n       */\n      // CenterComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        if (center2.getCount() === center1.getCount()) {\n          var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n          var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n          return dA < dB ? 1 : dA > dB ? -1 : 0;\n        } else {\n          return center2.getCount() - center1.getCount();\n        }\n      });\n      possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n    }\n\n    return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\n  };\n  FinderPatternFinder.CENTER_QUORUM = 2;\n  FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n  FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n  return FinderPatternFinder;\n}();\nexport default FinderPatternFinder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}