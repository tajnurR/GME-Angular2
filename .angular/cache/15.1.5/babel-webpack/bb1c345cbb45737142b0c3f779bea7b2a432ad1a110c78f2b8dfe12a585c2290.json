{"ast":null,"code":"import IndexOutOfBoundsException from '../IndexOutOfBoundsException';\nimport NullPointerException from '../NullPointerException';\n/*\r\n * Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.\r\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n *\r\n * This code is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU General Public License version 2 only, as\r\n * published by the Free Software Foundation.  Oracle designates this\r\n * particular file as subject to the \"Classpath\" exception as provided\r\n * by Oracle in the LICENSE file that accompanied this code.\r\n *\r\n * This code is distributed in the hope that it will be useful, but WITHOUT\r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n * version 2 for more details (a copy is included in the LICENSE file that\r\n * accompanied this code).\r\n *\r\n * You should have received a copy of the GNU General Public License version\r\n * 2 along with this work; if not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n *\r\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n * or visit www.oracle.com if you need additional information or have any\r\n * questions.\r\n */\n// package java.io;\n/**\r\n * This abstract class is the superclass of all classes representing\r\n * an output stream of bytes. An output stream accepts output bytes\r\n * and sends them to some sink.\r\n * <p>\r\n * Applications that need to define a subclass of\r\n * <code>OutputStream</code> must always provide at least a method\r\n * that writes one byte of output.\r\n *\r\n * @author  Arthur van Hoff\r\n * @see     java.io.BufferedOutputStream\r\n * @see     java.io.ByteArrayOutputStream\r\n * @see     java.io.DataOutputStream\r\n * @see     java.io.FilterOutputStream\r\n * @see     java.io.InputStream\r\n * @see     java.io.OutputStream#write(int)\r\n * @since   JDK1.0\r\n */\nvar OutputStream /*implements Closeable, Flushable*/ = /** @class */function () {\n  function OutputStream() {}\n  /**\r\n   * Writes <code>b.length</code> bytes from the specified byte array\r\n   * to this output stream. The general contract for <code>write(b)</code>\r\n   * is that it should have exactly the same effect as the call\r\n   * <code>write(b, 0, b.length)</code>.\r\n   *\r\n   * @param      b   the data.\r\n   * @exception  IOException  if an I/O error occurs.\r\n   * @see        java.io.OutputStream#write(byte[], int, int)\r\n   */\n  OutputStream.prototype.writeBytes = function (b) {\n    this.writeBytesOffset(b, 0, b.length);\n  };\n  /**\r\n   * Writes <code>len</code> bytes from the specified byte array\r\n   * starting at offset <code>off</code> to this output stream.\r\n   * The general contract for <code>write(b, off, len)</code> is that\r\n   * some of the bytes in the array <code>b</code> are written to the\r\n   * output stream in order; element <code>b[off]</code> is the first\r\n   * byte written and <code>b[off+len-1]</code> is the last byte written\r\n   * by this operation.\r\n   * <p>\r\n   * The <code>write</code> method of <code>OutputStream</code> calls\r\n   * the write method of one argument on each of the bytes to be\r\n   * written out. Subclasses are encouraged to override this method and\r\n   * provide a more efficient implementation.\r\n   * <p>\r\n   * If <code>b</code> is <code>null</code>, a\r\n   * <code>NullPointerException</code> is thrown.\r\n   * <p>\r\n   * If <code>off</code> is negative, or <code>len</code> is negative, or\r\n   * <code>off+len</code> is greater than the length of the array\r\n   * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.\r\n   *\r\n   * @param      b     the data.\r\n   * @param      off   the start offset in the data.\r\n   * @param      len   the number of bytes to write.\r\n   * @exception  IOException  if an I/O error occurs. In particular,\r\n   *             an <code>IOException</code> is thrown if the output\r\n   *             stream is closed.\r\n   */\n  OutputStream.prototype.writeBytesOffset = function (b, off, len) {\n    if (b == null) {\n      throw new NullPointerException();\n    } else if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {\n      throw new IndexOutOfBoundsException();\n    } else if (len === 0) {\n      return;\n    }\n    for (var i = 0; i < len; i++) {\n      this.write(b[off + i]);\n    }\n  };\n  /**\r\n   * Flushes this output stream and forces any buffered output bytes\r\n   * to be written out. The general contract of <code>flush</code> is\r\n   * that calling it is an indication that, if any bytes previously\r\n   * written have been buffered by the implementation of the output\r\n   * stream, such bytes should immediately be written to their\r\n   * intended destination.\r\n   * <p>\r\n   * If the intended destination of this stream is an abstraction provided by\r\n   * the underlying operating system, for example a file, then flushing the\r\n   * stream guarantees only that bytes previously written to the stream are\r\n   * passed to the operating system for writing; it does not guarantee that\r\n   * they are actually written to a physical device such as a disk drive.\r\n   * <p>\r\n   * The <code>flush</code> method of <code>OutputStream</code> does nothing.\r\n   *\r\n   * @exception  IOException  if an I/O error occurs.\r\n   */\n  OutputStream.prototype.flush = function () {};\n  /**\r\n   * Closes this output stream and releases any system resources\r\n   * associated with this stream. The general contract of <code>close</code>\r\n   * is that it closes the output stream. A closed stream cannot perform\r\n   * output operations and cannot be reopened.\r\n   * <p>\r\n   * The <code>close</code> method of <code>OutputStream</code> does nothing.\r\n   *\r\n   * @exception  IOException  if an I/O error occurs.\r\n   */\n  OutputStream.prototype.close = function () {};\n  return OutputStream;\n}();\nexport default OutputStream;","map":{"version":3,"names":["IndexOutOfBoundsException","NullPointerException","OutputStream","prototype","writeBytes","b","writeBytesOffset","length","off","len","i","write","flush","close"],"sources":["D:/Git/GME-Angular2/node_modules/@zxing/library/esm/core/util/OutputStream.js"],"sourcesContent":["import IndexOutOfBoundsException from '../IndexOutOfBoundsException';\r\nimport NullPointerException from '../NullPointerException';\r\n/*\r\n * Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.\r\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n *\r\n * This code is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU General Public License version 2 only, as\r\n * published by the Free Software Foundation.  Oracle designates this\r\n * particular file as subject to the \"Classpath\" exception as provided\r\n * by Oracle in the LICENSE file that accompanied this code.\r\n *\r\n * This code is distributed in the hope that it will be useful, but WITHOUT\r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n * version 2 for more details (a copy is included in the LICENSE file that\r\n * accompanied this code).\r\n *\r\n * You should have received a copy of the GNU General Public License version\r\n * 2 along with this work; if not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n *\r\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n * or visit www.oracle.com if you need additional information or have any\r\n * questions.\r\n */\r\n// package java.io;\r\n/**\r\n * This abstract class is the superclass of all classes representing\r\n * an output stream of bytes. An output stream accepts output bytes\r\n * and sends them to some sink.\r\n * <p>\r\n * Applications that need to define a subclass of\r\n * <code>OutputStream</code> must always provide at least a method\r\n * that writes one byte of output.\r\n *\r\n * @author  Arthur van Hoff\r\n * @see     java.io.BufferedOutputStream\r\n * @see     java.io.ByteArrayOutputStream\r\n * @see     java.io.DataOutputStream\r\n * @see     java.io.FilterOutputStream\r\n * @see     java.io.InputStream\r\n * @see     java.io.OutputStream#write(int)\r\n * @since   JDK1.0\r\n */\r\nvar OutputStream /*implements Closeable, Flushable*/ = /** @class */ (function () {\r\n    function OutputStream() {\r\n    }\r\n    /**\r\n     * Writes <code>b.length</code> bytes from the specified byte array\r\n     * to this output stream. The general contract for <code>write(b)</code>\r\n     * is that it should have exactly the same effect as the call\r\n     * <code>write(b, 0, b.length)</code>.\r\n     *\r\n     * @param      b   the data.\r\n     * @exception  IOException  if an I/O error occurs.\r\n     * @see        java.io.OutputStream#write(byte[], int, int)\r\n     */\r\n    OutputStream.prototype.writeBytes = function (b) {\r\n        this.writeBytesOffset(b, 0, b.length);\r\n    };\r\n    /**\r\n     * Writes <code>len</code> bytes from the specified byte array\r\n     * starting at offset <code>off</code> to this output stream.\r\n     * The general contract for <code>write(b, off, len)</code> is that\r\n     * some of the bytes in the array <code>b</code> are written to the\r\n     * output stream in order; element <code>b[off]</code> is the first\r\n     * byte written and <code>b[off+len-1]</code> is the last byte written\r\n     * by this operation.\r\n     * <p>\r\n     * The <code>write</code> method of <code>OutputStream</code> calls\r\n     * the write method of one argument on each of the bytes to be\r\n     * written out. Subclasses are encouraged to override this method and\r\n     * provide a more efficient implementation.\r\n     * <p>\r\n     * If <code>b</code> is <code>null</code>, a\r\n     * <code>NullPointerException</code> is thrown.\r\n     * <p>\r\n     * If <code>off</code> is negative, or <code>len</code> is negative, or\r\n     * <code>off+len</code> is greater than the length of the array\r\n     * <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.\r\n     *\r\n     * @param      b     the data.\r\n     * @param      off   the start offset in the data.\r\n     * @param      len   the number of bytes to write.\r\n     * @exception  IOException  if an I/O error occurs. In particular,\r\n     *             an <code>IOException</code> is thrown if the output\r\n     *             stream is closed.\r\n     */\r\n    OutputStream.prototype.writeBytesOffset = function (b, off, len) {\r\n        if (b == null) {\r\n            throw new NullPointerException();\r\n        }\r\n        else if ((off < 0) || (off > b.length) || (len < 0) ||\r\n            ((off + len) > b.length) || ((off + len) < 0)) {\r\n            throw new IndexOutOfBoundsException();\r\n        }\r\n        else if (len === 0) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < len; i++) {\r\n            this.write(b[off + i]);\r\n        }\r\n    };\r\n    /**\r\n     * Flushes this output stream and forces any buffered output bytes\r\n     * to be written out. The general contract of <code>flush</code> is\r\n     * that calling it is an indication that, if any bytes previously\r\n     * written have been buffered by the implementation of the output\r\n     * stream, such bytes should immediately be written to their\r\n     * intended destination.\r\n     * <p>\r\n     * If the intended destination of this stream is an abstraction provided by\r\n     * the underlying operating system, for example a file, then flushing the\r\n     * stream guarantees only that bytes previously written to the stream are\r\n     * passed to the operating system for writing; it does not guarantee that\r\n     * they are actually written to a physical device such as a disk drive.\r\n     * <p>\r\n     * The <code>flush</code> method of <code>OutputStream</code> does nothing.\r\n     *\r\n     * @exception  IOException  if an I/O error occurs.\r\n     */\r\n    OutputStream.prototype.flush = function () {\r\n    };\r\n    /**\r\n     * Closes this output stream and releases any system resources\r\n     * associated with this stream. The general contract of <code>close</code>\r\n     * is that it closes the output stream. A closed stream cannot perform\r\n     * output operations and cannot be reopened.\r\n     * <p>\r\n     * The <code>close</code> method of <code>OutputStream</code> does nothing.\r\n     *\r\n     * @exception  IOException  if an I/O error occurs.\r\n     */\r\n    OutputStream.prototype.close = function () {\r\n    };\r\n    return OutputStream;\r\n}());\r\nexport default OutputStream;\r\n"],"mappings":"AAAA,OAAOA,yBAAyB,MAAM,8BAA8B;AACpE,OAAOC,oBAAoB,MAAM,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,CAAC,sCAAsC,aAAe,YAAY;EAC9E,SAASA,YAAY,GAAG,CACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,YAAY,CAACC,SAAS,CAACC,UAAU,GAAG,UAAUC,CAAC,EAAE;IAC7C,IAAI,CAACC,gBAAgB,CAACD,CAAC,EAAE,CAAC,EAAEA,CAAC,CAACE,MAAM,CAAC;EACzC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,YAAY,CAACC,SAAS,CAACG,gBAAgB,GAAG,UAAUD,CAAC,EAAEG,GAAG,EAAEC,GAAG,EAAE;IAC7D,IAAIJ,CAAC,IAAI,IAAI,EAAE;MACX,MAAM,IAAIJ,oBAAoB,EAAE;IACpC,CAAC,MACI,IAAKO,GAAG,GAAG,CAAC,IAAMA,GAAG,GAAGH,CAAC,CAACE,MAAO,IAAKE,GAAG,GAAG,CAAE,IAC7CD,GAAG,GAAGC,GAAG,GAAIJ,CAAC,CAACE,MAAO,IAAMC,GAAG,GAAGC,GAAG,GAAI,CAAE,EAAE;MAC/C,MAAM,IAAIT,yBAAyB,EAAE;IACzC,CAAC,MACI,IAAIS,GAAG,KAAK,CAAC,EAAE;MAChB;IACJ;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,EAAEC,CAAC,EAAE,EAAE;MAC1B,IAAI,CAACC,KAAK,CAACN,CAAC,CAACG,GAAG,GAAGE,CAAC,CAAC,CAAC;IAC1B;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIR,YAAY,CAACC,SAAS,CAACS,KAAK,GAAG,YAAY,CAC3C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,YAAY,CAACC,SAAS,CAACU,KAAK,GAAG,YAAY,CAC3C,CAAC;EACD,OAAOX,YAAY;AACvB,CAAC,EAAG;AACJ,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}