{"ast":null,"code":"/*\r\n* Copyright 2012 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// package com.google.zxing.pdf417.decoder.ec;\nimport IllegalArgumentException from '../../../IllegalArgumentException';\nimport System from '../../../util/System';\nimport StringBuilder from '../../../util/StringBuilder';\n/**\r\n * @author Sean Owen\r\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\r\n */\nvar ModulusPoly = /** @class */function () {\n  function ModulusPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException();\n    }\n    this.field = field;\n    var coefficientsLength = /*int*/coefficients.length;\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = /*int*/1;\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = new Int32Array([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n  ModulusPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\r\n   * @return degree of this polynomial\r\n   */\n  ModulusPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\r\n   * @return true iff this polynomial is the monomial \"0\"\r\n   */\n  ModulusPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\r\n   * @return coefficient of x^degree term in this polynomial\r\n   */\n  ModulusPoly.prototype.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\r\n   * @return evaluation of this polynomial at a given point\r\n   */\n  ModulusPoly.prototype.evaluateAt = function (a) {\n    var e_1, _a;\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    if (a === 1) {\n      // Just the sum of the coefficients\n      var sum = /*int*/0;\n      try {\n        for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var coefficient = _c.value /*int*/;\n          sum = this.field.add(sum, coefficient);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return sum;\n    }\n    var result = /*int*/this.coefficients[0];\n    var size = /*int*/this.coefficients.length;\n    for (var i /*int*/ = 1; i < size; i++) {\n      result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n    }\n    return result;\n  };\n  ModulusPoly.prototype.add = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero()) {\n      return other;\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = /*int*/largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new ModulusPoly(this.field, sumDiff);\n  };\n  ModulusPoly.prototype.subtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    return this.add(other.negative());\n  };\n  ModulusPoly.prototype.multiply = function (other) {\n    if (other instanceof ModulusPoly) {\n      return this.multiplyOther(other);\n    }\n    return this.multiplyScalar(other);\n  };\n  ModulusPoly.prototype.multiplyOther = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero() || other.isZero()) {\n      // return this.field.getZero();\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = /*int*/aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = /*int*/bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    for (var i /*int*/ = 0; i < aLength; i++) {\n      var aCoeff = /*int*/aCoefficients[i];\n      for (var j /*int*/ = 0; j < bLength; j++) {\n        product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.negative = function () {\n    var size = /*int*/this.coefficients.length;\n    var negativeCoefficients = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n    }\n    return new ModulusPoly(this.field, negativeCoefficients);\n  };\n  ModulusPoly.prototype.multiplyScalar = function (scalar) {\n    if (scalar === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    if (scalar === 1) {\n      return this;\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException();\n    }\n    if (coefficient === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size + degree);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  /*\r\n  ModulusPoly[] divide(other: ModulusPoly) {\r\n    if (!field.equals(other.field)) {\r\n      throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\r\n    }\r\n    if (other.isZero()) {\r\n      throw new IllegalArgumentException(\"Divide by 0\");\r\n    }\r\n        let quotient: ModulusPoly = field.getZero();\r\n    let remainder: ModulusPoly = this;\r\n        let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\r\n    let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\r\n        while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\r\n      let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\r\n      let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\r\n      let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\r\n      let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\r\n      quotient = quotient.add(iterationQuotient);\r\n      remainder = remainder.subtract(term);\r\n    }\r\n        return new ModulusPoly[] { quotient, remainder };\r\n  }\r\n  */\n  // @Override\n  ModulusPoly.prototype.toString = function () {\n    var result = new StringBuilder( /*8 * this.getDegree()*/); // dynamic string size in JS\n    for (var degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = /*int*/this.getCoefficient(degree);\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result.append(' - ');\n          coefficient = -coefficient;\n        } else {\n          if (result.length() > 0) {\n            result.append(' + ');\n          }\n        }\n        if (degree === 0 || coefficient !== 1) {\n          result.append(coefficient);\n        }\n        if (degree !== 0) {\n          if (degree === 1) {\n            result.append('x');\n          } else {\n            result.append('x^');\n            result.append(degree);\n          }\n        }\n      }\n    }\n    return result.toString();\n  };\n  return ModulusPoly;\n}();\nexport default ModulusPoly;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}