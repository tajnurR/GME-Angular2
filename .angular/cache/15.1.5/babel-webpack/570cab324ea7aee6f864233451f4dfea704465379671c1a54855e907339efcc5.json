{"ast":null,"code":"import UnsupportedOperationException from '../UnsupportedOperationException';\nimport CharacterSetECI from '../common/CharacterSetECI';\n/**\r\n * Responsible for en/decoding strings.\r\n */\nvar StringEncoding = /** @class */function () {\n  function StringEncoding() {}\n  /**\r\n   * Decodes some Uint8Array to a string format.\r\n   */\n  StringEncoding.decode = function (bytes, encoding) {\n    var encodingName = this.encodingName(encoding);\n    if (this.customDecoder) {\n      return this.customDecoder(bytes, encodingName);\n    }\n    // Increases browser support.\n    if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n      return this.decodeFallback(bytes, encodingName);\n    }\n    return new TextDecoder(encodingName).decode(bytes);\n  };\n  /**\r\n   * Checks if the decoding method should use the fallback for decoding\r\n   * once Node TextDecoder doesn't support all encoding formats.\r\n   *\r\n   * @param encodingName\r\n   */\n  StringEncoding.shouldDecodeOnFallback = function (encodingName) {\n    return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n  };\n  /**\r\n   * Encodes some string into a Uint8Array.\r\n   */\n  StringEncoding.encode = function (s, encoding) {\n    var encodingName = this.encodingName(encoding);\n    if (this.customEncoder) {\n      return this.customEncoder(s, encodingName);\n    }\n    // Increases browser support.\n    if (typeof TextEncoder === 'undefined') {\n      return this.encodeFallback(s);\n    }\n    // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n    return new TextEncoder().encode(s);\n  };\n  StringEncoding.isBrowser = function () {\n    return typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]';\n  };\n  /**\r\n   * Returns the string value from some encoding character set.\r\n   */\n  StringEncoding.encodingName = function (encoding) {\n    return typeof encoding === 'string' ? encoding : encoding.getName();\n  };\n  /**\r\n   * Returns character set from some encoding character set.\r\n   */\n  StringEncoding.encodingCharacterSet = function (encoding) {\n    if (encoding instanceof CharacterSetECI) {\n      return encoding;\n    }\n    return CharacterSetECI.getCharacterSetECIByName(encoding);\n  };\n  /**\r\n   * Runs a fallback for the native decoding funcion.\r\n   */\n  StringEncoding.decodeFallback = function (bytes, encoding) {\n    var characterSet = this.encodingCharacterSet(encoding);\n    if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n      var s = '';\n      for (var i = 0, length_1 = bytes.length; i < length_1; i++) {\n        var h = bytes[i].toString(16);\n        if (h.length < 2) {\n          h = '0' + h;\n        }\n        s += '%' + h;\n      }\n      return decodeURIComponent(s);\n    }\n    if (characterSet.equals(CharacterSetECI.UnicodeBigUnmarked)) {\n      return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n    }\n    throw new UnsupportedOperationException(\"Encoding \" + this.encodingName(encoding) + \" not supported by fallback.\");\n  };\n  StringEncoding.isDecodeFallbackSupported = function (characterSet) {\n    return characterSet.equals(CharacterSetECI.UTF8) || characterSet.equals(CharacterSetECI.ISO8859_1) || characterSet.equals(CharacterSetECI.ASCII);\n  };\n  /**\r\n   * Runs a fallback for the native encoding funcion.\r\n   *\r\n   * @see https://stackoverflow.com/a/17192845/4367683\r\n   */\n  StringEncoding.encodeFallback = function (s) {\n    var encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n    var charList = encodedURIstring.split('');\n    var uintArray = [];\n    for (var i = 0; i < charList.length; i++) {\n      uintArray.push(charList[i].charCodeAt(0));\n    }\n    return new Uint8Array(uintArray);\n  };\n  return StringEncoding;\n}();\nexport default StringEncoding;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}