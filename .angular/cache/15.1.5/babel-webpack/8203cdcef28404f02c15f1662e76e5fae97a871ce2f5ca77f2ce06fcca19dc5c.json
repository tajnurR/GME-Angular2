{"ast":null,"code":"/*\r\n* Copyright 2013 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.NotFoundException;\nimport NotFoundException from '../../NotFoundException';\n// import com.google.zxing.ResultPoint;\nimport ResultPoint from '../../ResultPoint';\n/**\r\n * @author Guenther Grau\r\n */\nvar BoundingBox = /** @class */function () {\n  function BoundingBox(image, topLeft, bottomLeft, topRight, bottomRight) {\n    if (image instanceof BoundingBox) {\n      this.constructor_2(image);\n    } else {\n      this.constructor_1(image, topLeft, bottomLeft, topRight, bottomRight);\n    }\n  }\n  /**\r\n   *\r\n   * @param image\r\n   * @param topLeft\r\n   * @param bottomLeft\r\n   * @param topRight\r\n   * @param bottomRight\r\n   *\r\n   * @throws NotFoundException\r\n   */\n  BoundingBox.prototype.constructor_1 = function (image, topLeft, bottomLeft, topRight, bottomRight) {\n    var leftUnspecified = topLeft == null || bottomLeft == null;\n    var rightUnspecified = topRight == null || bottomRight == null;\n    if (leftUnspecified && rightUnspecified) {\n      throw new NotFoundException();\n    }\n    if (leftUnspecified) {\n      topLeft = new ResultPoint(0, topRight.getY());\n      bottomLeft = new ResultPoint(0, bottomRight.getY());\n    } else if (rightUnspecified) {\n      topRight = new ResultPoint(image.getWidth() - 1, topLeft.getY());\n      bottomRight = new ResultPoint(image.getWidth() - 1, bottomLeft.getY());\n    }\n    this.image = image;\n    this.topLeft = topLeft;\n    this.bottomLeft = bottomLeft;\n    this.topRight = topRight;\n    this.bottomRight = bottomRight;\n    this.minX = Math.trunc(Math.min(topLeft.getX(), bottomLeft.getX()));\n    this.maxX = Math.trunc(Math.max(topRight.getX(), bottomRight.getX()));\n    this.minY = Math.trunc(Math.min(topLeft.getY(), topRight.getY()));\n    this.maxY = Math.trunc(Math.max(bottomLeft.getY(), bottomRight.getY()));\n  };\n  BoundingBox.prototype.constructor_2 = function (boundingBox) {\n    this.image = boundingBox.image;\n    this.topLeft = boundingBox.getTopLeft();\n    this.bottomLeft = boundingBox.getBottomLeft();\n    this.topRight = boundingBox.getTopRight();\n    this.bottomRight = boundingBox.getBottomRight();\n    this.minX = boundingBox.getMinX();\n    this.maxX = boundingBox.getMaxX();\n    this.minY = boundingBox.getMinY();\n    this.maxY = boundingBox.getMaxY();\n  };\n  /**\r\n   * @throws NotFoundException\r\n   */\n  BoundingBox.merge = function (leftBox, rightBox) {\n    if (leftBox == null) {\n      return rightBox;\n    }\n    if (rightBox == null) {\n      return leftBox;\n    }\n    return new BoundingBox(leftBox.image, leftBox.topLeft, leftBox.bottomLeft, rightBox.topRight, rightBox.bottomRight);\n  };\n  /**\r\n   * @throws NotFoundException\r\n   */\n  BoundingBox.prototype.addMissingRows = function (missingStartRows, missingEndRows, isLeft) {\n    var newTopLeft = this.topLeft;\n    var newBottomLeft = this.bottomLeft;\n    var newTopRight = this.topRight;\n    var newBottomRight = this.bottomRight;\n    if (missingStartRows > 0) {\n      var top_1 = isLeft ? this.topLeft : this.topRight;\n      var newMinY = Math.trunc(top_1.getY() - missingStartRows);\n      if (newMinY < 0) {\n        newMinY = 0;\n      }\n      var newTop = new ResultPoint(top_1.getX(), newMinY);\n      if (isLeft) {\n        newTopLeft = newTop;\n      } else {\n        newTopRight = newTop;\n      }\n    }\n    if (missingEndRows > 0) {\n      var bottom = isLeft ? this.bottomLeft : this.bottomRight;\n      var newMaxY = Math.trunc(bottom.getY() + missingEndRows);\n      if (newMaxY >= this.image.getHeight()) {\n        newMaxY = this.image.getHeight() - 1;\n      }\n      var newBottom = new ResultPoint(bottom.getX(), newMaxY);\n      if (isLeft) {\n        newBottomLeft = newBottom;\n      } else {\n        newBottomRight = newBottom;\n      }\n    }\n    return new BoundingBox(this.image, newTopLeft, newBottomLeft, newTopRight, newBottomRight);\n  };\n  BoundingBox.prototype.getMinX = function () {\n    return this.minX;\n  };\n  BoundingBox.prototype.getMaxX = function () {\n    return this.maxX;\n  };\n  BoundingBox.prototype.getMinY = function () {\n    return this.minY;\n  };\n  BoundingBox.prototype.getMaxY = function () {\n    return this.maxY;\n  };\n  BoundingBox.prototype.getTopLeft = function () {\n    return this.topLeft;\n  };\n  BoundingBox.prototype.getTopRight = function () {\n    return this.topRight;\n  };\n  BoundingBox.prototype.getBottomLeft = function () {\n    return this.bottomLeft;\n  };\n  BoundingBox.prototype.getBottomRight = function () {\n    return this.bottomRight;\n  };\n  return BoundingBox;\n}();\nexport default BoundingBox;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}