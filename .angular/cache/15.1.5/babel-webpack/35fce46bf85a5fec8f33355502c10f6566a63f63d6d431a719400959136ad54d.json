{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport AbstractExpandedDecoder from './AbstractExpandedDecoder';\nvar AI01decoder = /** @class */function (_super) {\n  __extends(AI01decoder, _super);\n  function AI01decoder(information) {\n    return _super.call(this, information) || this;\n  }\n  AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n    buf.append('(01)');\n    var initialPosition = buf.length();\n    buf.append('9');\n    this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n  };\n  AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n    for (var i = 0; i < 4; ++i) {\n      var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n      if (currentBlock / 100 === 0) {\n        buf.append('0');\n      }\n      if (currentBlock / 10 === 0) {\n        buf.append('0');\n      }\n      buf.append(currentBlock);\n    }\n    AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n  };\n  AI01decoder.appendCheckDigit = function (buf, currentPos) {\n    var checkDigit = 0;\n    for (var i = 0; i < 13; i++) {\n      // let digit = buf.charAt(i + currentPos) - '0';\n      // To be checked\n      var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n      checkDigit += (i & 0x01) === 0 ? 3 * digit : digit;\n    }\n    checkDigit = 10 - checkDigit % 10;\n    if (checkDigit === 10) {\n      checkDigit = 0;\n    }\n    buf.append(checkDigit);\n  };\n  AI01decoder.GTIN_SIZE = 40;\n  return AI01decoder;\n}(AbstractExpandedDecoder);\nexport default AI01decoder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}