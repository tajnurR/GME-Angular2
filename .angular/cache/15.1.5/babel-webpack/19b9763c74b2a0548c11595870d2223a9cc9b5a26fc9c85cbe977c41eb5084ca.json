{"ast":null,"code":"/*\r\n * Copyright 2012 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n// package com.google.zxing.pdf417.decoder.ec;\n// import com.google.zxing.pdf417.PDF417Common;\nimport PDF417Common from '../../PDF417Common';\nimport ModulusPoly from './ModulusPoly';\nimport IllegalArgumentException from '../../../IllegalArgumentException';\nimport ModulusBase from './ModulusBase';\n/**\r\n * <p>A field based on powers of a generator integer, modulo some modulus.</p>\r\n *\r\n * @author Sean Owen\r\n * @see com.google.zxing.common.reedsolomon.GenericGF\r\n */\nvar ModulusGF = /** @class */function (_super) {\n  __extends(ModulusGF, _super);\n  // private /*final*/ modulus: /*int*/ number;\n  function ModulusGF(modulus, generator) {\n    var _this = _super.call(this) || this;\n    _this.modulus = modulus;\n    _this.expTable = new Int32Array(modulus);\n    _this.logTable = new Int32Array(modulus);\n    var x = /*int*/1;\n    for (var i /*int*/ = 0; i < modulus; i++) {\n      _this.expTable[i] = x;\n      x = x * generator % modulus;\n    }\n    for (var i /*int*/ = 0; i < modulus - 1; i++) {\n      _this.logTable[_this.expTable[i]] = i;\n    }\n    // logTable[0] == 0 but this should never be used\n    _this.zero = new ModulusPoly(_this, new Int32Array([0]));\n    _this.one = new ModulusPoly(_this, new Int32Array([1]));\n    return _this;\n  }\n  ModulusGF.prototype.getZero = function () {\n    return this.zero;\n  };\n  ModulusGF.prototype.getOne = function () {\n    return this.one;\n  };\n  ModulusGF.prototype.buildMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException();\n    }\n    if (coefficient === 0) {\n      return this.zero;\n    }\n    var coefficients = new Int32Array(degree + 1);\n    coefficients[0] = coefficient;\n    return new ModulusPoly(this, coefficients);\n  };\n  ModulusGF.PDF417_GF = new ModulusGF(PDF417Common.NUMBER_OF_CODEWORDS, 3);\n  return ModulusGF;\n}(ModulusBase);\nexport default ModulusGF;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}