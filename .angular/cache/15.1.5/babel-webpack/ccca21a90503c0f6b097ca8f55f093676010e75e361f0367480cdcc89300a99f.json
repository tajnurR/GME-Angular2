{"ast":null,"code":"import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder } from '@zxing/library';\nvar svgNs = 'http://www.w3.org/2000/svg';\n/**/\nvar BrowserQRCodeSvgWriter = /** @class */function () {\n  function BrowserQRCodeSvgWriter() {}\n  /**\r\n   * Writes and renders a QRCode SVG element.\r\n   *\r\n   * @param contents\r\n   * @param width\r\n   * @param height\r\n   * @param hints\r\n   */\n  BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException('Found empty contents');\n    }\n    // if (format != BarcodeFormat.QR_CODE) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n    var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\n    var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n    if (hints) {\n      if (undefined !== hints.get(EncodeHintType.ERROR_CORRECTION)) {\n        var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\n        errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\n      }\n      if (undefined !== hints.get(EncodeHintType.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10);\n      }\n    }\n    var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\r\n   * Renders the result and then appends it to the DOM.\r\n   */\n  BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n    if (typeof containerElement === 'string') {\n      var targetEl = document.querySelector(containerElement);\n      if (!targetEl) {\n        throw new Error('Could no find the target HTML element.');\n      }\n      containerElement = targetEl;\n    }\n    var svgElement = this.write(contents, width, height, hints);\n    if (containerElement instanceof HTMLElement) {\n      containerElement.appendChild(svgElement);\n    }\n  };\n  /**\r\n   * Note that the input matrix uses 0 == white, 1 == black.\r\n   * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\r\n   */\n  BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n    return svgElement;\n  };\n  /**\r\n   * Creates a SVG element.\r\n   *\r\n   * @param w SVG's width attribute\r\n   * @param h SVG's height attribute\r\n   */\n  BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var svgElement = document.createElementNS(svgNs, 'svg');\n    var width = w.toString();\n    var height = h.toString();\n    svgElement.setAttribute('height', height);\n    svgElement.setAttribute('width', width);\n    svgElement.setAttribute('viewBox', \"0 0 \" + width + \" \" + height);\n    return svgElement;\n  };\n  /**\r\n   * Creates a SVG rect element.\r\n   *\r\n   * @param x Element's x coordinate\r\n   * @param y Element's y coordinate\r\n   * @param w Element's width attribute\r\n   * @param h Element's height attribute\r\n   */\n  BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var rect = document.createElementNS(svgNs, 'rect');\n    rect.setAttribute('x', x.toString());\n    rect.setAttribute('y', y.toString());\n    rect.setAttribute('height', w.toString());\n    rect.setAttribute('width', h.toString());\n    rect.setAttribute('fill', '#000000');\n    return rect;\n  };\n  BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  return BrowserQRCodeSvgWriter;\n}();\nexport { BrowserQRCodeSvgWriter };\n//# sourceMappingURL=BrowserQRCodeSvgWriter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}