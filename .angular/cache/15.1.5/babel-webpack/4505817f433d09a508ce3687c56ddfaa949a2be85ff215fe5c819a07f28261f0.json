{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { CustomError } from 'ts-custom-error';\n/**\r\n * Custom Error class of type Exception.\r\n */\nvar Exception = /** @class */function (_super) {\n  __extends(Exception, _super);\n  /**\r\n   * Allows Exception to be constructed directly\r\n   * with some message and prototype definition.\r\n   */\n  function Exception(message) {\n    if (message === void 0) {\n      message = undefined;\n    }\n    var _this = _super.call(this, message) || this;\n    _this.message = message;\n    return _this;\n  }\n  Exception.prototype.getKind = function () {\n    var ex = this.constructor;\n    return ex.kind;\n  };\n  /**\r\n   * It's typed as string so it can be extended and overriden.\r\n   */\n  Exception.kind = 'Exception';\n  return Exception;\n}(CustomError);\nexport default Exception;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}