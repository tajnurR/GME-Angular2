{"ast":null,"code":"import StringUtils from '../common/StringUtils';\nvar StringBuilder = /** @class */function () {\n  function StringBuilder(value) {\n    if (value === void 0) {\n      value = '';\n    }\n    this.value = value;\n  }\n  StringBuilder.prototype.enableDecoding = function (encoding) {\n    this.encoding = encoding;\n    return this;\n  };\n  StringBuilder.prototype.append = function (s) {\n    if (typeof s === 'string') {\n      this.value += s.toString();\n    } else if (this.encoding) {\n      // use passed format (fromCharCode will return UTF8 encoding)\n      this.value += StringUtils.castAsNonUtf8Char(s, this.encoding);\n    } else {\n      // correctly converts from UTF-8, but not other encodings\n      this.value += String.fromCharCode(s);\n    }\n    return this;\n  };\n  StringBuilder.prototype.appendChars = function (str, offset, len) {\n    for (var i = offset; offset < offset + len; i++) {\n      this.append(str[i]);\n    }\n    return this;\n  };\n  StringBuilder.prototype.length = function () {\n    return this.value.length;\n  };\n  StringBuilder.prototype.charAt = function (n) {\n    return this.value.charAt(n);\n  };\n  StringBuilder.prototype.deleteCharAt = function (n) {\n    this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n  };\n  StringBuilder.prototype.setCharAt = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n  };\n  StringBuilder.prototype.substring = function (start, end) {\n    return this.value.substring(start, end);\n  };\n  /**\r\n   * @note helper method for RSS Expanded\r\n   */\n  StringBuilder.prototype.setLengthToZero = function () {\n    this.value = '';\n  };\n  StringBuilder.prototype.toString = function () {\n    return this.value;\n  };\n  StringBuilder.prototype.insert = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n  };\n  return StringBuilder;\n}();\nexport default StringBuilder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}