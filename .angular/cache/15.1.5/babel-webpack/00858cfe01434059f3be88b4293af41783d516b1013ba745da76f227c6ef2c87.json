{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*namespace com.google.zxing.common.reedsolomon {*/\nimport AbstractGenericGF from './AbstractGenericGF';\nimport System from '../../util/System';\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * <p>Represents a polynomial whose coefficients are elements of a GF.\r\n * Instances of this class are immutable.</p>\r\n *\r\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\r\n * port of his C++ Reed-Solomon implementation.</p>\r\n *\r\n * @author Sean Owen\r\n */\nvar GenericGFPoly = /** @class */function () {\n  /**\r\n   * @param field the {@link GenericGF} instance representing the field to use\r\n   * to perform computations\r\n   * @param coefficients coefficients as ints representing elements of GF(size), arranged\r\n   * from most significant (highest-power term) coefficient to least significant\r\n   * @throws IllegalArgumentException if argument is null or empty,\r\n   * or if leading coefficient is 0 and this is not a\r\n   * constant polynomial (that is, it is not the monomial \"0\")\r\n   */\n  function GenericGFPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException();\n    }\n    this.field = field;\n    var coefficientsLength = coefficients.length;\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = 1;\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = Int32Array.from([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n  GenericGFPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\r\n   * @return degree of this polynomial\r\n   */\n  GenericGFPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\r\n   * @return true iff this polynomial is the monomial \"0\"\r\n   */\n  GenericGFPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\r\n   * @return coefficient of x^degree term in this polynomial\r\n   */\n  GenericGFPoly.prototype.getCoefficient = function (degree /*int*/) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\r\n   * @return evaluation of this polynomial at a given point\r\n   */\n  GenericGFPoly.prototype.evaluateAt = function (a /*int*/) {\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    var coefficients = this.coefficients;\n    var result;\n    if (a === 1) {\n      // Just the sum of the coefficients\n      result = 0;\n      for (var i = 0, length_1 = coefficients.length; i !== length_1; i++) {\n        var coefficient = coefficients[i];\n        result = AbstractGenericGF.addOrSubtract(result, coefficient);\n      }\n      return result;\n    }\n    result = coefficients[0];\n    var size = coefficients.length;\n    var field = this.field;\n    for (var i = 1; i < size; i++) {\n      result = AbstractGenericGF.addOrSubtract(field.multiply(a, result), coefficients[i]);\n    }\n    return result;\n  };\n  GenericGFPoly.prototype.addOrSubtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n    }\n    if (this.isZero()) {\n      return other;\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = AbstractGenericGF.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new GenericGFPoly(this.field, sumDiff);\n  };\n  GenericGFPoly.prototype.multiply = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n    }\n    if (this.isZero() || other.isZero()) {\n      return this.field.getZero();\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    var field = this.field;\n    for (var i = 0; i < aLength; i++) {\n      var aCoeff = aCoefficients[i];\n      for (var j = 0; j < bLength; j++) {\n        product[i + j] = AbstractGenericGF.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.multiplyScalar = function (scalar /*int*/) {\n    if (scalar === 0) {\n      return this.field.getZero();\n    }\n    if (scalar === 1) {\n      return this;\n    }\n    var size = this.coefficients.length;\n    var field = this.field;\n    var product = new Int32Array(size);\n    var coefficients = this.coefficients;\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], scalar);\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.multiplyByMonomial = function (degree /*int*/, coefficient /*int*/) {\n    if (degree < 0) {\n      throw new IllegalArgumentException();\n    }\n    if (coefficient === 0) {\n      return this.field.getZero();\n    }\n    var coefficients = this.coefficients;\n    var size = coefficients.length;\n    var product = new Int32Array(size + degree);\n    var field = this.field;\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], coefficient);\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.divide = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('GenericGFPolys do not have same GenericGF field');\n    }\n    if (other.isZero()) {\n      throw new IllegalArgumentException('Divide by 0');\n    }\n    var field = this.field;\n    var quotient = field.getZero();\n    var remainder = this;\n    var denominatorLeadingTerm = other.getCoefficient(other.getDegree());\n    var inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\n    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      var degreeDifference = remainder.getDegree() - other.getDegree();\n      var scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      var term = other.multiplyByMonomial(degreeDifference, scale);\n      var iterationQuotient = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.addOrSubtract(iterationQuotient);\n      remainder = remainder.addOrSubtract(term);\n    }\n    return [quotient, remainder];\n  };\n  /*@Override*/\n  GenericGFPoly.prototype.toString = function () {\n    var result = '';\n    for (var degree = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = this.getCoefficient(degree);\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result += ' - ';\n          coefficient = -coefficient;\n        } else {\n          if (result.length > 0) {\n            result += ' + ';\n          }\n        }\n        if (degree === 0 || coefficient !== 1) {\n          var alphaPower = this.field.log(coefficient);\n          if (alphaPower === 0) {\n            result += '1';\n          } else if (alphaPower === 1) {\n            result += 'a';\n          } else {\n            result += 'a^';\n            result += alphaPower;\n          }\n        }\n        if (degree !== 0) {\n          if (degree === 1) {\n            result += 'x';\n          } else {\n            result += 'x^';\n            result += degree;\n          }\n        }\n      }\n    }\n    return result;\n  };\n  return GenericGFPoly;\n}();\nexport default GenericGFPoly;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}