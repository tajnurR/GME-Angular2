{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { IllegalArgumentException, InvertedLuminanceSource, LuminanceSource } from '@zxing/library';\n/**/\nvar HTMLCanvasElementLuminanceSource = /** @class */function (_super) {\n  __extends(HTMLCanvasElementLuminanceSource, _super);\n  function HTMLCanvasElementLuminanceSource(canvas) {\n    var _this = _super.call(this, canvas.width, canvas.height) || this;\n    _this.canvas = canvas;\n    _this.tempCanvasElement = null;\n    _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n    return _this;\n  }\n  HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\n    var canvasCtx = canvas.getContext('2d');\n    if (!canvasCtx) {\n      throw new Error('Couldn\\'t get canvas context.');\n    }\n    var imageData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);\n    return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n  };\n  HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\n    var grayscaleBuffer = new Uint8ClampedArray(width * height);\n    for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\n      var gray = void 0;\n      var alpha = imageBuffer[i + 3];\n      // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n      // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n      // barcode image. Force any such pixel to be white:\n      if (alpha === 0) {\n        gray = 0xFF;\n      } else {\n        var pixelR = imageBuffer[i];\n        var pixelG = imageBuffer[i + 1];\n        var pixelB = imageBuffer[i + 2];\n        // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n        // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n        // 0x200 >> 10 is 0.5, it implements rounding.\n        // tslint:disable-next-line:no-bitwise\n        gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200 >> 10;\n      }\n      grayscaleBuffer[j] = gray;\n    }\n    return grayscaleBuffer;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n    }\n    var width = this.getWidth();\n    var start = y * width;\n    if (row === null) {\n      row = this.buffer.slice(start, start + width);\n    } else {\n      if (row.length < width) {\n        row = new Uint8ClampedArray(width);\n      }\n      // The underlying raster of image consists of bytes with the luminance values\n      // TODO: can avoid set/slice?\n      row.set(this.buffer.slice(start, start + width));\n    }\n    return row;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\n    return this.buffer;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    _super.prototype.crop.call(this, left, top, width, height);\n    return this;\n  };\n  /**\r\n   * This is always true, since the image is a gray-scale image.\r\n   *\r\n   * @return true\r\n   */\n  HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\n    return true;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\n    this.rotate(-90);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    this.rotate(-45);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource(this);\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\n    if (null === this.tempCanvasElement) {\n      var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n      tempCanvasElement.width = this.canvas.width;\n      tempCanvasElement.height = this.canvas.height;\n      this.tempCanvasElement = tempCanvasElement;\n    }\n    return this.tempCanvasElement;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\n    var tempCanvasElement = this.getTempCanvasElement();\n    if (!tempCanvasElement) {\n      throw new Error('Could not create a Canvas element.');\n    }\n    var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\n    // Calculate and set new dimensions for temp canvas\n    var width = this.canvas.width;\n    var height = this.canvas.height;\n    var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n    var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n    tempCanvasElement.width = newWidth;\n    tempCanvasElement.height = newHeight;\n    var tempContext = tempCanvasElement.getContext('2d');\n    if (!tempContext) {\n      throw new Error('Could not create a Canvas Context element.');\n    }\n    // Draw at center of temp canvas to prevent clipping of image data\n    tempContext.translate(newWidth / 2, newHeight / 2);\n    tempContext.rotate(angleRadians);\n    tempContext.drawImage(this.canvas, width / -2, height / -2);\n    this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n  return HTMLCanvasElementLuminanceSource;\n}(LuminanceSource);\nexport { HTMLCanvasElementLuminanceSource };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","IllegalArgumentException","InvertedLuminanceSource","LuminanceSource","HTMLCanvasElementLuminanceSource","_super","canvas","_this","width","height","tempCanvasElement","buffer","makeBufferFromCanvasImageData","canvasCtx","getContext","Error","imageData","getImageData","toGrayscaleBuffer","data","imageBuffer","grayscaleBuffer","Uint8ClampedArray","i","j","length_1","length","gray","alpha","pixelR","pixelG","pixelB","getRow","y","row","getHeight","getWidth","start","slice","set","getMatrix","isCropSupported","crop","left","top","isRotateSupported","rotateCounterClockwise","rotate","rotateCounterClockwise45","invert","getTempCanvasElement","ownerDocument","createElement","angle","angleRadians","DEGREE_TO_RADIANS","newWidth","Math","ceil","abs","cos","sin","newHeight","tempContext","translate","drawImage","PI"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { IllegalArgumentException, InvertedLuminanceSource, LuminanceSource, } from '@zxing/library';\r\n/**/\r\nvar HTMLCanvasElementLuminanceSource = /** @class */ (function (_super) {\r\n    __extends(HTMLCanvasElementLuminanceSource, _super);\r\n    function HTMLCanvasElementLuminanceSource(canvas) {\r\n        var _this = _super.call(this, canvas.width, canvas.height) || this;\r\n        _this.canvas = canvas;\r\n        _this.tempCanvasElement = null;\r\n        _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\r\n        return _this;\r\n    }\r\n    HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\r\n        var canvasCtx = canvas.getContext('2d');\r\n        if (!canvasCtx) {\r\n            throw new Error('Couldn\\'t get canvas context.');\r\n        }\r\n        var imageData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);\r\n        return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\r\n    };\r\n    HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\r\n        var grayscaleBuffer = new Uint8ClampedArray(width * height);\r\n        for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\r\n            var gray = void 0;\r\n            var alpha = imageBuffer[i + 3];\r\n            // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\r\n            // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\r\n            // barcode image. Force any such pixel to be white:\r\n            if (alpha === 0) {\r\n                gray = 0xFF;\r\n            }\r\n            else {\r\n                var pixelR = imageBuffer[i];\r\n                var pixelG = imageBuffer[i + 1];\r\n                var pixelB = imageBuffer[i + 2];\r\n                // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\r\n                // (306*R) >> 10 is approximately equal to R*0.299, and so on.\r\n                // 0x200 >> 10 is 0.5, it implements rounding.\r\n                // tslint:disable-next-line:no-bitwise\r\n                gray = (306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200) >> 10;\r\n            }\r\n            grayscaleBuffer[j] = gray;\r\n        }\r\n        return grayscaleBuffer;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.getRow = function (y /*int*/, row) {\r\n        if (y < 0 || y >= this.getHeight()) {\r\n            throw new IllegalArgumentException('Requested row is outside the image: ' + y);\r\n        }\r\n        var width = this.getWidth();\r\n        var start = y * width;\r\n        if (row === null) {\r\n            row = this.buffer.slice(start, start + width);\r\n        }\r\n        else {\r\n            if (row.length < width) {\r\n                row = new Uint8ClampedArray(width);\r\n            }\r\n            // The underlying raster of image consists of bytes with the luminance values\r\n            // TODO: can avoid set/slice?\r\n            row.set(this.buffer.slice(start, start + width));\r\n        }\r\n        return row;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\r\n        return this.buffer;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\r\n        return true;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\r\n        _super.prototype.crop.call(this, left, top, width, height);\r\n        return this;\r\n    };\r\n    /**\r\n     * This is always true, since the image is a gray-scale image.\r\n     *\r\n     * @return true\r\n     */\r\n    HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\r\n        return true;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\r\n        this.rotate(-90);\r\n        return this;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\r\n        this.rotate(-45);\r\n        return this;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.invert = function () {\r\n        return new InvertedLuminanceSource(this);\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\r\n        if (null === this.tempCanvasElement) {\r\n            var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\r\n            tempCanvasElement.width = this.canvas.width;\r\n            tempCanvasElement.height = this.canvas.height;\r\n            this.tempCanvasElement = tempCanvasElement;\r\n        }\r\n        return this.tempCanvasElement;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\r\n        var tempCanvasElement = this.getTempCanvasElement();\r\n        if (!tempCanvasElement) {\r\n            throw new Error('Could not create a Canvas element.');\r\n        }\r\n        var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\r\n        // Calculate and set new dimensions for temp canvas\r\n        var width = this.canvas.width;\r\n        var height = this.canvas.height;\r\n        var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\r\n        var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\r\n        tempCanvasElement.width = newWidth;\r\n        tempCanvasElement.height = newHeight;\r\n        var tempContext = tempCanvasElement.getContext('2d');\r\n        if (!tempContext) {\r\n            throw new Error('Could not create a Canvas Context element.');\r\n        }\r\n        // Draw at center of temp canvas to prevent clipping of image data\r\n        tempContext.translate(newWidth / 2, newHeight / 2);\r\n        tempContext.rotate(angleRadians);\r\n        tempContext.drawImage(this.canvas, width / -2, height / -2);\r\n        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\r\n        return this;\r\n    };\r\n    HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\r\n    return HTMLCanvasElementLuminanceSource;\r\n}(LuminanceSource));\r\nexport { HTMLCanvasElementLuminanceSource };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}