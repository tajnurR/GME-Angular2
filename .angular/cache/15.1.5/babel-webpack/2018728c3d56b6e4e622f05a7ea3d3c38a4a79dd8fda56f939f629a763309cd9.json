{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ArgumentException, BinaryBitmap, ChecksumException, DecodeHintType, FormatException, HybridBinarizer, NotFoundException } from '@zxing/library';\nimport { HTMLCanvasElementLuminanceSource } from '../common/HTMLCanvasElementLuminanceSource';\nimport { canEnumerateDevices, hasNavigator } from '../common/navigator-utils';\nvar defaultOptions = {\n  delayBetweenScanAttempts: 500,\n  delayBetweenScanSuccess: 500,\n  tryPlayVideoTimeout: 5000\n};\n/**\n * Base class for browser code reader.\n */\nvar BrowserCodeReader = /** @class */function () {\n  /**\n   * Creates an instance of BrowserCodeReader.\n   * @param {Reader} reader The reader instance to decode the barcode\n   * @param hints Holds the hints the user sets for the Reader.\n   */\n  function BrowserCodeReader(reader, hints, options) {\n    if (hints === void 0) {\n      hints = new Map();\n    }\n    if (options === void 0) {\n      options = {};\n    }\n    this.reader = reader;\n    this.hints = hints;\n    this.options = __assign(__assign({}, defaultOptions), options);\n  }\n  Object.defineProperty(BrowserCodeReader.prototype, \"possibleFormats\", {\n    /**\n     * Allows to change the possible formats the decoder should\n     * search for while scanning some image. Useful for changing\n     * the possible formats during BrowserCodeReader::scan.\n     */\n    set: function (formats) {\n      this.hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Defines what the videoElement src will be.\n   *\n   * @param videoElement\n   * @param stream The stream to be added as a source.\n   */\n  BrowserCodeReader.addVideoSource = function (videoElement, stream) {\n    // Older browsers may not have `srcObject`\n    try {\n      // @note Throws Exception if interrupted by a new loaded request\n      videoElement.srcObject = stream;\n    } catch (err) {\n      console.error(\"got interrupted by new loading request\");\n    }\n  };\n  /**\n   * Enables or disables the torch in a media stream.\n   *\n   * @experimental This doesn't work across all browsers and is still a Draft.\n   */\n  BrowserCodeReader.mediaStreamSetTorch = function (track, onOff) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, track.applyConstraints({\n              advanced: [{\n                fillLightMode: onOff ? 'flash' : 'off',\n                torch: onOff ? true : false\n              }]\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if the stream has torch support.\n   */\n  BrowserCodeReader.mediaStreamIsTorchCompatible = function (params) {\n    var e_1, _a;\n    var tracks = params.getVideoTracks();\n    try {\n      for (var tracks_1 = __values(tracks), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()) {\n        var track = tracks_1_1.value;\n        if (BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(track)) {\n          return true;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (tracks_1_1 && !tracks_1_1.done && (_a = tracks_1.return)) _a.call(tracks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return false;\n  };\n  /**\n   *\n   * @param track The media stream track that will be checked for compatibility.\n   */\n  BrowserCodeReader.mediaStreamIsTorchCompatibleTrack = function (track) {\n    try {\n      var capabilities = track.getCapabilities();\n      return 'torch' in capabilities;\n    } catch (err) {\n      // some browsers may not be compatible with ImageCapture\n      // so we are ignoring this for now.\n      // tslint:disable-next-line:no-console\n      console.error(err);\n      // tslint:disable-next-line:no-console\n      console.warn('Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.');\n      return false;\n    }\n  };\n  /**\n   * Checks if the given video element is currently playing.\n   */\n  BrowserCodeReader.isVideoPlaying = function (video) {\n    return video.currentTime > 0 && !video.paused && video.readyState > 2;\n  };\n  /**\n   * Searches and validates a media element.\n   */\n  BrowserCodeReader.getMediaElement = function (mediaElementId, type) {\n    var mediaElement = document.getElementById(mediaElementId);\n    if (!mediaElement) {\n      throw new ArgumentException(\"element with id '\".concat(mediaElementId, \"' not found\"));\n    }\n    if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\n      throw new ArgumentException(\"element with id '\".concat(mediaElementId, \"' must be an \").concat(type, \" element\"));\n    }\n    return mediaElement;\n  };\n  /**\n   * Receives a source and makes sure to return a Video Element from it or fail.\n   */\n  BrowserCodeReader.createVideoElement = function (videoThingy) {\n    if (videoThingy instanceof HTMLVideoElement) {\n      return videoThingy;\n    }\n    if (typeof videoThingy === 'string') {\n      return BrowserCodeReader.getMediaElement(videoThingy, 'video');\n    }\n    if (!videoThingy && typeof document !== 'undefined') {\n      var videoElement = document.createElement('video');\n      videoElement.width = 200;\n      videoElement.height = 200;\n      return videoElement;\n    }\n    throw new Error('Couldn\\'t get videoElement from videoSource!');\n  };\n  /**\n   * Receives a source and makes sure to return an Image Element from it or fail.\n   */\n  BrowserCodeReader.prepareImageElement = function (imageSource) {\n    if (imageSource instanceof HTMLImageElement) {\n      return imageSource;\n    }\n    if (typeof imageSource === 'string') {\n      return BrowserCodeReader.getMediaElement(imageSource, 'img');\n    }\n    if (typeof imageSource === 'undefined') {\n      var imageElement = document.createElement('img');\n      imageElement.width = 200;\n      imageElement.height = 200;\n      return imageElement;\n    }\n    throw new Error('Couldn\\'t get imageElement from imageSource!');\n  };\n  /**\n   * Sets a HTMLVideoElement for scanning or creates a new one.\n   *\n   * @param videoElem The HTMLVideoElement to be set.\n   */\n  BrowserCodeReader.prepareVideoElement = function (videoElem) {\n    var videoElement = BrowserCodeReader.createVideoElement(videoElem);\n    // @todo the following lines should not always be done this way, should conditionally\n    // change according were we created the element or not\n    // Needed for iOS 11\n    videoElement.setAttribute('autoplay', 'true');\n    videoElement.setAttribute('muted', 'true');\n    videoElement.setAttribute('playsinline', 'true');\n    return videoElement;\n  };\n  /**\n   * Checks if and HTML image is loaded.\n   */\n  BrowserCodeReader.isImageLoaded = function (img) {\n    // During the onload event, IE correctly identifies any images that\n    // weren't downloaded as not complete. Others should too. Gecko-based\n    // browsers act like NS4 in that they report this incorrectly.\n    if (!img.complete) {\n      return false;\n    }\n    // However, they do have two very useful properties: naturalWidth and\n    // naturalHeight. These give the true size of the image. If it failed\n    // to load, either of these should be zero.\n    if (img.naturalWidth === 0) {\n      return false;\n    }\n    // No other way of checking: assume it’s ok.\n    return true;\n  };\n  /**\n   * Creates a binaryBitmap based in a canvas.\n   *\n   * @param canvas HTML canvas element containing the image source draw.\n   */\n  BrowserCodeReader.createBinaryBitmapFromCanvas = function (canvas) {\n    var luminanceSource = new HTMLCanvasElementLuminanceSource(canvas);\n    var hybridBinarizer = new HybridBinarizer(luminanceSource);\n    return new BinaryBitmap(hybridBinarizer);\n  };\n  /**\n   * Overwriting this allows you to manipulate the snapshot image in anyway you want before decode.\n   */\n  BrowserCodeReader.drawImageOnCanvas = function (canvasElementContext, srcElement) {\n    canvasElementContext.drawImage(srcElement, 0, 0);\n  };\n  BrowserCodeReader.getMediaElementDimensions = function (mediaElement) {\n    if (mediaElement instanceof HTMLVideoElement) {\n      return {\n        height: mediaElement.videoHeight,\n        width: mediaElement.videoWidth\n      };\n    }\n    if (mediaElement instanceof HTMLImageElement) {\n      return {\n        height: mediaElement.naturalHeight || mediaElement.height,\n        width: mediaElement.naturalWidth || mediaElement.width\n      };\n    }\n    throw new Error('Couldn\\'t find the Source\\'s dimensions!');\n  };\n  /**\n   * 🖌 Prepares the canvas for capture and scan frames.\n   */\n  BrowserCodeReader.createCaptureCanvas = function (mediaElement) {\n    if (!mediaElement) {\n      throw new ArgumentException('Cannot create a capture canvas without a media element.');\n    }\n    if (typeof document === 'undefined') {\n      throw new Error('The page \"Document\" is undefined, make sure you\\'re running in a browser.');\n    }\n    var canvasElement = document.createElement('canvas');\n    var _a = BrowserCodeReader.getMediaElementDimensions(mediaElement),\n      width = _a.width,\n      height = _a.height;\n    canvasElement.style.width = width + 'px';\n    canvasElement.style.height = height + 'px';\n    canvasElement.width = width;\n    canvasElement.height = height;\n    return canvasElement;\n  };\n  /**\n   * Just tries to play the video and logs any errors.\n   * The play call is only made is the video is not already playing.\n   */\n  BrowserCodeReader.tryPlayVideo = function (videoElement) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (videoElement === null || videoElement === void 0 ? void 0 : videoElement.ended) {\n              // tslint:disable-next-line:no-console\n              console.error('Trying to play video that has ended.');\n              return [2 /*return*/, false];\n            }\n            if (BrowserCodeReader.isVideoPlaying(videoElement)) {\n              // tslint:disable-next-line:no-console\n              console.warn('Trying to play video that is already playing.');\n              return [2 /*return*/, true];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, videoElement.play()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 3:\n            error_1 = _a.sent();\n            // tslint:disable-next-line:no-console\n            console.warn('It was not possible to play the video.', error_1);\n            return [2 /*return*/, false];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a canvas and draws the current image frame from the media element on it.\n   *\n   * @param mediaElement HTML media element to extract an image frame from.\n   */\n  BrowserCodeReader.createCanvasFromMediaElement = function (mediaElement) {\n    var canvas = BrowserCodeReader.createCaptureCanvas(mediaElement);\n    var ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Couldn\\'t find Canvas 2D Context.');\n    }\n    BrowserCodeReader.drawImageOnCanvas(ctx, mediaElement);\n    return canvas;\n  };\n  /**\n   * Creates a binaryBitmap based in some image source.\n   *\n   * @param mediaElement HTML element containing drawable image source.\n   */\n  BrowserCodeReader.createBinaryBitmapFromMediaElem = function (mediaElement) {\n    var canvas = BrowserCodeReader.createCanvasFromMediaElement(mediaElement);\n    return BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n  };\n  BrowserCodeReader.destroyImageElement = function (imageElement) {\n    imageElement.src = '';\n    imageElement.removeAttribute('src');\n    imageElement = undefined;\n  };\n  /**\n   * Lists all the available video input devices.\n   */\n  BrowserCodeReader.listVideoInputDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;\n      var e_2, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!hasNavigator()) {\n              throw new Error('Can\\'t enumerate devices, navigator is not present.');\n            }\n            if (!canEnumerateDevices()) {\n              throw new Error('Can\\'t enumerate devices, method not supported.');\n            }\n            return [4 /*yield*/, navigator.mediaDevices.enumerateDevices()];\n          case 1:\n            devices = _b.sent();\n            videoDevices = [];\n            try {\n              for (devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {\n                device = devices_1_1.value;\n                kind = device.kind === 'video' ? 'videoinput' : device.kind;\n                if (kind !== 'videoinput') {\n                  continue;\n                }\n                deviceId = device.deviceId || device.id;\n                label = device.label || \"Video device \".concat(videoDevices.length + 1);\n                groupId = device.groupId;\n                videoDevice = {\n                  deviceId: deviceId,\n                  label: label,\n                  kind: kind,\n                  groupId: groupId\n                };\n                videoDevices.push(videoDevice);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [2 /*return*/, videoDevices];\n        }\n      });\n    });\n  };\n  /**\n   * Let's you find a device using it's Id.\n   */\n  BrowserCodeReader.findDeviceById = function (deviceId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var devices;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, BrowserCodeReader.listVideoInputDevices()];\n          case 1:\n            devices = _a.sent();\n            if (!devices) {\n              return [2 /*return*/];\n            }\n\n            return [2 /*return*/, devices.find(function (x) {\n              return x.deviceId === deviceId;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Unbinds a HTML video src property.\n   */\n  BrowserCodeReader.cleanVideoSource = function (videoElement) {\n    if (!videoElement) {\n      return;\n    }\n    // forgets about that element 😢\n    try {\n      videoElement.srcObject = null;\n    } catch (err) {\n      videoElement.src = '';\n    }\n    if (videoElement) {\n      videoElement.removeAttribute('src');\n    }\n  };\n  /**\n   * Stops all media streams that are created.\n   */\n  BrowserCodeReader.releaseAllStreams = function () {\n    if (BrowserCodeReader.streamTracker.length !== 0) {\n      // tslint:disable-next-line:no-console\n      BrowserCodeReader.streamTracker.forEach(function (mediaStream) {\n        mediaStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      });\n    }\n    BrowserCodeReader.streamTracker = [];\n  };\n  /**\n   * Waits for a video to load and then hits play on it.\n   * To accomplish that, it binds listeners and callbacks to the video element.\n   *\n   * @param element The video element.\n   * @param callbackFn Callback invoked when the video is played.\n   */\n  BrowserCodeReader.playVideoOnLoadAsync = function (element, timeout) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPlaying;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, BrowserCodeReader.tryPlayVideo(element)];\n          case 1:\n            isPlaying = _a.sent();\n            if (isPlaying) {\n              return [2 /*return*/, true];\n            }\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              // waits 3 seconds or rejects.\n              var timeoutId = setTimeout(function () {\n                if (BrowserCodeReader.isVideoPlaying(element)) {\n                  // if video is playing then we had success, just ignore\n                  return;\n                }\n                reject(false);\n                element.removeEventListener('canplay', videoCanPlayListener);\n              }, timeout);\n              /**\n               * Should contain the current registered listener for video loaded-metadata,\n               * used to unregister that listener when needed.\n               */\n              var videoCanPlayListener = function () {\n                BrowserCodeReader.tryPlayVideo(element).then(function (hasPlayed) {\n                  clearTimeout(timeoutId);\n                  element.removeEventListener('canplay', videoCanPlayListener);\n                  resolve(hasPlayed);\n                });\n              };\n              // both should be unregistered after called\n              element.addEventListener('canplay', videoCanPlayListener);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the new stream and request a new decoding-with-delay.\n   *\n   * @param stream The stream to be shown in the video element.\n   * @param decodeFn A callback for the decode method.\n   */\n  BrowserCodeReader.attachStreamToVideo = function (stream, preview, previewPlayTimeout) {\n    if (previewPlayTimeout === void 0) {\n      previewPlayTimeout = 5000;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var videoElement;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            videoElement = BrowserCodeReader.prepareVideoElement(preview);\n            BrowserCodeReader.addVideoSource(videoElement, stream);\n            return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(videoElement, previewPlayTimeout)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, videoElement];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a Promise that resolves when the given image element loads.\n   */\n  BrowserCodeReader._waitImageLoad = function (element) {\n    return new Promise(function (resolve, reject) {\n      var timeout = 10000;\n      // waits 10 seconds or rejects.\n      var timeoutId = setTimeout(function () {\n        if (BrowserCodeReader.isImageLoaded(element)) {\n          // if video is playing then we had success, just ignore\n          return;\n        }\n        // removes the listener\n        element.removeEventListener('load', imageLoadedListener);\n        // rejects the load\n        reject();\n      }, timeout);\n      var imageLoadedListener = function () {\n        clearTimeout(timeoutId);\n        // removes the listener\n        element.removeEventListener('load', imageLoadedListener);\n        // resolves the load\n        resolve();\n      };\n      element.addEventListener('load', imageLoadedListener);\n    });\n  };\n  /**\n   * Checks if the `callbackFn` is defined, otherwise throws.\n   */\n  BrowserCodeReader.checkCallbackFnOrThrow = function (callbackFn) {\n    if (!callbackFn) {\n      throw new ArgumentException('`callbackFn` is a required parameter, you cannot capture results without it.');\n    }\n  };\n  /**\n   * Standard method to dispose a media stream object.\n   */\n  BrowserCodeReader.disposeMediaStream = function (stream) {\n    stream.getVideoTracks().forEach(function (x) {\n      return x.stop();\n    });\n    stream = undefined;\n  };\n  /**\n   * Gets the BinaryBitmap for ya! (and decodes it)\n   */\n  BrowserCodeReader.prototype.decode = function (element) {\n    // get binary bitmap for decode function\n    var canvas = BrowserCodeReader.createCanvasFromMediaElement(element);\n    return this.decodeFromCanvas(canvas);\n  };\n  /**\n   * Call the encapsulated readers decode\n   */\n  BrowserCodeReader.prototype.decodeBitmap = function (binaryBitmap) {\n    return this.reader.decode(binaryBitmap, this.hints);\n  };\n  /**\n   * Decodes some barcode from a canvas!\n   */\n  BrowserCodeReader.prototype.decodeFromCanvas = function (canvas) {\n    var binaryBitmap = BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n    return this.decodeBitmap(binaryBitmap);\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n  BrowserCodeReader.prototype.decodeFromImageElement = function (source) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!source) {\n              throw new ArgumentException('An image element must be provided.');\n            }\n            element = BrowserCodeReader.prepareImageElement(source);\n            return [4 /*yield*/, this._decodeOnLoadImage(element)];\n          case 1:\n            // onLoad will remove it's callback once done\n            // we do not need to dispose or destroy the image\n            // since it came from the user\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes an image from a URL.\n   */\n  BrowserCodeReader.prototype.decodeFromImageUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n            element = BrowserCodeReader.prepareImageElement();\n            // loads the image.\n            element.src = url;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, this.decodeFromImageElement(element)];\n          case 2:\n            // it waits the task so we can destroy the created image after\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            // we created this element, so we destroy it\n            BrowserCodeReader.destroyImageElement(element);\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Continuously tries to decode the barcode from a stream obtained from the given constraints\n   * while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [previewElem] the video element in page where to show the video while\n   *  decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in\n   *  which case no video will be shown.\n   */\n  BrowserCodeReader.prototype.decodeFromConstraints = function (constraints, previewElem, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            return [4 /*yield*/, this.getUserMedia(constraints)];\n          case 1:\n            stream = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.decodeFromStream(stream, previewElem, callbackFn)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n          case 4:\n            error_2 = _a.sent();\n            BrowserCodeReader.disposeMediaStream(stream);\n            throw error_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given constraints\n   * while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [preview] the video element in page where to show the video\n   *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n  BrowserCodeReader.prototype.decodeFromStream = function (stream, preview, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var timeout, video, finalizeCallback, originalControls, videoTracks, controls, isTorchAvailable, torchTrack_1, switchTorch_1, stop_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            timeout = this.options.tryPlayVideoTimeout;\n            return [4 /*yield*/, BrowserCodeReader.attachStreamToVideo(stream, preview, timeout)];\n          case 1:\n            video = _a.sent();\n            finalizeCallback = function () {\n              // stops video tracks and releases the stream reference\n              BrowserCodeReader.disposeMediaStream(stream);\n              // this video was just a preview, so in order\n              // to release the stream we gotta stop showing\n              // it (the stream) in the video element\n              BrowserCodeReader.cleanVideoSource(video);\n            };\n            originalControls = this.scan(video, callbackFn, finalizeCallback);\n            videoTracks = stream.getVideoTracks();\n            controls = __assign(__assign({}, originalControls), {\n              stop: function () {\n                originalControls.stop();\n              },\n              streamVideoConstraintsApply: function (constraints, trackFilter) {\n                return __awaiter(this, void 0, void 0, function () {\n                  var tracks, tracks_2, tracks_2_1, track, e_3_1;\n                  var e_3, _a;\n                  return __generator(this, function (_b) {\n                    switch (_b.label) {\n                      case 0:\n                        tracks = trackFilter ? videoTracks.filter(trackFilter) : videoTracks;\n                        _b.label = 1;\n                      case 1:\n                        _b.trys.push([1, 6, 7, 8]);\n                        tracks_2 = __values(tracks), tracks_2_1 = tracks_2.next();\n                        _b.label = 2;\n                      case 2:\n                        if (!!tracks_2_1.done) return [3 /*break*/, 5];\n                        track = tracks_2_1.value;\n                        return [4 /*yield*/, track.applyConstraints(constraints)];\n                      case 3:\n                        _b.sent();\n                        _b.label = 4;\n                      case 4:\n                        tracks_2_1 = tracks_2.next();\n                        return [3 /*break*/, 2];\n                      case 5:\n                        return [3 /*break*/, 8];\n                      case 6:\n                        e_3_1 = _b.sent();\n                        e_3 = {\n                          error: e_3_1\n                        };\n                        return [3 /*break*/, 8];\n                      case 7:\n                        try {\n                          if (tracks_2_1 && !tracks_2_1.done && (_a = tracks_2.return)) _a.call(tracks_2);\n                        } finally {\n                          if (e_3) throw e_3.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 8:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              },\n\n              streamVideoConstraintsGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getConstraints();\n              },\n              streamVideoSettingsGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getSettings();\n              },\n              streamVideoCapabilitiesGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getCapabilities();\n              }\n            });\n            isTorchAvailable = BrowserCodeReader.mediaStreamIsTorchCompatible(stream);\n            if (isTorchAvailable) {\n              torchTrack_1 = videoTracks === null || videoTracks === void 0 ? void 0 : videoTracks.find(function (t) {\n                return BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(t);\n              });\n              switchTorch_1 = function (onOff) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, BrowserCodeReader.mediaStreamSetTorch(torchTrack_1, onOff)];\n                      case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              };\n\n              controls.switchTorch = switchTorch_1;\n              stop_1 = function () {\n                originalControls.stop();\n                switchTorch_1(false);\n              };\n              controls.stop = stop_1;\n            }\n            return [2 /*return*/, controls];\n        }\n      });\n    });\n  };\n  /**\n   * Continuously tries to decode the barcode from the device specified by device while showing\n   * the video in the specified video element.\n   *\n   * @param {string|null} [deviceId] the id of one of the devices obtained after calling\n   *  getVideoInputDevices. Can be undefined, in this case it will decode from one of the\n   *  available devices, preferring the main camera (environment facing) if available.\n   * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video\n   *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n  BrowserCodeReader.prototype.decodeFromVideoDevice = function (deviceId, previewElem, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var videoConstraints, constraints;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            if (!deviceId) {\n              videoConstraints = {\n                facingMode: 'environment'\n              };\n            } else {\n              videoConstraints = {\n                deviceId: {\n                  exact: deviceId\n                }\n              };\n            }\n            constraints = {\n              video: videoConstraints\n            };\n            return [4 /*yield*/, this.decodeFromConstraints(constraints, previewElem, callbackFn)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n  BrowserCodeReader.prototype.decodeFromVideoElement = function (source, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, timeout;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            if (!source) {\n              throw new ArgumentException('A video element must be provided.');\n            }\n            element = BrowserCodeReader.prepareVideoElement(source);\n            timeout = this.options.tryPlayVideoTimeout;\n            // plays the video\n            return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n          case 1:\n            // plays the video\n            _a.sent();\n            // starts decoding after played the video\n            return [2 /*return*/, this.scan(element, callbackFn)];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes a video from a URL until it ends.\n   */\n  BrowserCodeReader.prototype.decodeFromVideoUrl = function (url, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, finalizeCallback, timeout, controls;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n            element = BrowserCodeReader.prepareVideoElement();\n            // starts loading the video\n            element.src = url;\n            finalizeCallback = function () {\n              // dispose created video element\n              BrowserCodeReader.cleanVideoSource(element);\n            };\n            timeout = this.options.tryPlayVideoTimeout;\n            // plays the video\n            return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n          case 1:\n            // plays the video\n            _a.sent();\n            controls = this.scan(element, callbackFn, finalizeCallback);\n            return [2 /*return*/, controls];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given\n   * constraints while showing the video in the specified video element.\n   *\n   * @param constraints the media stream constraints to get s valid media stream to decode from\n   * @param videoSource the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   *  The decoding result.\n   */\n  BrowserCodeReader.prototype.decodeOnceFromConstraints = function (constraints, videoSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getUserMedia(constraints)];\n          case 1:\n            stream = _a.sent();\n            return [4 /*yield*/, this.decodeOnceFromStream(stream, videoSource)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given\n   * constraints while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n  BrowserCodeReader.prototype.decodeOnceFromStream = function (stream, preview) {\n    return __awaiter(this, void 0, void 0, function () {\n      var receivedPreview, video, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            receivedPreview = Boolean(preview);\n            return [4 /*yield*/, BrowserCodeReader.attachStreamToVideo(stream, preview)];\n          case 1:\n            video = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2,, 4, 5]);\n            return [4 /*yield*/, this.scanOneResult(video)];\n          case 3:\n            result = _a.sent();\n            return [2 /*return*/, result];\n          case 4:\n            if (!receivedPreview) {\n              BrowserCodeReader.cleanVideoSource(video);\n            }\n            return [7 /*endfinally*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from the device specified by deviceId\n   * while showing the video in the specified video element.\n   *\n   * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices.\n   *  Can be undefined, in this case it will decode from one of the available devices,\n   *  preferring the main camera (environment facing) if available.\n   * @param videoSource the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n  BrowserCodeReader.prototype.decodeOnceFromVideoDevice = function (deviceId, videoSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var videoConstraints, constraints;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!deviceId) {\n              videoConstraints = {\n                facingMode: 'environment'\n              };\n            } else {\n              videoConstraints = {\n                deviceId: {\n                  exact: deviceId\n                }\n              };\n            }\n            constraints = {\n              video: videoConstraints\n            };\n            return [4 /*yield*/, this.decodeOnceFromConstraints(constraints, videoSource)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n  BrowserCodeReader.prototype.decodeOnceFromVideoElement = function (source) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, timeout;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!source) {\n              throw new ArgumentException('A video element must be provided.');\n            }\n            element = BrowserCodeReader.prepareVideoElement(source);\n            timeout = this.options.tryPlayVideoTimeout;\n            // plays the video\n            return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n          case 1:\n            // plays the video\n            _a.sent();\n            return [4 /*yield*/, this.scanOneResult(element)];\n          case 2:\n            // starts decoding after played the video\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes a video from a URL.\n   */\n  BrowserCodeReader.prototype.decodeOnceFromVideoUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, task;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n            element = BrowserCodeReader.prepareVideoElement();\n            // starts loading the video\n            element.src = url;\n            task = this.decodeOnceFromVideoElement(element);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, task];\n          case 2:\n            // it waits the task so we can destroy the created image after\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            // we created this element, so we destroy it\n            BrowserCodeReader.cleanVideoSource(element);\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Tries to decode from the video input until it finds some value.\n   */\n  BrowserCodeReader.prototype.scanOneResult = function (element, retryIfNotFound, retryIfChecksumError, retryIfFormatError) {\n    var _this = this;\n    if (retryIfNotFound === void 0) {\n      retryIfNotFound = true;\n    }\n    if (retryIfChecksumError === void 0) {\n      retryIfChecksumError = true;\n    }\n    if (retryIfFormatError === void 0) {\n      retryIfFormatError = true;\n    }\n    return new Promise(function (resolve, reject) {\n      // reuses the scan API, but returns at the first successful result\n      _this.scan(element, function (result, error, controls) {\n        if (result) {\n          // good result, returning\n          resolve(result);\n          controls.stop();\n          return;\n        }\n        if (error) {\n          // checks if it should retry\n          if (error instanceof NotFoundException && retryIfNotFound) {\n            return;\n          }\n          if (error instanceof ChecksumException && retryIfChecksumError) {\n            return;\n          }\n          if (error instanceof FormatException && retryIfFormatError) {\n            return;\n          }\n          // not re-trying\n          controls.stop(); // stops scan loop\n          reject(error); // returns the error\n        }\n      });\n    });\n  };\n  /**\n   * Continuously decodes from video input.\n   *\n   * @param element HTML element to scan/decode from. It will not be disposed or destroyed.\n   * @param callbackFn Called after every scan attempt, being it successful or errored.\n   * @param finalizeCallback Called after scan process reaches the end or stop is called.\n   */\n  BrowserCodeReader.prototype.scan = function (element, callbackFn, finalizeCallback) {\n    var _this = this;\n    BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n    /**\n     * The HTML canvas element, used to draw the video or image's frame for decoding.\n     */\n    var captureCanvas = BrowserCodeReader.createCaptureCanvas(element);\n    /**\n     * The HTML canvas element context.\n     */\n    var captureCanvasContext = captureCanvas.getContext('2d');\n    // cannot proceed w/o this\n    if (!captureCanvasContext) {\n      throw new Error('Couldn\\'t create canvas for visual element scan.');\n    }\n    var disposeCanvas = function () {\n      captureCanvasContext = undefined;\n      captureCanvas = undefined;\n    };\n    var stopScan = false;\n    var lastTimeoutId;\n    // can be called to break the scan loop\n    var stop = function () {\n      stopScan = true;\n      clearTimeout(lastTimeoutId);\n      disposeCanvas();\n      if (finalizeCallback) {\n        finalizeCallback();\n      }\n    };\n    // created for extensibility\n    var controls = {\n      stop: stop\n    };\n    // this async loop allows infinite (or almost? maybe) scans\n    var loop = function () {\n      if (stopScan) {\n        // no need to clear timeouts as none was create yet in this scope.\n        return;\n      }\n      try {\n        BrowserCodeReader.drawImageOnCanvas(captureCanvasContext, element);\n        var result = _this.decodeFromCanvas(captureCanvas);\n        callbackFn(result, undefined, controls);\n        lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanSuccess);\n      } catch (error) {\n        callbackFn(undefined, error, controls);\n        var isChecksumError = error instanceof ChecksumException;\n        var isFormatError = error instanceof FormatException;\n        var isNotFound = error instanceof NotFoundException;\n        if (isChecksumError || isFormatError || isNotFound) {\n          // trying again\n          lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanAttempts);\n          return;\n        }\n        // not trying again\n        disposeCanvas();\n        if (finalizeCallback) {\n          finalizeCallback(error);\n        }\n      }\n    };\n    // starts the async loop\n    loop();\n    return controls;\n  };\n  /**\n   * Waits for the image to load and then tries to decode it.\n   */\n  BrowserCodeReader.prototype._decodeOnLoadImage = function (element) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isImageLoaded;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            isImageLoaded = BrowserCodeReader.isImageLoaded(element);\n            if (!!isImageLoaded) return [3 /*break*/, 2];\n            return [4 /*yield*/, BrowserCodeReader._waitImageLoad(element)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, this.decode(element)];\n        }\n      });\n    });\n  };\n  /**\n   * Get MediaStream from browser to be used.\n   * @param constraints constraints the media stream constraints to get s valid media stream to decode from.\n   * @private For private use.\n   */\n  BrowserCodeReader.prototype.getUserMedia = function (constraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraints)];\n          case 1:\n            stream = _a.sent();\n            BrowserCodeReader.streamTracker.push(stream);\n            return [2 /*return*/, stream];\n        }\n      });\n    });\n  };\n  /**\n   * Keeps track to created media streams.\n   * @private there is no need this array to be accessible from outside.\n   */\n  BrowserCodeReader.streamTracker = [];\n  return BrowserCodeReader;\n}();\nexport { BrowserCodeReader };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","ArgumentException","BinaryBitmap","ChecksumException","DecodeHintType","FormatException","HybridBinarizer","NotFoundException","HTMLCanvasElementLuminanceSource","canEnumerateDevices","hasNavigator","defaultOptions","delayBetweenScanAttempts","delayBetweenScanSuccess","tryPlayVideoTimeout","BrowserCodeReader","reader","hints","options","Map","defineProperty","set","formats","POSSIBLE_FORMATS","enumerable","configurable","addVideoSource","videoElement","stream","srcObject","err","console","error","mediaStreamSetTorch","track","onOff","_a","applyConstraints","advanced","fillLightMode","torch","mediaStreamIsTorchCompatible","params","e_1","tracks","getVideoTracks","tracks_1","tracks_1_1","mediaStreamIsTorchCompatibleTrack","e_1_1","return","capabilities","getCapabilities","warn","isVideoPlaying","video","currentTime","paused","readyState","getMediaElement","mediaElementId","type","mediaElement","document","getElementById","concat","nodeName","toLowerCase","createVideoElement","videoThingy","HTMLVideoElement","createElement","width","height","Error","prepareImageElement","imageSource","HTMLImageElement","imageElement","prepareVideoElement","videoElem","setAttribute","isImageLoaded","img","complete","naturalWidth","createBinaryBitmapFromCanvas","canvas","luminanceSource","hybridBinarizer","drawImageOnCanvas","canvasElementContext","srcElement","drawImage","getMediaElementDimensions","videoHeight","videoWidth","naturalHeight","createCaptureCanvas","canvasElement","style","tryPlayVideo","error_1","ended","play","createCanvasFromMediaElement","ctx","getContext","createBinaryBitmapFromMediaElem","destroyImageElement","src","removeAttribute","undefined","listVideoInputDevices","devices","videoDevices","devices_1","devices_1_1","device","kind","deviceId","groupId","videoDevice","e_2","_b","navigator","mediaDevices","enumerateDevices","id","e_2_1","findDeviceById","find","x","cleanVideoSource","releaseAllStreams","streamTracker","forEach","mediaStream","getTracks","stop","playVideoOnLoadAsync","element","timeout","isPlaying","timeoutId","setTimeout","removeEventListener","videoCanPlayListener","hasPlayed","clearTimeout","addEventListener","attachStreamToVideo","preview","previewPlayTimeout","_waitImageLoad","imageLoadedListener","checkCallbackFnOrThrow","callbackFn","disposeMediaStream","decode","decodeFromCanvas","decodeBitmap","binaryBitmap","decodeFromImageElement","source","_decodeOnLoadImage","decodeFromImageUrl","url","decodeFromConstraints","constraints","previewElem","error_2","getUserMedia","decodeFromStream","finalizeCallback","originalControls","videoTracks","controls","isTorchAvailable","torchTrack_1","switchTorch_1","stop_1","_this","scan","streamVideoConstraintsApply","trackFilter","tracks_2","tracks_2_1","e_3_1","e_3","filter","streamVideoConstraintsGet","getConstraints","streamVideoSettingsGet","getSettings","streamVideoCapabilitiesGet","switchTorch","decodeFromVideoDevice","videoConstraints","facingMode","exact","decodeFromVideoElement","decodeFromVideoUrl","decodeOnceFromConstraints","videoSource","decodeOnceFromStream","receivedPreview","Boolean","scanOneResult","decodeOnceFromVideoDevice","decodeOnceFromVideoElement","decodeOnceFromVideoUrl","task","retryIfNotFound","retryIfChecksumError","retryIfFormatError","captureCanvas","captureCanvasContext","disposeCanvas","stopScan","lastTimeoutId","loop","isChecksumError","isFormatError","isNotFound"],"sources":["E:/GME/Angular/GME-Angular/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ArgumentException, BinaryBitmap, ChecksumException, DecodeHintType, FormatException, HybridBinarizer, NotFoundException, } from '@zxing/library';\nimport { HTMLCanvasElementLuminanceSource } from '../common/HTMLCanvasElementLuminanceSource';\nimport { canEnumerateDevices, hasNavigator } from '../common/navigator-utils';\nvar defaultOptions = {\n    delayBetweenScanAttempts: 500,\n    delayBetweenScanSuccess: 500,\n    tryPlayVideoTimeout: 5000,\n};\n/**\n * Base class for browser code reader.\n */\nvar BrowserCodeReader = /** @class */ (function () {\n    /**\n     * Creates an instance of BrowserCodeReader.\n     * @param {Reader} reader The reader instance to decode the barcode\n     * @param hints Holds the hints the user sets for the Reader.\n     */\n    function BrowserCodeReader(reader, hints, options) {\n        if (hints === void 0) { hints = new Map(); }\n        if (options === void 0) { options = {}; }\n        this.reader = reader;\n        this.hints = hints;\n        this.options = __assign(__assign({}, defaultOptions), options);\n    }\n    Object.defineProperty(BrowserCodeReader.prototype, \"possibleFormats\", {\n        /**\n         * Allows to change the possible formats the decoder should\n         * search for while scanning some image. Useful for changing\n         * the possible formats during BrowserCodeReader::scan.\n         */\n        set: function (formats) {\n            this.hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Defines what the videoElement src will be.\n     *\n     * @param videoElement\n     * @param stream The stream to be added as a source.\n     */\n    BrowserCodeReader.addVideoSource = function (videoElement, stream) {\n        // Older browsers may not have `srcObject`\n        try {\n            // @note Throws Exception if interrupted by a new loaded request\n            videoElement.srcObject = stream;\n        }\n        catch (err) {\n            console.error(\"got interrupted by new loading request\");\n        }\n    };\n    /**\n     * Enables or disables the torch in a media stream.\n     *\n     * @experimental This doesn't work across all browsers and is still a Draft.\n     */\n    BrowserCodeReader.mediaStreamSetTorch = function (track, onOff) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, track.applyConstraints({\n                            advanced: [{\n                                    fillLightMode: onOff ? 'flash' : 'off',\n                                    torch: onOff ? true : false,\n                                }],\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if the stream has torch support.\n     */\n    BrowserCodeReader.mediaStreamIsTorchCompatible = function (params) {\n        var e_1, _a;\n        var tracks = params.getVideoTracks();\n        try {\n            for (var tracks_1 = __values(tracks), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()) {\n                var track = tracks_1_1.value;\n                if (BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(track)) {\n                    return true;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (tracks_1_1 && !tracks_1_1.done && (_a = tracks_1.return)) _a.call(tracks_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return false;\n    };\n    /**\n     *\n     * @param track The media stream track that will be checked for compatibility.\n     */\n    BrowserCodeReader.mediaStreamIsTorchCompatibleTrack = function (track) {\n        try {\n            var capabilities = track.getCapabilities();\n            return 'torch' in capabilities;\n        }\n        catch (err) {\n            // some browsers may not be compatible with ImageCapture\n            // so we are ignoring this for now.\n            // tslint:disable-next-line:no-console\n            console.error(err);\n            // tslint:disable-next-line:no-console\n            console.warn('Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.');\n            return false;\n        }\n    };\n    /**\n     * Checks if the given video element is currently playing.\n     */\n    BrowserCodeReader.isVideoPlaying = function (video) {\n        return video.currentTime > 0 && !video.paused && video.readyState > 2;\n    };\n    /**\n     * Searches and validates a media element.\n     */\n    BrowserCodeReader.getMediaElement = function (mediaElementId, type) {\n        var mediaElement = document.getElementById(mediaElementId);\n        if (!mediaElement) {\n            throw new ArgumentException(\"element with id '\".concat(mediaElementId, \"' not found\"));\n        }\n        if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\n            throw new ArgumentException(\"element with id '\".concat(mediaElementId, \"' must be an \").concat(type, \" element\"));\n        }\n        return mediaElement;\n    };\n    /**\n     * Receives a source and makes sure to return a Video Element from it or fail.\n     */\n    BrowserCodeReader.createVideoElement = function (videoThingy) {\n        if (videoThingy instanceof HTMLVideoElement) {\n            return videoThingy;\n        }\n        if (typeof videoThingy === 'string') {\n            return BrowserCodeReader.getMediaElement(videoThingy, 'video');\n        }\n        if (!videoThingy && typeof document !== 'undefined') {\n            var videoElement = document.createElement('video');\n            videoElement.width = 200;\n            videoElement.height = 200;\n            return videoElement;\n        }\n        throw new Error('Couldn\\'t get videoElement from videoSource!');\n    };\n    /**\n     * Receives a source and makes sure to return an Image Element from it or fail.\n     */\n    BrowserCodeReader.prepareImageElement = function (imageSource) {\n        if (imageSource instanceof HTMLImageElement) {\n            return imageSource;\n        }\n        if (typeof imageSource === 'string') {\n            return BrowserCodeReader.getMediaElement(imageSource, 'img');\n        }\n        if (typeof imageSource === 'undefined') {\n            var imageElement = document.createElement('img');\n            imageElement.width = 200;\n            imageElement.height = 200;\n            return imageElement;\n        }\n        throw new Error('Couldn\\'t get imageElement from imageSource!');\n    };\n    /**\n     * Sets a HTMLVideoElement for scanning or creates a new one.\n     *\n     * @param videoElem The HTMLVideoElement to be set.\n     */\n    BrowserCodeReader.prepareVideoElement = function (videoElem) {\n        var videoElement = BrowserCodeReader.createVideoElement(videoElem);\n        // @todo the following lines should not always be done this way, should conditionally\n        // change according were we created the element or not\n        // Needed for iOS 11\n        videoElement.setAttribute('autoplay', 'true');\n        videoElement.setAttribute('muted', 'true');\n        videoElement.setAttribute('playsinline', 'true');\n        return videoElement;\n    };\n    /**\n     * Checks if and HTML image is loaded.\n     */\n    BrowserCodeReader.isImageLoaded = function (img) {\n        // During the onload event, IE correctly identifies any images that\n        // weren't downloaded as not complete. Others should too. Gecko-based\n        // browsers act like NS4 in that they report this incorrectly.\n        if (!img.complete) {\n            return false;\n        }\n        // However, they do have two very useful properties: naturalWidth and\n        // naturalHeight. These give the true size of the image. If it failed\n        // to load, either of these should be zero.\n        if (img.naturalWidth === 0) {\n            return false;\n        }\n        // No other way of checking: assume it’s ok.\n        return true;\n    };\n    /**\n     * Creates a binaryBitmap based in a canvas.\n     *\n     * @param canvas HTML canvas element containing the image source draw.\n     */\n    BrowserCodeReader.createBinaryBitmapFromCanvas = function (canvas) {\n        var luminanceSource = new HTMLCanvasElementLuminanceSource(canvas);\n        var hybridBinarizer = new HybridBinarizer(luminanceSource);\n        return new BinaryBitmap(hybridBinarizer);\n    };\n    /**\n     * Overwriting this allows you to manipulate the snapshot image in anyway you want before decode.\n     */\n    BrowserCodeReader.drawImageOnCanvas = function (canvasElementContext, srcElement) {\n        canvasElementContext.drawImage(srcElement, 0, 0);\n    };\n    BrowserCodeReader.getMediaElementDimensions = function (mediaElement) {\n        if (mediaElement instanceof HTMLVideoElement) {\n            return {\n                height: mediaElement.videoHeight,\n                width: mediaElement.videoWidth,\n            };\n        }\n        if (mediaElement instanceof HTMLImageElement) {\n            return {\n                height: mediaElement.naturalHeight || mediaElement.height,\n                width: mediaElement.naturalWidth || mediaElement.width,\n            };\n        }\n        throw new Error('Couldn\\'t find the Source\\'s dimensions!');\n    };\n    /**\n     * 🖌 Prepares the canvas for capture and scan frames.\n     */\n    BrowserCodeReader.createCaptureCanvas = function (mediaElement) {\n        if (!mediaElement) {\n            throw new ArgumentException('Cannot create a capture canvas without a media element.');\n        }\n        if (typeof document === 'undefined') {\n            throw new Error('The page \"Document\" is undefined, make sure you\\'re running in a browser.');\n        }\n        var canvasElement = document.createElement('canvas');\n        var _a = BrowserCodeReader.getMediaElementDimensions(mediaElement), width = _a.width, height = _a.height;\n        canvasElement.style.width = width + 'px';\n        canvasElement.style.height = height + 'px';\n        canvasElement.width = width;\n        canvasElement.height = height;\n        return canvasElement;\n    };\n    /**\n     * Just tries to play the video and logs any errors.\n     * The play call is only made is the video is not already playing.\n     */\n    BrowserCodeReader.tryPlayVideo = function (videoElement) {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (videoElement === null || videoElement === void 0 ? void 0 : videoElement.ended) {\n                            // tslint:disable-next-line:no-console\n                            console.error('Trying to play video that has ended.');\n                            return [2 /*return*/, false];\n                        }\n                        if (BrowserCodeReader.isVideoPlaying(videoElement)) {\n                            // tslint:disable-next-line:no-console\n                            console.warn('Trying to play video that is already playing.');\n                            return [2 /*return*/, true];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, videoElement.play()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 3:\n                        error_1 = _a.sent();\n                        // tslint:disable-next-line:no-console\n                        console.warn('It was not possible to play the video.', error_1);\n                        return [2 /*return*/, false];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a canvas and draws the current image frame from the media element on it.\n     *\n     * @param mediaElement HTML media element to extract an image frame from.\n     */\n    BrowserCodeReader.createCanvasFromMediaElement = function (mediaElement) {\n        var canvas = BrowserCodeReader.createCaptureCanvas(mediaElement);\n        var ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('Couldn\\'t find Canvas 2D Context.');\n        }\n        BrowserCodeReader.drawImageOnCanvas(ctx, mediaElement);\n        return canvas;\n    };\n    /**\n     * Creates a binaryBitmap based in some image source.\n     *\n     * @param mediaElement HTML element containing drawable image source.\n     */\n    BrowserCodeReader.createBinaryBitmapFromMediaElem = function (mediaElement) {\n        var canvas = BrowserCodeReader.createCanvasFromMediaElement(mediaElement);\n        return BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n    };\n    BrowserCodeReader.destroyImageElement = function (imageElement) {\n        imageElement.src = '';\n        imageElement.removeAttribute('src');\n        imageElement = undefined;\n    };\n    /**\n     * Lists all the available video input devices.\n     */\n    BrowserCodeReader.listVideoInputDevices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;\n            var e_2, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!hasNavigator()) {\n                            throw new Error('Can\\'t enumerate devices, navigator is not present.');\n                        }\n                        if (!canEnumerateDevices()) {\n                            throw new Error('Can\\'t enumerate devices, method not supported.');\n                        }\n                        return [4 /*yield*/, navigator.mediaDevices.enumerateDevices()];\n                    case 1:\n                        devices = _b.sent();\n                        videoDevices = [];\n                        try {\n                            for (devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {\n                                device = devices_1_1.value;\n                                kind = device.kind === 'video' ? 'videoinput' : device.kind;\n                                if (kind !== 'videoinput') {\n                                    continue;\n                                }\n                                deviceId = device.deviceId || device.id;\n                                label = device.label || \"Video device \".concat(videoDevices.length + 1);\n                                groupId = device.groupId;\n                                videoDevice = { deviceId: deviceId, label: label, kind: kind, groupId: groupId };\n                                videoDevices.push(videoDevice);\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        return [2 /*return*/, videoDevices];\n                }\n            });\n        });\n    };\n    /**\n     * Let's you find a device using it's Id.\n     */\n    BrowserCodeReader.findDeviceById = function (deviceId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var devices;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, BrowserCodeReader.listVideoInputDevices()];\n                    case 1:\n                        devices = _a.sent();\n                        if (!devices) {\n                            return [2 /*return*/];\n                        }\n                        return [2 /*return*/, devices.find(function (x) { return x.deviceId === deviceId; })];\n                }\n            });\n        });\n    };\n    /**\n     * Unbinds a HTML video src property.\n     */\n    BrowserCodeReader.cleanVideoSource = function (videoElement) {\n        if (!videoElement) {\n            return;\n        }\n        // forgets about that element 😢\n        try {\n            videoElement.srcObject = null;\n        }\n        catch (err) {\n            videoElement.src = '';\n        }\n        if (videoElement) {\n            videoElement.removeAttribute('src');\n        }\n    };\n    /**\n     * Stops all media streams that are created.\n     */\n    BrowserCodeReader.releaseAllStreams = function () {\n        if (BrowserCodeReader.streamTracker.length !== 0) {\n            // tslint:disable-next-line:no-console\n            BrowserCodeReader.streamTracker.forEach(function (mediaStream) {\n                mediaStream.getTracks().forEach(function (track) { return track.stop(); });\n            });\n        }\n        BrowserCodeReader.streamTracker = [];\n    };\n    /**\n     * Waits for a video to load and then hits play on it.\n     * To accomplish that, it binds listeners and callbacks to the video element.\n     *\n     * @param element The video element.\n     * @param callbackFn Callback invoked when the video is played.\n     */\n    BrowserCodeReader.playVideoOnLoadAsync = function (element, timeout) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isPlaying;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, BrowserCodeReader.tryPlayVideo(element)];\n                    case 1:\n                        isPlaying = _a.sent();\n                        if (isPlaying) {\n                            return [2 /*return*/, true];\n                        }\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                // waits 3 seconds or rejects.\n                                var timeoutId = setTimeout(function () {\n                                    if (BrowserCodeReader.isVideoPlaying(element)) {\n                                        // if video is playing then we had success, just ignore\n                                        return;\n                                    }\n                                    reject(false);\n                                    element.removeEventListener('canplay', videoCanPlayListener);\n                                }, timeout);\n                                /**\n                                 * Should contain the current registered listener for video loaded-metadata,\n                                 * used to unregister that listener when needed.\n                                 */\n                                var videoCanPlayListener = function () {\n                                    BrowserCodeReader.tryPlayVideo(element).then(function (hasPlayed) {\n                                        clearTimeout(timeoutId);\n                                        element.removeEventListener('canplay', videoCanPlayListener);\n                                        resolve(hasPlayed);\n                                    });\n                                };\n                                // both should be unregistered after called\n                                element.addEventListener('canplay', videoCanPlayListener);\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Sets the new stream and request a new decoding-with-delay.\n     *\n     * @param stream The stream to be shown in the video element.\n     * @param decodeFn A callback for the decode method.\n     */\n    BrowserCodeReader.attachStreamToVideo = function (stream, preview, previewPlayTimeout) {\n        if (previewPlayTimeout === void 0) { previewPlayTimeout = 5000; }\n        return __awaiter(this, void 0, void 0, function () {\n            var videoElement;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        videoElement = BrowserCodeReader.prepareVideoElement(preview);\n                        BrowserCodeReader.addVideoSource(videoElement, stream);\n                        return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(videoElement, previewPlayTimeout)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, videoElement];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a Promise that resolves when the given image element loads.\n     */\n    BrowserCodeReader._waitImageLoad = function (element) {\n        return new Promise(function (resolve, reject) {\n            var timeout = 10000;\n            // waits 10 seconds or rejects.\n            var timeoutId = setTimeout(function () {\n                if (BrowserCodeReader.isImageLoaded(element)) {\n                    // if video is playing then we had success, just ignore\n                    return;\n                }\n                // removes the listener\n                element.removeEventListener('load', imageLoadedListener);\n                // rejects the load\n                reject();\n            }, timeout);\n            var imageLoadedListener = function () {\n                clearTimeout(timeoutId);\n                // removes the listener\n                element.removeEventListener('load', imageLoadedListener);\n                // resolves the load\n                resolve();\n            };\n            element.addEventListener('load', imageLoadedListener);\n        });\n    };\n    /**\n     * Checks if the `callbackFn` is defined, otherwise throws.\n     */\n    BrowserCodeReader.checkCallbackFnOrThrow = function (callbackFn) {\n        if (!callbackFn) {\n            throw new ArgumentException('`callbackFn` is a required parameter, you cannot capture results without it.');\n        }\n    };\n    /**\n     * Standard method to dispose a media stream object.\n     */\n    BrowserCodeReader.disposeMediaStream = function (stream) {\n        stream.getVideoTracks().forEach(function (x) { return x.stop(); });\n        stream = undefined;\n    };\n    /**\n     * Gets the BinaryBitmap for ya! (and decodes it)\n     */\n    BrowserCodeReader.prototype.decode = function (element) {\n        // get binary bitmap for decode function\n        var canvas = BrowserCodeReader.createCanvasFromMediaElement(element);\n        return this.decodeFromCanvas(canvas);\n    };\n    /**\n     * Call the encapsulated readers decode\n     */\n    BrowserCodeReader.prototype.decodeBitmap = function (binaryBitmap) {\n        return this.reader.decode(binaryBitmap, this.hints);\n    };\n    /**\n     * Decodes some barcode from a canvas!\n     */\n    BrowserCodeReader.prototype.decodeFromCanvas = function (canvas) {\n        var binaryBitmap = BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n        return this.decodeBitmap(binaryBitmap);\n    };\n    /**\n     * Decodes something from an image HTML element.\n     */\n    BrowserCodeReader.prototype.decodeFromImageElement = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!source) {\n                            throw new ArgumentException('An image element must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareImageElement(source);\n                        return [4 /*yield*/, this._decodeOnLoadImage(element)];\n                    case 1: \n                    // onLoad will remove it's callback once done\n                    // we do not need to dispose or destroy the image\n                    // since it came from the user\n                    return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Decodes an image from a URL.\n     */\n    BrowserCodeReader.prototype.decodeFromImageUrl = function (url) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!url) {\n                            throw new ArgumentException('An URL must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareImageElement();\n                        // loads the image.\n                        element.src = url;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, this.decodeFromImageElement(element)];\n                    case 2: \n                    // it waits the task so we can destroy the created image after\n                    return [2 /*return*/, _a.sent()];\n                    case 3:\n                        // we created this element, so we destroy it\n                        BrowserCodeReader.destroyImageElement(element);\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Continuously tries to decode the barcode from a stream obtained from the given constraints\n     * while showing the video in the specified video element.\n     *\n     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n     * @param {string|HTMLVideoElement} [previewElem] the video element in page where to show the video while\n     *  decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in\n     *  which case no video will be shown.\n     */\n    BrowserCodeReader.prototype.decodeFromConstraints = function (constraints, previewElem, callbackFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stream, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n                        return [4 /*yield*/, this.getUserMedia(constraints)];\n                    case 1:\n                        stream = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.decodeFromStream(stream, previewElem, callbackFn)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        error_2 = _a.sent();\n                        BrowserCodeReader.disposeMediaStream(stream);\n                        throw error_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * In one attempt, tries to decode the barcode from a stream obtained from the given constraints\n     * while showing the video in the specified video element.\n     *\n     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n     * @param {string|HTMLVideoElement} [preview] the video element in page where to show the video\n     *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n     *  in which case no video will be shown.\n     */\n    BrowserCodeReader.prototype.decodeFromStream = function (stream, preview, callbackFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timeout, video, finalizeCallback, originalControls, videoTracks, controls, isTorchAvailable, torchTrack_1, switchTorch_1, stop_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n                        timeout = this.options.tryPlayVideoTimeout;\n                        return [4 /*yield*/, BrowserCodeReader.attachStreamToVideo(stream, preview, timeout)];\n                    case 1:\n                        video = _a.sent();\n                        finalizeCallback = function () {\n                            // stops video tracks and releases the stream reference\n                            BrowserCodeReader.disposeMediaStream(stream);\n                            // this video was just a preview, so in order\n                            // to release the stream we gotta stop showing\n                            // it (the stream) in the video element\n                            BrowserCodeReader.cleanVideoSource(video);\n                        };\n                        originalControls = this.scan(video, callbackFn, finalizeCallback);\n                        videoTracks = stream.getVideoTracks();\n                        controls = __assign(__assign({}, originalControls), { stop: function () {\n                                originalControls.stop();\n                            }, streamVideoConstraintsApply: function (constraints, trackFilter) {\n                                return __awaiter(this, void 0, void 0, function () {\n                                    var tracks, tracks_2, tracks_2_1, track, e_3_1;\n                                    var e_3, _a;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                tracks = trackFilter ? videoTracks.filter(trackFilter) : videoTracks;\n                                                _b.label = 1;\n                                            case 1:\n                                                _b.trys.push([1, 6, 7, 8]);\n                                                tracks_2 = __values(tracks), tracks_2_1 = tracks_2.next();\n                                                _b.label = 2;\n                                            case 2:\n                                                if (!!tracks_2_1.done) return [3 /*break*/, 5];\n                                                track = tracks_2_1.value;\n                                                return [4 /*yield*/, track.applyConstraints(constraints)];\n                                            case 3:\n                                                _b.sent();\n                                                _b.label = 4;\n                                            case 4:\n                                                tracks_2_1 = tracks_2.next();\n                                                return [3 /*break*/, 2];\n                                            case 5: return [3 /*break*/, 8];\n                                            case 6:\n                                                e_3_1 = _b.sent();\n                                                e_3 = { error: e_3_1 };\n                                                return [3 /*break*/, 8];\n                                            case 7:\n                                                try {\n                                                    if (tracks_2_1 && !tracks_2_1.done && (_a = tracks_2.return)) _a.call(tracks_2);\n                                                }\n                                                finally { if (e_3) throw e_3.error; }\n                                                return [7 /*endfinally*/];\n                                            case 8: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            }, streamVideoConstraintsGet: function (trackFilter) {\n                                return videoTracks.find(trackFilter).getConstraints();\n                            }, streamVideoSettingsGet: function (trackFilter) {\n                                return videoTracks.find(trackFilter).getSettings();\n                            }, streamVideoCapabilitiesGet: function (trackFilter) {\n                                return videoTracks.find(trackFilter).getCapabilities();\n                            } });\n                        isTorchAvailable = BrowserCodeReader.mediaStreamIsTorchCompatible(stream);\n                        if (isTorchAvailable) {\n                            torchTrack_1 = videoTracks === null || videoTracks === void 0 ? void 0 : videoTracks.find(function (t) { return BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(t); });\n                            switchTorch_1 = function (onOff) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, BrowserCodeReader.mediaStreamSetTorch(torchTrack_1, onOff)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); };\n                            controls.switchTorch = switchTorch_1;\n                            stop_1 = function () {\n                                originalControls.stop();\n                                switchTorch_1(false);\n                            };\n                            controls.stop = stop_1;\n                        }\n                        return [2 /*return*/, controls];\n                }\n            });\n        });\n    };\n    /**\n     * Continuously tries to decode the barcode from the device specified by device while showing\n     * the video in the specified video element.\n     *\n     * @param {string|null} [deviceId] the id of one of the devices obtained after calling\n     *  getVideoInputDevices. Can be undefined, in this case it will decode from one of the\n     *  available devices, preferring the main camera (environment facing) if available.\n     * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video\n     *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n     *  in which case no video will be shown.\n     */\n    BrowserCodeReader.prototype.decodeFromVideoDevice = function (deviceId, previewElem, callbackFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var videoConstraints, constraints;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n                        if (!deviceId) {\n                            videoConstraints = { facingMode: 'environment' };\n                        }\n                        else {\n                            videoConstraints = { deviceId: { exact: deviceId } };\n                        }\n                        constraints = { video: videoConstraints };\n                        return [4 /*yield*/, this.decodeFromConstraints(constraints, previewElem, callbackFn)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Decodes something from an image HTML element.\n     */\n    BrowserCodeReader.prototype.decodeFromVideoElement = function (source, callbackFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element, timeout;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n                        if (!source) {\n                            throw new ArgumentException('A video element must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareVideoElement(source);\n                        timeout = this.options.tryPlayVideoTimeout;\n                        // plays the video\n                        return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n                    case 1:\n                        // plays the video\n                        _a.sent();\n                        // starts decoding after played the video\n                        return [2 /*return*/, this.scan(element, callbackFn)];\n                }\n            });\n        });\n    };\n    /**\n     * Decodes a video from a URL until it ends.\n     */\n    BrowserCodeReader.prototype.decodeFromVideoUrl = function (url, callbackFn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element, finalizeCallback, timeout, controls;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n                        if (!url) {\n                            throw new ArgumentException('An URL must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareVideoElement();\n                        // starts loading the video\n                        element.src = url;\n                        finalizeCallback = function () {\n                            // dispose created video element\n                            BrowserCodeReader.cleanVideoSource(element);\n                        };\n                        timeout = this.options.tryPlayVideoTimeout;\n                        // plays the video\n                        return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n                    case 1:\n                        // plays the video\n                        _a.sent();\n                        controls = this.scan(element, callbackFn, finalizeCallback);\n                        return [2 /*return*/, controls];\n                }\n            });\n        });\n    };\n    /**\n     * In one attempt, tries to decode the barcode from a stream obtained from the given\n     * constraints while showing the video in the specified video element.\n     *\n     * @param constraints the media stream constraints to get s valid media stream to decode from\n     * @param videoSource the video element in page where to show the video while decoding.\n     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n     *  in which case no video will be shown.\n     *  The decoding result.\n     */\n    BrowserCodeReader.prototype.decodeOnceFromConstraints = function (constraints, videoSource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stream;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getUserMedia(constraints)];\n                    case 1:\n                        stream = _a.sent();\n                        return [4 /*yield*/, this.decodeOnceFromStream(stream, videoSource)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * In one attempt, tries to decode the barcode from a stream obtained from the given\n     * constraints while showing the video in the specified video element.\n     *\n     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n     * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding.\n     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n     *  in which case no video will be shown.\n     */\n    BrowserCodeReader.prototype.decodeOnceFromStream = function (stream, preview) {\n        return __awaiter(this, void 0, void 0, function () {\n            var receivedPreview, video, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        receivedPreview = Boolean(preview);\n                        return [4 /*yield*/, BrowserCodeReader.attachStreamToVideo(stream, preview)];\n                    case 1:\n                        video = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, this.scanOneResult(video)];\n                    case 3:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                    case 4:\n                        if (!receivedPreview) {\n                            BrowserCodeReader.cleanVideoSource(video);\n                        }\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * In one attempt, tries to decode the barcode from the device specified by deviceId\n     * while showing the video in the specified video element.\n     *\n     * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices.\n     *  Can be undefined, in this case it will decode from one of the available devices,\n     *  preferring the main camera (environment facing) if available.\n     * @param videoSource the video element in page where to show the video while decoding.\n     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n     *  in which case no video will be shown.\n     */\n    BrowserCodeReader.prototype.decodeOnceFromVideoDevice = function (deviceId, videoSource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var videoConstraints, constraints;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!deviceId) {\n                            videoConstraints = { facingMode: 'environment' };\n                        }\n                        else {\n                            videoConstraints = { deviceId: { exact: deviceId } };\n                        }\n                        constraints = { video: videoConstraints };\n                        return [4 /*yield*/, this.decodeOnceFromConstraints(constraints, videoSource)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Decodes something from an image HTML element.\n     */\n    BrowserCodeReader.prototype.decodeOnceFromVideoElement = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element, timeout;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!source) {\n                            throw new ArgumentException('A video element must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareVideoElement(source);\n                        timeout = this.options.tryPlayVideoTimeout;\n                        // plays the video\n                        return [4 /*yield*/, BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n                    case 1:\n                        // plays the video\n                        _a.sent();\n                        return [4 /*yield*/, this.scanOneResult(element)];\n                    case 2: \n                    // starts decoding after played the video\n                    return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Decodes a video from a URL.\n     */\n    BrowserCodeReader.prototype.decodeOnceFromVideoUrl = function (url) {\n        return __awaiter(this, void 0, void 0, function () {\n            var element, task;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!url) {\n                            throw new ArgumentException('An URL must be provided.');\n                        }\n                        element = BrowserCodeReader.prepareVideoElement();\n                        // starts loading the video\n                        element.src = url;\n                        task = this.decodeOnceFromVideoElement(element);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, task];\n                    case 2: \n                    // it waits the task so we can destroy the created image after\n                    return [2 /*return*/, _a.sent()];\n                    case 3:\n                        // we created this element, so we destroy it\n                        BrowserCodeReader.cleanVideoSource(element);\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Tries to decode from the video input until it finds some value.\n     */\n    BrowserCodeReader.prototype.scanOneResult = function (element, retryIfNotFound, retryIfChecksumError, retryIfFormatError) {\n        var _this = this;\n        if (retryIfNotFound === void 0) { retryIfNotFound = true; }\n        if (retryIfChecksumError === void 0) { retryIfChecksumError = true; }\n        if (retryIfFormatError === void 0) { retryIfFormatError = true; }\n        return new Promise(function (resolve, reject) {\n            // reuses the scan API, but returns at the first successful result\n            _this.scan(element, function (result, error, controls) {\n                if (result) {\n                    // good result, returning\n                    resolve(result);\n                    controls.stop();\n                    return;\n                }\n                if (error) {\n                    // checks if it should retry\n                    if (error instanceof NotFoundException && retryIfNotFound) {\n                        return;\n                    }\n                    if (error instanceof ChecksumException && retryIfChecksumError) {\n                        return;\n                    }\n                    if (error instanceof FormatException && retryIfFormatError) {\n                        return;\n                    }\n                    // not re-trying\n                    controls.stop(); // stops scan loop\n                    reject(error); // returns the error\n                }\n            });\n        });\n    };\n    /**\n     * Continuously decodes from video input.\n     *\n     * @param element HTML element to scan/decode from. It will not be disposed or destroyed.\n     * @param callbackFn Called after every scan attempt, being it successful or errored.\n     * @param finalizeCallback Called after scan process reaches the end or stop is called.\n     */\n    BrowserCodeReader.prototype.scan = function (element, callbackFn, finalizeCallback) {\n        var _this = this;\n        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n        /**\n         * The HTML canvas element, used to draw the video or image's frame for decoding.\n         */\n        var captureCanvas = BrowserCodeReader.createCaptureCanvas(element);\n        /**\n         * The HTML canvas element context.\n         */\n        var captureCanvasContext = captureCanvas.getContext('2d');\n        // cannot proceed w/o this\n        if (!captureCanvasContext) {\n            throw new Error('Couldn\\'t create canvas for visual element scan.');\n        }\n        var disposeCanvas = function () {\n            captureCanvasContext = undefined;\n            captureCanvas = undefined;\n        };\n        var stopScan = false;\n        var lastTimeoutId;\n        // can be called to break the scan loop\n        var stop = function () {\n            stopScan = true;\n            clearTimeout(lastTimeoutId);\n            disposeCanvas();\n            if (finalizeCallback) {\n                finalizeCallback();\n            }\n        };\n        // created for extensibility\n        var controls = { stop: stop };\n        // this async loop allows infinite (or almost? maybe) scans\n        var loop = function () {\n            if (stopScan) {\n                // no need to clear timeouts as none was create yet in this scope.\n                return;\n            }\n            try {\n                BrowserCodeReader.drawImageOnCanvas(captureCanvasContext, element);\n                var result = _this.decodeFromCanvas(captureCanvas);\n                callbackFn(result, undefined, controls);\n                lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanSuccess);\n            }\n            catch (error) {\n                callbackFn(undefined, error, controls);\n                var isChecksumError = error instanceof ChecksumException;\n                var isFormatError = error instanceof FormatException;\n                var isNotFound = error instanceof NotFoundException;\n                if (isChecksumError || isFormatError || isNotFound) {\n                    // trying again\n                    lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanAttempts);\n                    return;\n                }\n                // not trying again\n                disposeCanvas();\n                if (finalizeCallback) {\n                    finalizeCallback(error);\n                }\n            }\n        };\n        // starts the async loop\n        loop();\n        return controls;\n    };\n    /**\n     * Waits for the image to load and then tries to decode it.\n     */\n    BrowserCodeReader.prototype._decodeOnLoadImage = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isImageLoaded;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isImageLoaded = BrowserCodeReader.isImageLoaded(element);\n                        if (!!isImageLoaded) return [3 /*break*/, 2];\n                        return [4 /*yield*/, BrowserCodeReader._waitImageLoad(element)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, this.decode(element)];\n                }\n            });\n        });\n    };\n    /**\n     * Get MediaStream from browser to be used.\n     * @param constraints constraints the media stream constraints to get s valid media stream to decode from.\n     * @private For private use.\n     */\n    BrowserCodeReader.prototype.getUserMedia = function (constraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stream;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraints)];\n                    case 1:\n                        stream = _a.sent();\n                        BrowserCodeReader.streamTracker.push(stream);\n                        return [2 /*return*/, stream];\n                }\n            });\n        });\n    };\n    /**\n     * Keeps track to created media streams.\n     * @private there is no need this array to be accessible from outside.\n     */\n    BrowserCodeReader.streamTracker = [];\n    return BrowserCodeReader;\n}());\nexport { BrowserCodeReader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}