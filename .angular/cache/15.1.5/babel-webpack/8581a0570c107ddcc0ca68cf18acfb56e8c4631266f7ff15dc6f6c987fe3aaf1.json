{"ast":null,"code":"/*\r\n * Copyright (C) 2010 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nimport DecodeHintType from '../DecodeHintType';\nimport CharacterSetECI from './CharacterSetECI';\nimport StringEncoding from '../util/StringEncoding';\n/**\r\n * Common string-related functions.\r\n *\r\n * @author Sean Owen\r\n * @author Alex Dupre\r\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n  StringUtils.castAsNonUtf8Char = function (code, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    }\n    // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n    // you can see this method as a Java version of String.fromCharCode\n    var e = encoding ? encoding.getName() : this.ISO88591;\n    // use passed format (fromCharCode will return UTF8 encoding)\n    return StringEncoding.decode(new Uint8Array([code]), e);\n  };\n  /**\r\n   * @param bytes bytes encoding a string, whose encoding should be guessed\r\n   * @param hints decode hints if applicable\r\n   * @return name of guessed encoding; at the moment will only guess one of:\r\n   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\r\n   *  default encoding if none of these can possibly be correct\r\n   */\n  StringUtils.guessEncoding = function (bytes, hints) {\n    if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType.CHARACTER_SET)) {\n      return hints.get(DecodeHintType.CHARACTER_SET).toString();\n    }\n    // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n    // which should be by far the most common encodings.\n    var length = bytes.length;\n    var canBeISO88591 = true;\n    var canBeShiftJIS = true;\n    var canBeUTF8 = true;\n    var utf8BytesLeft = 0;\n    // int utf8LowChars = 0\n    var utf2BytesChars = 0;\n    var utf3BytesChars = 0;\n    var utf4BytesChars = 0;\n    var sjisBytesLeft = 0;\n    // int sjisLowChars = 0\n    var sjisKatakanaChars = 0;\n    // int sjisDoubleBytesChars = 0\n    var sjisCurKatakanaWordLength = 0;\n    var sjisCurDoubleBytesWordLength = 0;\n    var sjisMaxKatakanaWordLength = 0;\n    var sjisMaxDoubleBytesWordLength = 0;\n    // int isoLowChars = 0\n    // int isoHighChars = 0\n    var isoHighOther = 0;\n    var utf8bom = bytes.length > 3 && bytes[0] === /*(byte) */0xEF && bytes[1] === /*(byte) */0xBB && bytes[2] === /*(byte) */0xBF;\n    for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n      var value = bytes[i] & 0xFF;\n      // UTF-8 stuff\n      if (canBeUTF8) {\n        if (utf8BytesLeft > 0) {\n          if ((value & 0x80) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft--;\n          }\n        } else if ((value & 0x80) !== 0) {\n          if ((value & 0x40) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft++;\n            if ((value & 0x20) === 0) {\n              utf2BytesChars++;\n            } else {\n              utf8BytesLeft++;\n              if ((value & 0x10) === 0) {\n                utf3BytesChars++;\n              } else {\n                utf8BytesLeft++;\n                if ((value & 0x08) === 0) {\n                  utf4BytesChars++;\n                } else {\n                  canBeUTF8 = false;\n                }\n              }\n            }\n          }\n        } // else {\n        // utf8LowChars++\n        // }\n      }\n      // ISO-8859-1 stuff\n      if (canBeISO88591) {\n        if (value > 0x7F && value < 0xA0) {\n          canBeISO88591 = false;\n        } else if (value > 0x9F) {\n          if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n            isoHighOther++;\n          } // else {\n          // isoHighChars++\n          // }\n        } // else {\n        // isoLowChars++\n        // }\n      }\n      // Shift_JIS stuff\n      if (canBeShiftJIS) {\n        if (sjisBytesLeft > 0) {\n          if (value < 0x40 || value === 0x7F || value > 0xFC) {\n            canBeShiftJIS = false;\n          } else {\n            sjisBytesLeft--;\n          }\n        } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n          canBeShiftJIS = false;\n        } else if (value > 0xA0 && value < 0xE0) {\n          sjisKatakanaChars++;\n          sjisCurDoubleBytesWordLength = 0;\n          sjisCurKatakanaWordLength++;\n          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n          }\n        } else if (value > 0x7F) {\n          sjisBytesLeft++;\n          // sjisDoubleBytesChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength++;\n          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n          }\n        } else {\n          // sjisLowChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength = 0;\n        }\n      }\n    }\n    if (canBeUTF8 && utf8BytesLeft > 0) {\n      canBeUTF8 = false;\n    }\n    if (canBeShiftJIS && sjisBytesLeft > 0) {\n      canBeShiftJIS = false;\n    }\n    // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n      return StringUtils.UTF8;\n    }\n    // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n    if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n      return StringUtils.SHIFT_JIS;\n    }\n    // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n    // - If we saw\n    //   - only two consecutive katakana chars in the whole text, or\n    //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n    // - then we conclude Shift_JIS, else ISO-8859-1\n    if (canBeISO88591 && canBeShiftJIS) {\n      return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n    }\n    // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n    if (canBeISO88591) {\n      return StringUtils.ISO88591;\n    }\n    if (canBeShiftJIS) {\n      return StringUtils.SHIFT_JIS;\n    }\n    if (canBeUTF8) {\n      return StringUtils.UTF8;\n    }\n    // Otherwise, we take a wild guess with platform encoding\n    return StringUtils.PLATFORM_DEFAULT_ENCODING;\n  };\n  /**\r\n   *\r\n   * @see https://stackoverflow.com/a/13439711/4367683\r\n   *\r\n   * @param append The new string to append.\r\n   * @param args Argumets values to be formated.\r\n   */\n  StringUtils.format = function (append) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var i = -1;\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (args[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n      switch (p4) {\n        case 's':\n          val = args[i];\n          break;\n        case 'c':\n          val = args[i][0];\n          break;\n        case 'f':\n          val = parseFloat(args[i]).toFixed(exp);\n          break;\n        case 'p':\n          val = parseFloat(args[i]).toPrecision(exp);\n          break;\n        case 'e':\n          val = parseFloat(args[i]).toExponential(exp);\n          break;\n        case 'x':\n          val = parseInt(args[i]).toString(base ? base : 16);\n          break;\n        case 'd':\n          val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1); /* padding size */\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' '; /* isnull? */\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n      return val;\n    }\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return append.replace(regex, callback);\n  };\n  /**\r\n   *\r\n   */\n  StringUtils.getBytes = function (str, encoding) {\n    return StringEncoding.encode(str, encoding);\n  };\n  /**\r\n   * Returns the charcode at the specified index or at index zero.\r\n   */\n  StringUtils.getCharCode = function (str, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n    return str.charCodeAt(index);\n  };\n  /**\r\n   * Returns char for given charcode\r\n   */\n  StringUtils.getCharAt = function (charCode) {\n    return String.fromCharCode(charCode);\n  };\n  StringUtils.SHIFT_JIS = CharacterSetECI.SJIS.getName(); // \"SJIS\"\n  StringUtils.GB2312 = 'GB2312';\n  StringUtils.ISO88591 = CharacterSetECI.ISO8859_1.getName(); // \"ISO8859_1\"\n  StringUtils.EUC_JP = 'EUC_JP';\n  StringUtils.UTF8 = CharacterSetECI.UTF8.getName(); // \"UTF8\"\n  StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n  StringUtils.ASSUME_SHIFT_JIS = false;\n  return StringUtils;\n}();\nexport default StringUtils;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}