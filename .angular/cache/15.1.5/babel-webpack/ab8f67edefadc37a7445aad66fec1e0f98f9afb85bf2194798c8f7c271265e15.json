{"ast":null,"code":"/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport StringBuilder from './util/StringBuilder';\nimport UnsupportedOperationException from './UnsupportedOperationException';\n/*namespace com.google.zxing {*/\n/**\r\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\r\n * platforms into a standard interface for requesting greyscale luminance values. The interface\r\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\r\n * that one Reader does not modify the original luminance source and leave it in an unknown state\r\n * for other Readers in the chain.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\nvar LuminanceSource = /** @class */function () {\n  function LuminanceSource(width /*int*/, height /*int*/) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\r\n   * @return The width of the bitmap.\r\n   */\n  LuminanceSource.prototype.getWidth = function () {\n    return this.width;\n  };\n  /**\r\n   * @return The height of the bitmap.\r\n   */\n  LuminanceSource.prototype.getHeight = function () {\n    return this.height;\n  };\n  /**\r\n   * @return Whether this subclass supports cropping.\r\n   */\n  LuminanceSource.prototype.isCropSupported = function () {\n    return false;\n  };\n  /**\r\n   * Returns a new object with cropped image data. Implementations may keep a reference to the\r\n   * original data rather than a copy. Only callable if isCropSupported() is true.\r\n   *\r\n   * @param left The left coordinate, which must be in [0,getWidth())\r\n   * @param top The top coordinate, which must be in [0,getHeight())\r\n   * @param width The width of the rectangle to crop.\r\n   * @param height The height of the rectangle to crop.\r\n   * @return A cropped version of this object.\r\n   */\n  LuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    throw new UnsupportedOperationException('This luminance source does not support cropping.');\n  };\n  /**\r\n   * @return Whether this subclass supports counter-clockwise rotation.\r\n   */\n  LuminanceSource.prototype.isRotateSupported = function () {\n    return false;\n  };\n  /**\r\n   * Returns a new object with rotated image data by 90 degrees counterclockwise.\r\n   * Only callable if {@link #isRotateSupported()} is true.\r\n   *\r\n   * @return A rotated version of this object.\r\n   */\n  LuminanceSource.prototype.rotateCounterClockwise = function () {\n    throw new UnsupportedOperationException('This luminance source does not support rotation by 90 degrees.');\n  };\n  /**\r\n   * Returns a new object with rotated image data by 45 degrees counterclockwise.\r\n   * Only callable if {@link #isRotateSupported()} is true.\r\n   *\r\n   * @return A rotated version of this object.\r\n   */\n  LuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    throw new UnsupportedOperationException('This luminance source does not support rotation by 45 degrees.');\n  };\n  /*@Override*/\n  LuminanceSource.prototype.toString = function () {\n    var row = new Uint8ClampedArray(this.width);\n    var result = new StringBuilder();\n    for (var y = 0; y < this.height; y++) {\n      var sourceRow = this.getRow(y, row);\n      for (var x = 0; x < this.width; x++) {\n        var luminance = sourceRow[x] & 0xFF;\n        var c = void 0;\n        if (luminance < 0x40) {\n          c = '#';\n        } else if (luminance < 0x80) {\n          c = '+';\n        } else if (luminance < 0xC0) {\n          c = '.';\n        } else {\n          c = ' ';\n        }\n        result.append(c);\n      }\n      result.append('\\n');\n    }\n    return result.toString();\n  };\n  return LuminanceSource;\n}();\nexport default LuminanceSource;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}