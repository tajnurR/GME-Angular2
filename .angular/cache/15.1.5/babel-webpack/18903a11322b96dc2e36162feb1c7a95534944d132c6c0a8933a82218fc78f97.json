{"ast":null,"code":"/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\nvar AbstractGenericGF = /** @class */function () {\n  function AbstractGenericGF() {}\n  /**\r\n   * @return 2 to the power of a in GF(size)\r\n   */\n  AbstractGenericGF.prototype.exp = function (a) {\n    return this.expTable[a];\n  };\n  /**\r\n   * @return base 2 log of a in GF(size)\r\n   */\n  AbstractGenericGF.prototype.log = function (a /*int*/) {\n    if (a === 0) {\n      throw new IllegalArgumentException();\n    }\n    return this.logTable[a];\n  };\n  /**\r\n   * Implements both addition and subtraction -- they are the same in GF(size).\r\n   *\r\n   * @return sum/difference of a and b\r\n   */\n  AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\n    return a ^ b;\n  };\n  return AbstractGenericGF;\n}();\nexport default AbstractGenericGF;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}