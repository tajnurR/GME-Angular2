{"ast":null,"code":"/*\r\n * Copyright (C) 2012 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport BarcodeFormat from '../BarcodeFormat';\nimport AbstractUPCEANReader from './AbstractUPCEANReader';\nimport Result from '../Result';\nimport ResultPoint from '../ResultPoint';\nimport ResultMetadataType from '../ResultMetadataType';\nimport NotFoundException from '../NotFoundException';\n/**\r\n * @see UPCEANExtension5Support\r\n */\nvar UPCEANExtension2Support = /** @class */function () {\n  function UPCEANExtension2Support() {\n    this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\n    this.decodeRowStringBuffer = '';\n  }\n  UPCEANExtension2Support.prototype.decodeRow = function (rowNumber, row, extensionStartRange) {\n    var result = this.decodeRowStringBuffer;\n    var end = this.decodeMiddle(row, extensionStartRange, result);\n    var resultString = result.toString();\n    var extensionData = UPCEANExtension2Support.parseExtensionString(resultString);\n    var resultPoints = [new ResultPoint((extensionStartRange[0] + extensionStartRange[1]) / 2.0, rowNumber), new ResultPoint(end, rowNumber)];\n    var extensionResult = new Result(resultString, null, 0, resultPoints, BarcodeFormat.UPC_EAN_EXTENSION, new Date().getTime());\n    if (extensionData != null) {\n      extensionResult.putAllMetadata(extensionData);\n    }\n    return extensionResult;\n  };\n  UPCEANExtension2Support.prototype.decodeMiddle = function (row, startRange, resultString) {\n    var e_1, _a;\n    var counters = this.decodeMiddleCounters;\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var end = row.getSize();\n    var rowOffset = startRange[1];\n    var checkParity = 0;\n    for (var x = 0; x < 2 && rowOffset < end; x++) {\n      var bestMatch = AbstractUPCEANReader.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader.L_AND_G_PATTERNS);\n      resultString += String.fromCharCode('0'.charCodeAt(0) + bestMatch % 10);\n      try {\n        for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n          rowOffset += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      if (bestMatch >= 10) {\n        checkParity |= 1 << 1 - x;\n      }\n      if (x !== 1) {\n        // Read off separator if not last\n        rowOffset = row.getNextSet(rowOffset);\n        rowOffset = row.getNextUnset(rowOffset);\n      }\n    }\n    if (resultString.length !== 2) {\n      throw new NotFoundException();\n    }\n    if (parseInt(resultString.toString()) % 4 !== checkParity) {\n      throw new NotFoundException();\n    }\n    return rowOffset;\n  };\n  UPCEANExtension2Support.parseExtensionString = function (raw) {\n    if (raw.length !== 2) {\n      return null;\n    }\n    return new Map([[ResultMetadataType.ISSUE_NUMBER, parseInt(raw)]]);\n  };\n  return UPCEANExtension2Support;\n}();\nexport default UPCEANExtension2Support;","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","BarcodeFormat","AbstractUPCEANReader","Result","ResultPoint","ResultMetadataType","NotFoundException","UPCEANExtension2Support","decodeMiddleCounters","Int32Array","from","decodeRowStringBuffer","prototype","decodeRow","rowNumber","row","extensionStartRange","result","end","decodeMiddle","resultString","toString","extensionData","parseExtensionString","resultPoints","extensionResult","UPC_EAN_EXTENSION","Date","getTime","putAllMetadata","startRange","e_1","_a","counters","getSize","rowOffset","checkParity","x","bestMatch","decodeDigit","L_AND_G_PATTERNS","String","fromCharCode","charCodeAt","counters_1","counters_1_1","counter","e_1_1","error","return","getNextSet","getNextUnset","parseInt","raw","Map","ISSUE_NUMBER"],"sources":["D:/Git/GME-Angular2/node_modules/@zxing/library/esm/core/oned/UPCEANExtension2Support.js"],"sourcesContent":["/*\r\n * Copyright (C) 2012 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nimport BarcodeFormat from '../BarcodeFormat';\r\nimport AbstractUPCEANReader from './AbstractUPCEANReader';\r\nimport Result from '../Result';\r\nimport ResultPoint from '../ResultPoint';\r\nimport ResultMetadataType from '../ResultMetadataType';\r\nimport NotFoundException from '../NotFoundException';\r\n/**\r\n * @see UPCEANExtension5Support\r\n */\r\nvar UPCEANExtension2Support = /** @class */ (function () {\r\n    function UPCEANExtension2Support() {\r\n        this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);\r\n        this.decodeRowStringBuffer = '';\r\n    }\r\n    UPCEANExtension2Support.prototype.decodeRow = function (rowNumber, row, extensionStartRange) {\r\n        var result = this.decodeRowStringBuffer;\r\n        var end = this.decodeMiddle(row, extensionStartRange, result);\r\n        var resultString = result.toString();\r\n        var extensionData = UPCEANExtension2Support.parseExtensionString(resultString);\r\n        var resultPoints = [\r\n            new ResultPoint((extensionStartRange[0] + extensionStartRange[1]) / 2.0, rowNumber),\r\n            new ResultPoint(end, rowNumber)\r\n        ];\r\n        var extensionResult = new Result(resultString, null, 0, resultPoints, BarcodeFormat.UPC_EAN_EXTENSION, new Date().getTime());\r\n        if (extensionData != null) {\r\n            extensionResult.putAllMetadata(extensionData);\r\n        }\r\n        return extensionResult;\r\n    };\r\n    UPCEANExtension2Support.prototype.decodeMiddle = function (row, startRange, resultString) {\r\n        var e_1, _a;\r\n        var counters = this.decodeMiddleCounters;\r\n        counters[0] = 0;\r\n        counters[1] = 0;\r\n        counters[2] = 0;\r\n        counters[3] = 0;\r\n        var end = row.getSize();\r\n        var rowOffset = startRange[1];\r\n        var checkParity = 0;\r\n        for (var x = 0; x < 2 && rowOffset < end; x++) {\r\n            var bestMatch = AbstractUPCEANReader.decodeDigit(row, counters, rowOffset, AbstractUPCEANReader.L_AND_G_PATTERNS);\r\n            resultString += String.fromCharCode(('0'.charCodeAt(0) + bestMatch % 10));\r\n            try {\r\n                for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\r\n                    var counter = counters_1_1.value;\r\n                    rowOffset += counter;\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            if (bestMatch >= 10) {\r\n                checkParity |= 1 << (1 - x);\r\n            }\r\n            if (x !== 1) {\r\n                // Read off separator if not last\r\n                rowOffset = row.getNextSet(rowOffset);\r\n                rowOffset = row.getNextUnset(rowOffset);\r\n            }\r\n        }\r\n        if (resultString.length !== 2) {\r\n            throw new NotFoundException();\r\n        }\r\n        if (parseInt(resultString.toString()) % 4 !== checkParity) {\r\n            throw new NotFoundException();\r\n        }\r\n        return rowOffset;\r\n    };\r\n    UPCEANExtension2Support.parseExtensionString = function (raw) {\r\n        if (raw.length !== 2) {\r\n            return null;\r\n        }\r\n        return new Map([[ResultMetadataType.ISSUE_NUMBER, parseInt(raw)]]);\r\n    };\r\n    return UPCEANExtension2Support;\r\n}());\r\nexport default UPCEANExtension2Support;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}