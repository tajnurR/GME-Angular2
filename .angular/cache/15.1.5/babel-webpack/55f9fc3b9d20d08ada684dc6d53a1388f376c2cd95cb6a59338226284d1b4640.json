{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport Result from '../Result';\nimport OneDReader from './OneDReader';\nimport EAN13Reader from './EAN13Reader';\nimport EAN8Reader from './EAN8Reader';\nimport UPCAReader from './UPCAReader';\nimport NotFoundException from '../NotFoundException';\nimport UPCEReader from './UPCEReader';\n/**\r\n * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\r\n * read all such formats, it is most efficient to use this implementation rather than invoke\r\n * individual readers.</p>\r\n *\r\n * @author Sean Owen\r\n */\nvar MultiFormatUPCEANReader = /** @class */function (_super) {\n  __extends(MultiFormatUPCEANReader, _super);\n  function MultiFormatUPCEANReader(hints) {\n    var _this = _super.call(this) || this;\n    var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n    var readers = [];\n    if (possibleFormats != null) {\n      if (possibleFormats.indexOf(BarcodeFormat.EAN_13) > -1) {\n        readers.push(new EAN13Reader());\n      }\n      if (possibleFormats.indexOf(BarcodeFormat.UPC_A) > -1) {\n        readers.push(new UPCAReader());\n      }\n      if (possibleFormats.indexOf(BarcodeFormat.EAN_8) > -1) {\n        readers.push(new EAN8Reader());\n      }\n      if (possibleFormats.indexOf(BarcodeFormat.UPC_E) > -1) {\n        readers.push(new UPCEReader());\n      }\n    }\n    if (readers.length === 0) {\n      readers.push(new EAN13Reader());\n      readers.push(new UPCAReader());\n      readers.push(new EAN8Reader());\n      readers.push(new UPCEReader());\n    }\n    _this.readers = readers;\n    return _this;\n  }\n  MultiFormatUPCEANReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n        try {\n          // const result: Result = reader.decodeRow(rowNumber, row, startGuardPattern, hints);\n          var result = reader.decodeRow(rowNumber, row, hints);\n          // Special case: a 12-digit code encoded in UPC-A is identical to a \"0\"\n          // followed by those 12 digits encoded as EAN-13. Each will recognize such a code,\n          // UPC-A as a 12-digit string and EAN-13 as a 13-digit string starting with \"0\".\n          // Individually these are correct and their readers will both read such a code\n          // and correctly call it EAN-13, or UPC-A, respectively.\n          //\n          // In this case, if we've been looking for both types, we'd like to call it\n          // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read\n          // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A\n          // result if appropriate.\n          //\n          // But, don't return UPC-A if UPC-A was not a requested format!\n          var ean13MayBeUPCA = result.getBarcodeFormat() === BarcodeFormat.EAN_13 && result.getText().charAt(0) === '0';\n          // @SuppressWarnings(\"unchecked\")\n          var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n          var canReturnUPCA = possibleFormats == null || possibleFormats.includes(BarcodeFormat.UPC_A);\n          if (ean13MayBeUPCA && canReturnUPCA) {\n            var rawBytes = result.getRawBytes();\n            // Transfer the metadata across\n            var resultUPCA = new Result(result.getText().substring(1), rawBytes, rawBytes ? rawBytes.length : null, result.getResultPoints(), BarcodeFormat.UPC_A);\n            resultUPCA.putAllMetadata(result.getResultMetadata());\n            return resultUPCA;\n          }\n          return result;\n        } catch (err) {\n          // continue;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    throw new NotFoundException();\n  };\n  MultiFormatUPCEANReader.prototype.reset = function () {\n    var e_2, _a;\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n        reader.reset();\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  return MultiFormatUPCEANReader;\n}(OneDReader);\nexport default MultiFormatUPCEANReader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}