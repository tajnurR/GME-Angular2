{"ast":null,"code":"var ExpandedRow = /** @class */function () {\n  function ExpandedRow(pairs, rowNumber, wasReversed) {\n    this.pairs = pairs;\n    this.rowNumber = rowNumber;\n    this.wasReversed = wasReversed;\n  }\n  ExpandedRow.prototype.getPairs = function () {\n    return this.pairs;\n  };\n  ExpandedRow.prototype.getRowNumber = function () {\n    return this.rowNumber;\n  };\n  ExpandedRow.prototype.isReversed = function () {\n    return this.wasReversed;\n  };\n  // check implementation\n  ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n    return this.checkEqualitity(this, otherPairs);\n  };\n  // @Override\n  ExpandedRow.prototype.toString = function () {\n    return '{ ' + this.pairs + ' }';\n  };\n  /**\r\n   * Two rows are equal if they contain the same pairs in the same order.\r\n   */\n  // @Override\n  // check implementation\n  ExpandedRow.prototype.equals = function (o1, o2) {\n    if (!(o1 instanceof ExpandedRow)) {\n      return false;\n    }\n    return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n  };\n  ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n    if (!pair1 || !pair2) return;\n    var result;\n    pair1.forEach(function (e1, i) {\n      pair2.forEach(function (e2) {\n        if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n          result = true;\n        }\n      });\n    });\n    return result;\n  };\n  return ExpandedRow;\n}();\nexport default ExpandedRow;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}