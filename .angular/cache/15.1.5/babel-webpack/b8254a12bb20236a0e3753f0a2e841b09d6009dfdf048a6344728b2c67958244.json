{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\r\n * RSS util functions.\r\n */\nvar RSSUtils = /** @class */function () {\n  function RSSUtils() {}\n  RSSUtils.getRSSvalue = function (widths, maxWidth, noNarrow) {\n    var e_1, _a;\n    var n = 0;\n    try {\n      for (var widths_1 = __values(widths), widths_1_1 = widths_1.next(); !widths_1_1.done; widths_1_1 = widths_1.next()) {\n        var width = widths_1_1.value;\n        n += width;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (widths_1_1 && !widths_1_1.done && (_a = widths_1.return)) _a.call(widths_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var val = 0;\n    var narrowMask = 0;\n    var elements = widths.length;\n    for (var bar = 0; bar < elements - 1; bar++) {\n      var elmWidth = void 0;\n      for (elmWidth = 1, narrowMask |= 1 << bar; elmWidth < widths[bar]; elmWidth++, narrowMask &= ~(1 << bar)) {\n        var subVal = RSSUtils.combins(n - elmWidth - 1, elements - bar - 2);\n        if (noNarrow && narrowMask === 0 && n - elmWidth - (elements - bar - 1) >= elements - bar - 1) {\n          subVal -= RSSUtils.combins(n - elmWidth - (elements - bar), elements - bar - 2);\n        }\n        if (elements - bar - 1 > 1) {\n          var lessVal = 0;\n          for (var mxwElement = n - elmWidth - (elements - bar - 2); mxwElement > maxWidth; mxwElement--) {\n            lessVal += RSSUtils.combins(n - elmWidth - mxwElement - 1, elements - bar - 3);\n          }\n          subVal -= lessVal * (elements - 1 - bar);\n        } else if (n - elmWidth > maxWidth) {\n          subVal--;\n        }\n        val += subVal;\n      }\n      n -= elmWidth;\n    }\n    return val;\n  };\n  RSSUtils.combins = function (n, r) {\n    var maxDenom;\n    var minDenom;\n    if (n - r > r) {\n      minDenom = r;\n      maxDenom = n - r;\n    } else {\n      minDenom = n - r;\n      maxDenom = r;\n    }\n    var val = 1;\n    var j = 1;\n    for (var i = n; i > maxDenom; i--) {\n      val *= i;\n      if (j <= minDenom) {\n        val /= j;\n        j++;\n      }\n    }\n    while (j <= minDenom) {\n      val /= j;\n      j++;\n    }\n    return val;\n  };\n  return RSSUtils;\n}();\nexport default RSSUtils;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}