{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\r\n * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will\r\n * use blocks of differing sizes within one version, so, this encapsulates the parameters for\r\n * each set of blocks. It also holds the number of error-correction codewords per block since it\r\n * will be the same across all blocks within one version.</p>\r\n */\nvar ECBlocks = /** @class */function () {\n  function ECBlocks(ecCodewordsPerBlock /*int*/) {\n    var ecBlocks = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      ecBlocks[_i - 1] = arguments[_i];\n    }\n    this.ecCodewordsPerBlock = ecCodewordsPerBlock;\n    this.ecBlocks = ecBlocks;\n  }\n  ECBlocks.prototype.getECCodewordsPerBlock = function () {\n    return this.ecCodewordsPerBlock;\n  };\n  ECBlocks.prototype.getNumBlocks = function () {\n    var e_1, _a;\n    var total = 0;\n    var ecBlocks = this.ecBlocks;\n    try {\n      for (var ecBlocks_1 = __values(ecBlocks), ecBlocks_1_1 = ecBlocks_1.next(); !ecBlocks_1_1.done; ecBlocks_1_1 = ecBlocks_1.next()) {\n        var ecBlock = ecBlocks_1_1.value;\n        total += ecBlock.getCount();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecBlocks_1_1 && !ecBlocks_1_1.done && (_a = ecBlocks_1.return)) _a.call(ecBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return total;\n  };\n  ECBlocks.prototype.getTotalECCodewords = function () {\n    return this.ecCodewordsPerBlock * this.getNumBlocks();\n  };\n  ECBlocks.prototype.getECBlocks = function () {\n    return this.ecBlocks;\n  };\n  return ECBlocks;\n}();\nexport default ECBlocks;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}