{"ast":null,"code":"import FormatException from '../../../../FormatException';\nimport IllegalStateException from '../../../../IllegalStateException';\nimport StringBuilder from '../../../../util/StringBuilder';\nimport BlockParsedResult from './BlockParsedResult';\nimport DecodedChar from './DecodedChar';\nimport DecodedInformation from './DecodedInformation';\nimport DecodedNumeric from './DecodedNumeric';\nimport FieldParser from './FieldParser';\nvar GeneralAppIdDecoder = /** @class */function () {\n  function GeneralAppIdDecoder(information) {\n    this.buffer = new StringBuilder();\n    this.information = information;\n  }\n  GeneralAppIdDecoder.prototype.decodeAllCodes = function (buff, initialPosition) {\n    var currentPosition = initialPosition;\n    var remaining = null;\n    do {\n      var info = this.decodeGeneralPurposeField(currentPosition, remaining);\n      var parsedFields = FieldParser.parseFieldsInGeneralPurpose(info.getNewString());\n      if (parsedFields != null) {\n        buff.append(parsedFields);\n      }\n      if (info.isRemaining()) {\n        remaining = '' + info.getRemainingValue();\n      } else {\n        remaining = null;\n      }\n      if (currentPosition === info.getNewPosition()) {\n        // No step forward!\n        break;\n      }\n      currentPosition = info.getNewPosition();\n    } while (true);\n    return buff.toString();\n  };\n  GeneralAppIdDecoder.prototype.isStillNumeric = function (pos) {\n    // It's numeric if it still has 7 positions\n    // and one of the first 4 bits is \"1\".\n    if (pos + 7 > this.information.getSize()) {\n      return pos + 4 <= this.information.getSize();\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return true;\n      }\n    }\n    return this.information.get(pos + 3);\n  };\n  GeneralAppIdDecoder.prototype.decodeNumeric = function (pos) {\n    if (pos + 7 > this.information.getSize()) {\n      var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);\n      if (numeric_1 === 0) {\n        return new DecodedNumeric(this.information.getSize(), DecodedNumeric.FNC1, DecodedNumeric.FNC1);\n      }\n      return new DecodedNumeric(this.information.getSize(), numeric_1 - 1, DecodedNumeric.FNC1);\n    }\n    var numeric = this.extractNumericValueFromBitArray(pos, 7);\n    var digit1 = (numeric - 8) / 11;\n    var digit2 = (numeric - 8) % 11;\n    return new DecodedNumeric(pos + 7, digit1, digit2);\n  };\n  GeneralAppIdDecoder.prototype.extractNumericValueFromBitArray = function (pos, bits) {\n    return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\n  };\n  GeneralAppIdDecoder.extractNumericValueFromBitArray = function (information, pos, bits) {\n    var value = 0;\n    for (var i = 0; i < bits; ++i) {\n      if (information.get(pos + i)) {\n        value |= 1 << bits - i - 1;\n      }\n    }\n    return value;\n  };\n  GeneralAppIdDecoder.prototype.decodeGeneralPurposeField = function (pos, remaining) {\n    // this.buffer.setLength(0);\n    this.buffer.setLengthToZero();\n    if (remaining != null) {\n      this.buffer.append(remaining);\n    }\n    this.current.setPosition(pos);\n    var lastDecoded = this.parseBlocks();\n    if (lastDecoded != null && lastDecoded.isRemaining()) {\n      return new DecodedInformation(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\n    }\n    return new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n  };\n  GeneralAppIdDecoder.prototype.parseBlocks = function () {\n    var isFinished;\n    var result;\n    do {\n      var initialPosition = this.current.getPosition();\n      if (this.current.isAlpha()) {\n        result = this.parseAlphaBlock();\n        isFinished = result.isFinished();\n      } else if (this.current.isIsoIec646()) {\n        result = this.parseIsoIec646Block();\n        isFinished = result.isFinished();\n      } else {\n        // it must be numeric\n        result = this.parseNumericBlock();\n        isFinished = result.isFinished();\n      }\n      var positionChanged = initialPosition !== this.current.getPosition();\n      if (!positionChanged && !isFinished) {\n        break;\n      }\n    } while (!isFinished);\n    return result.getDecodedInformation();\n  };\n  GeneralAppIdDecoder.prototype.parseNumericBlock = function () {\n    while (this.isStillNumeric(this.current.getPosition())) {\n      var numeric = this.decodeNumeric(this.current.getPosition());\n      this.current.setPosition(numeric.getNewPosition());\n      if (numeric.isFirstDigitFNC1()) {\n        var information = void 0;\n        if (numeric.isSecondDigitFNC1()) {\n          information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        } else {\n          information = new DecodedInformation(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\n        }\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(numeric.getFirstDigit());\n      if (numeric.isSecondDigitFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(numeric.getSecondDigit());\n    }\n    if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\n      this.current.setAlpha();\n      this.current.incrementPosition(4);\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.parseIsoIec646Block = function () {\n    while (this.isStillIsoIec646(this.current.getPosition())) {\n      var iso = this.decodeIsoIec646(this.current.getPosition());\n      this.current.setPosition(iso.getNewPosition());\n      if (iso.isFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information);\n      }\n      this.buffer.append(iso.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setAlpha();\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.parseAlphaBlock = function () {\n    while (this.isStillAlpha(this.current.getPosition())) {\n      var alpha = this.decodeAlphanumeric(this.current.getPosition());\n      this.current.setPosition(alpha.getNewPosition());\n      if (alpha.isFNC1()) {\n        var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult(true, information); // end of the char block\n      }\n\n      this.buffer.append(alpha.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setIsoIec646();\n    }\n    return new BlockParsedResult(false);\n  };\n  GeneralAppIdDecoder.prototype.isStillIsoIec646 = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 7 > this.information.getSize()) {\n      return false;\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 116) {\n      return true;\n    }\n    if (pos + 8 > this.information.getSize()) {\n      return false;\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    return eightBitValue >= 232 && eightBitValue < 253;\n  };\n  GeneralAppIdDecoder.prototype.decodeIsoIec646 = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue === 15) {\n      return new DecodedChar(pos + 5, DecodedChar.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 90) {\n      return new DecodedChar(pos + 7, '' + (sevenBitValue + 1));\n    }\n    if (sevenBitValue >= 90 && sevenBitValue < 116) {\n      return new DecodedChar(pos + 7, '' + (sevenBitValue + 7));\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    var c;\n    switch (eightBitValue) {\n      case 232:\n        c = '!';\n        break;\n      case 233:\n        c = '\"';\n        break;\n      case 234:\n        c = '%';\n        break;\n      case 235:\n        c = '&';\n        break;\n      case 236:\n        c = '\\'';\n        break;\n      case 237:\n        c = '(';\n        break;\n      case 238:\n        c = ')';\n        break;\n      case 239:\n        c = '*';\n        break;\n      case 240:\n        c = '+';\n        break;\n      case 241:\n        c = ',';\n        break;\n      case 242:\n        c = '-';\n        break;\n      case 243:\n        c = '.';\n        break;\n      case 244:\n        c = '/';\n        break;\n      case 245:\n        c = ':';\n        break;\n      case 246:\n        c = ';';\n        break;\n      case 247:\n        c = '<';\n        break;\n      case 248:\n        c = '=';\n        break;\n      case 249:\n        c = '>';\n        break;\n      case 250:\n        c = '?';\n        break;\n      case 251:\n        c = '_';\n        break;\n      case 252:\n        c = ' ';\n        break;\n      default:\n        throw new FormatException();\n    }\n    return new DecodedChar(pos + 8, c);\n  };\n  GeneralAppIdDecoder.prototype.isStillAlpha = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    // We now check if it's a valid 5-bit value (0..9 and FNC1)\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 6 > this.information.getSize()) {\n      return false;\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\n  };\n\n  GeneralAppIdDecoder.prototype.decodeAlphanumeric = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue === 15) {\n      return new DecodedChar(pos + 5, DecodedChar.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    if (sixBitValue >= 32 && sixBitValue < 58) {\n      return new DecodedChar(pos + 6, '' + (sixBitValue + 33));\n    }\n    var c;\n    switch (sixBitValue) {\n      case 58:\n        c = '*';\n        break;\n      case 59:\n        c = ',';\n        break;\n      case 60:\n        c = '-';\n        break;\n      case 61:\n        c = '.';\n        break;\n      case 62:\n        c = '/';\n        break;\n      default:\n        throw new IllegalStateException('Decoding invalid alphanumeric value: ' + sixBitValue);\n    }\n    return new DecodedChar(pos + 6, c);\n  };\n  GeneralAppIdDecoder.prototype.isAlphaTo646ToAlphaLatch = function (pos) {\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\n      if (i === 2) {\n        if (!this.information.get(pos + 2)) {\n          return false;\n        }\n      } else if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isAlphaOr646ToNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 3 positions and they are all zeros\n    if (pos + 3 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isNumericToAlphaNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 4 positions and they are all zeros, or\n    // if there is a subset of this just before the end of the symbol\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\n      if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return GeneralAppIdDecoder;\n}();\nexport default GeneralAppIdDecoder;","map":{"version":3,"names":["FormatException","IllegalStateException","StringBuilder","BlockParsedResult","DecodedChar","DecodedInformation","DecodedNumeric","FieldParser","GeneralAppIdDecoder","information","buffer","prototype","decodeAllCodes","buff","initialPosition","currentPosition","remaining","info","decodeGeneralPurposeField","parsedFields","parseFieldsInGeneralPurpose","getNewString","append","isRemaining","getRemainingValue","getNewPosition","toString","isStillNumeric","pos","getSize","i","get","decodeNumeric","numeric_1","extractNumericValueFromBitArray","FNC1","numeric","digit1","digit2","bits","value","setLengthToZero","current","setPosition","lastDecoded","parseBlocks","getPosition","isFinished","result","isAlpha","parseAlphaBlock","isIsoIec646","parseIsoIec646Block","parseNumericBlock","positionChanged","getDecodedInformation","isFirstDigitFNC1","isSecondDigitFNC1","getSecondDigit","getFirstDigit","isNumericToAlphaNumericLatch","setAlpha","incrementPosition","isStillIsoIec646","iso","decodeIsoIec646","isFNC1","getValue","isAlphaOr646ToNumericLatch","setNumeric","isAlphaTo646ToAlphaLatch","isStillAlpha","alpha","decodeAlphanumeric","setIsoIec646","fiveBitValue","sevenBitValue","eightBitValue","c","sixBitValue"],"sources":["E:/angular/GME-Angular2/node_modules/@zxing/library/esm/core/oned/rss/expanded/decoders/GeneralAppIdDecoder.js"],"sourcesContent":["import FormatException from '../../../../FormatException';\r\nimport IllegalStateException from '../../../../IllegalStateException';\r\nimport StringBuilder from '../../../../util/StringBuilder';\r\nimport BlockParsedResult from './BlockParsedResult';\r\nimport DecodedChar from './DecodedChar';\r\nimport DecodedInformation from './DecodedInformation';\r\nimport DecodedNumeric from './DecodedNumeric';\r\nimport FieldParser from './FieldParser';\r\nvar GeneralAppIdDecoder = /** @class */ (function () {\r\n    function GeneralAppIdDecoder(information) {\r\n        this.buffer = new StringBuilder();\r\n        this.information = information;\r\n    }\r\n    GeneralAppIdDecoder.prototype.decodeAllCodes = function (buff, initialPosition) {\r\n        var currentPosition = initialPosition;\r\n        var remaining = null;\r\n        do {\r\n            var info = this.decodeGeneralPurposeField(currentPosition, remaining);\r\n            var parsedFields = FieldParser.parseFieldsInGeneralPurpose(info.getNewString());\r\n            if (parsedFields != null) {\r\n                buff.append(parsedFields);\r\n            }\r\n            if (info.isRemaining()) {\r\n                remaining = '' + info.getRemainingValue();\r\n            }\r\n            else {\r\n                remaining = null;\r\n            }\r\n            if (currentPosition === info.getNewPosition()) { // No step forward!\r\n                break;\r\n            }\r\n            currentPosition = info.getNewPosition();\r\n        } while (true);\r\n        return buff.toString();\r\n    };\r\n    GeneralAppIdDecoder.prototype.isStillNumeric = function (pos) {\r\n        // It's numeric if it still has 7 positions\r\n        // and one of the first 4 bits is \"1\".\r\n        if (pos + 7 > this.information.getSize()) {\r\n            return pos + 4 <= this.information.getSize();\r\n        }\r\n        for (var i = pos; i < pos + 3; ++i) {\r\n            if (this.information.get(i)) {\r\n                return true;\r\n            }\r\n        }\r\n        return this.information.get(pos + 3);\r\n    };\r\n    GeneralAppIdDecoder.prototype.decodeNumeric = function (pos) {\r\n        if (pos + 7 > this.information.getSize()) {\r\n            var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);\r\n            if (numeric_1 === 0) {\r\n                return new DecodedNumeric(this.information.getSize(), DecodedNumeric.FNC1, DecodedNumeric.FNC1);\r\n            }\r\n            return new DecodedNumeric(this.information.getSize(), numeric_1 - 1, DecodedNumeric.FNC1);\r\n        }\r\n        var numeric = this.extractNumericValueFromBitArray(pos, 7);\r\n        var digit1 = (numeric - 8) / 11;\r\n        var digit2 = (numeric - 8) % 11;\r\n        return new DecodedNumeric(pos + 7, digit1, digit2);\r\n    };\r\n    GeneralAppIdDecoder.prototype.extractNumericValueFromBitArray = function (pos, bits) {\r\n        return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\r\n    };\r\n    GeneralAppIdDecoder.extractNumericValueFromBitArray = function (information, pos, bits) {\r\n        var value = 0;\r\n        for (var i = 0; i < bits; ++i) {\r\n            if (information.get(pos + i)) {\r\n                value |= 1 << (bits - i - 1);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    GeneralAppIdDecoder.prototype.decodeGeneralPurposeField = function (pos, remaining) {\r\n        // this.buffer.setLength(0);\r\n        this.buffer.setLengthToZero();\r\n        if (remaining != null) {\r\n            this.buffer.append(remaining);\r\n        }\r\n        this.current.setPosition(pos);\r\n        var lastDecoded = this.parseBlocks();\r\n        if (lastDecoded != null && lastDecoded.isRemaining()) {\r\n            return new DecodedInformation(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\r\n        }\r\n        return new DecodedInformation(this.current.getPosition(), this.buffer.toString());\r\n    };\r\n    GeneralAppIdDecoder.prototype.parseBlocks = function () {\r\n        var isFinished;\r\n        var result;\r\n        do {\r\n            var initialPosition = this.current.getPosition();\r\n            if (this.current.isAlpha()) {\r\n                result = this.parseAlphaBlock();\r\n                isFinished = result.isFinished();\r\n            }\r\n            else if (this.current.isIsoIec646()) {\r\n                result = this.parseIsoIec646Block();\r\n                isFinished = result.isFinished();\r\n            }\r\n            else { // it must be numeric\r\n                result = this.parseNumericBlock();\r\n                isFinished = result.isFinished();\r\n            }\r\n            var positionChanged = initialPosition !== this.current.getPosition();\r\n            if (!positionChanged && !isFinished) {\r\n                break;\r\n            }\r\n        } while (!isFinished);\r\n        return result.getDecodedInformation();\r\n    };\r\n    GeneralAppIdDecoder.prototype.parseNumericBlock = function () {\r\n        while (this.isStillNumeric(this.current.getPosition())) {\r\n            var numeric = this.decodeNumeric(this.current.getPosition());\r\n            this.current.setPosition(numeric.getNewPosition());\r\n            if (numeric.isFirstDigitFNC1()) {\r\n                var information = void 0;\r\n                if (numeric.isSecondDigitFNC1()) {\r\n                    information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\r\n                }\r\n                else {\r\n                    information = new DecodedInformation(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\r\n                }\r\n                return new BlockParsedResult(true, information);\r\n            }\r\n            this.buffer.append(numeric.getFirstDigit());\r\n            if (numeric.isSecondDigitFNC1()) {\r\n                var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\r\n                return new BlockParsedResult(true, information);\r\n            }\r\n            this.buffer.append(numeric.getSecondDigit());\r\n        }\r\n        if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\r\n            this.current.setAlpha();\r\n            this.current.incrementPosition(4);\r\n        }\r\n        return new BlockParsedResult(false);\r\n    };\r\n    GeneralAppIdDecoder.prototype.parseIsoIec646Block = function () {\r\n        while (this.isStillIsoIec646(this.current.getPosition())) {\r\n            var iso = this.decodeIsoIec646(this.current.getPosition());\r\n            this.current.setPosition(iso.getNewPosition());\r\n            if (iso.isFNC1()) {\r\n                var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\r\n                return new BlockParsedResult(true, information);\r\n            }\r\n            this.buffer.append(iso.getValue());\r\n        }\r\n        if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\r\n            this.current.incrementPosition(3);\r\n            this.current.setNumeric();\r\n        }\r\n        else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\r\n            if (this.current.getPosition() + 5 < this.information.getSize()) {\r\n                this.current.incrementPosition(5);\r\n            }\r\n            else {\r\n                this.current.setPosition(this.information.getSize());\r\n            }\r\n            this.current.setAlpha();\r\n        }\r\n        return new BlockParsedResult(false);\r\n    };\r\n    GeneralAppIdDecoder.prototype.parseAlphaBlock = function () {\r\n        while (this.isStillAlpha(this.current.getPosition())) {\r\n            var alpha = this.decodeAlphanumeric(this.current.getPosition());\r\n            this.current.setPosition(alpha.getNewPosition());\r\n            if (alpha.isFNC1()) {\r\n                var information = new DecodedInformation(this.current.getPosition(), this.buffer.toString());\r\n                return new BlockParsedResult(true, information); // end of the char block\r\n            }\r\n            this.buffer.append(alpha.getValue());\r\n        }\r\n        if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\r\n            this.current.incrementPosition(3);\r\n            this.current.setNumeric();\r\n        }\r\n        else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\r\n            if (this.current.getPosition() + 5 < this.information.getSize()) {\r\n                this.current.incrementPosition(5);\r\n            }\r\n            else {\r\n                this.current.setPosition(this.information.getSize());\r\n            }\r\n            this.current.setIsoIec646();\r\n        }\r\n        return new BlockParsedResult(false);\r\n    };\r\n    GeneralAppIdDecoder.prototype.isStillIsoIec646 = function (pos) {\r\n        if (pos + 5 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\r\n        if (fiveBitValue >= 5 && fiveBitValue < 16) {\r\n            return true;\r\n        }\r\n        if (pos + 7 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\r\n        if (sevenBitValue >= 64 && sevenBitValue < 116) {\r\n            return true;\r\n        }\r\n        if (pos + 8 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\r\n        return eightBitValue >= 232 && eightBitValue < 253;\r\n    };\r\n    GeneralAppIdDecoder.prototype.decodeIsoIec646 = function (pos) {\r\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\r\n        if (fiveBitValue === 15) {\r\n            return new DecodedChar(pos + 5, DecodedChar.FNC1);\r\n        }\r\n        if (fiveBitValue >= 5 && fiveBitValue < 15) {\r\n            return new DecodedChar(pos + 5, ('0' + (fiveBitValue - 5)));\r\n        }\r\n        var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\r\n        if (sevenBitValue >= 64 && sevenBitValue < 90) {\r\n            return new DecodedChar(pos + 7, ('' + (sevenBitValue + 1)));\r\n        }\r\n        if (sevenBitValue >= 90 && sevenBitValue < 116) {\r\n            return new DecodedChar(pos + 7, ('' + (sevenBitValue + 7)));\r\n        }\r\n        var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\r\n        var c;\r\n        switch (eightBitValue) {\r\n            case 232:\r\n                c = '!';\r\n                break;\r\n            case 233:\r\n                c = '\"';\r\n                break;\r\n            case 234:\r\n                c = '%';\r\n                break;\r\n            case 235:\r\n                c = '&';\r\n                break;\r\n            case 236:\r\n                c = '\\'';\r\n                break;\r\n            case 237:\r\n                c = '(';\r\n                break;\r\n            case 238:\r\n                c = ')';\r\n                break;\r\n            case 239:\r\n                c = '*';\r\n                break;\r\n            case 240:\r\n                c = '+';\r\n                break;\r\n            case 241:\r\n                c = ',';\r\n                break;\r\n            case 242:\r\n                c = '-';\r\n                break;\r\n            case 243:\r\n                c = '.';\r\n                break;\r\n            case 244:\r\n                c = '/';\r\n                break;\r\n            case 245:\r\n                c = ':';\r\n                break;\r\n            case 246:\r\n                c = ';';\r\n                break;\r\n            case 247:\r\n                c = '<';\r\n                break;\r\n            case 248:\r\n                c = '=';\r\n                break;\r\n            case 249:\r\n                c = '>';\r\n                break;\r\n            case 250:\r\n                c = '?';\r\n                break;\r\n            case 251:\r\n                c = '_';\r\n                break;\r\n            case 252:\r\n                c = ' ';\r\n                break;\r\n            default:\r\n                throw new FormatException();\r\n        }\r\n        return new DecodedChar(pos + 8, c);\r\n    };\r\n    GeneralAppIdDecoder.prototype.isStillAlpha = function (pos) {\r\n        if (pos + 5 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        // We now check if it's a valid 5-bit value (0..9 and FNC1)\r\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\r\n        if (fiveBitValue >= 5 && fiveBitValue < 16) {\r\n            return true;\r\n        }\r\n        if (pos + 6 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\r\n        return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\r\n    };\r\n    GeneralAppIdDecoder.prototype.decodeAlphanumeric = function (pos) {\r\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\r\n        if (fiveBitValue === 15) {\r\n            return new DecodedChar(pos + 5, DecodedChar.FNC1);\r\n        }\r\n        if (fiveBitValue >= 5 && fiveBitValue < 15) {\r\n            return new DecodedChar(pos + 5, ('0' + (fiveBitValue - 5)));\r\n        }\r\n        var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\r\n        if (sixBitValue >= 32 && sixBitValue < 58) {\r\n            return new DecodedChar(pos + 6, ('' + (sixBitValue + 33)));\r\n        }\r\n        var c;\r\n        switch (sixBitValue) {\r\n            case 58:\r\n                c = '*';\r\n                break;\r\n            case 59:\r\n                c = ',';\r\n                break;\r\n            case 60:\r\n                c = '-';\r\n                break;\r\n            case 61:\r\n                c = '.';\r\n                break;\r\n            case 62:\r\n                c = '/';\r\n                break;\r\n            default:\r\n                throw new IllegalStateException('Decoding invalid alphanumeric value: ' + sixBitValue);\r\n        }\r\n        return new DecodedChar(pos + 6, c);\r\n    };\r\n    GeneralAppIdDecoder.prototype.isAlphaTo646ToAlphaLatch = function (pos) {\r\n        if (pos + 1 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\r\n            if (i === 2) {\r\n                if (!this.information.get(pos + 2)) {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (this.information.get(pos + i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    GeneralAppIdDecoder.prototype.isAlphaOr646ToNumericLatch = function (pos) {\r\n        // Next is alphanumeric if there are 3 positions and they are all zeros\r\n        if (pos + 3 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        for (var i = pos; i < pos + 3; ++i) {\r\n            if (this.information.get(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    GeneralAppIdDecoder.prototype.isNumericToAlphaNumericLatch = function (pos) {\r\n        // Next is alphanumeric if there are 4 positions and they are all zeros, or\r\n        // if there is a subset of this just before the end of the symbol\r\n        if (pos + 1 > this.information.getSize()) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\r\n            if (this.information.get(pos + i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return GeneralAppIdDecoder;\r\n}());\r\nexport default GeneralAppIdDecoder;\r\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,6BAA6B;AACzD,OAAOC,qBAAqB,MAAM,mCAAmC;AACrE,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe;AACvC,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,CAACC,WAAW,EAAE;IACtC,IAAI,CAACC,MAAM,GAAG,IAAIR,aAAa,EAAE;IACjC,IAAI,CAACO,WAAW,GAAGA,WAAW;EAClC;EACAD,mBAAmB,CAACG,SAAS,CAACC,cAAc,GAAG,UAAUC,IAAI,EAAEC,eAAe,EAAE;IAC5E,IAAIC,eAAe,GAAGD,eAAe;IACrC,IAAIE,SAAS,GAAG,IAAI;IACpB,GAAG;MACC,IAAIC,IAAI,GAAG,IAAI,CAACC,yBAAyB,CAACH,eAAe,EAAEC,SAAS,CAAC;MACrE,IAAIG,YAAY,GAAGZ,WAAW,CAACa,2BAA2B,CAACH,IAAI,CAACI,YAAY,EAAE,CAAC;MAC/E,IAAIF,YAAY,IAAI,IAAI,EAAE;QACtBN,IAAI,CAACS,MAAM,CAACH,YAAY,CAAC;MAC7B;MACA,IAAIF,IAAI,CAACM,WAAW,EAAE,EAAE;QACpBP,SAAS,GAAG,EAAE,GAAGC,IAAI,CAACO,iBAAiB,EAAE;MAC7C,CAAC,MACI;QACDR,SAAS,GAAG,IAAI;MACpB;MACA,IAAID,eAAe,KAAKE,IAAI,CAACQ,cAAc,EAAE,EAAE;QAAE;QAC7C;MACJ;MACAV,eAAe,GAAGE,IAAI,CAACQ,cAAc,EAAE;IAC3C,CAAC,QAAQ,IAAI;IACb,OAAOZ,IAAI,CAACa,QAAQ,EAAE;EAC1B,CAAC;EACDlB,mBAAmB,CAACG,SAAS,CAACgB,cAAc,GAAG,UAAUC,GAAG,EAAE;IAC1D;IACA;IACA,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAOD,GAAG,GAAG,CAAC,IAAI,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE;IAChD;IACA,KAAK,IAAIC,CAAC,GAAGF,GAAG,EAAEE,CAAC,GAAGF,GAAG,GAAG,CAAC,EAAE,EAAEE,CAAC,EAAE;MAChC,IAAI,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACD,CAAC,CAAC,EAAE;QACzB,OAAO,IAAI;MACf;IACJ;IACA,OAAO,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACH,GAAG,GAAG,CAAC,CAAC;EACxC,CAAC;EACDpB,mBAAmB,CAACG,SAAS,CAACqB,aAAa,GAAG,UAAUJ,GAAG,EAAE;IACzD,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,IAAII,SAAS,GAAG,IAAI,CAACC,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;MAC5D,IAAIK,SAAS,KAAK,CAAC,EAAE;QACjB,OAAO,IAAI3B,cAAc,CAAC,IAAI,CAACG,WAAW,CAACoB,OAAO,EAAE,EAAEvB,cAAc,CAAC6B,IAAI,EAAE7B,cAAc,CAAC6B,IAAI,CAAC;MACnG;MACA,OAAO,IAAI7B,cAAc,CAAC,IAAI,CAACG,WAAW,CAACoB,OAAO,EAAE,EAAEI,SAAS,GAAG,CAAC,EAAE3B,cAAc,CAAC6B,IAAI,CAAC;IAC7F;IACA,IAAIC,OAAO,GAAG,IAAI,CAACF,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC1D,IAAIS,MAAM,GAAG,CAACD,OAAO,GAAG,CAAC,IAAI,EAAE;IAC/B,IAAIE,MAAM,GAAG,CAACF,OAAO,GAAG,CAAC,IAAI,EAAE;IAC/B,OAAO,IAAI9B,cAAc,CAACsB,GAAG,GAAG,CAAC,EAAES,MAAM,EAAEC,MAAM,CAAC;EACtD,CAAC;EACD9B,mBAAmB,CAACG,SAAS,CAACuB,+BAA+B,GAAG,UAAUN,GAAG,EAAEW,IAAI,EAAE;IACjF,OAAO/B,mBAAmB,CAAC0B,+BAA+B,CAAC,IAAI,CAACzB,WAAW,EAAEmB,GAAG,EAAEW,IAAI,CAAC;EAC3F,CAAC;EACD/B,mBAAmB,CAAC0B,+BAA+B,GAAG,UAAUzB,WAAW,EAAEmB,GAAG,EAAEW,IAAI,EAAE;IACpF,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,IAAI,EAAE,EAAET,CAAC,EAAE;MAC3B,IAAIrB,WAAW,CAACsB,GAAG,CAACH,GAAG,GAAGE,CAAC,CAAC,EAAE;QAC1BU,KAAK,IAAI,CAAC,IAAKD,IAAI,GAAGT,CAAC,GAAG,CAAE;MAChC;IACJ;IACA,OAAOU,KAAK;EAChB,CAAC;EACDhC,mBAAmB,CAACG,SAAS,CAACO,yBAAyB,GAAG,UAAUU,GAAG,EAAEZ,SAAS,EAAE;IAChF;IACA,IAAI,CAACN,MAAM,CAAC+B,eAAe,EAAE;IAC7B,IAAIzB,SAAS,IAAI,IAAI,EAAE;MACnB,IAAI,CAACN,MAAM,CAACY,MAAM,CAACN,SAAS,CAAC;IACjC;IACA,IAAI,CAAC0B,OAAO,CAACC,WAAW,CAACf,GAAG,CAAC;IAC7B,IAAIgB,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;IACpC,IAAID,WAAW,IAAI,IAAI,IAAIA,WAAW,CAACrB,WAAW,EAAE,EAAE;MAClD,OAAO,IAAIlB,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,EAAEkB,WAAW,CAACpB,iBAAiB,EAAE,CAAC;IACtH;IACA,OAAO,IAAInB,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,CAAC;EACrF,CAAC;EACDlB,mBAAmB,CAACG,SAAS,CAACkC,WAAW,GAAG,YAAY;IACpD,IAAIE,UAAU;IACd,IAAIC,MAAM;IACV,GAAG;MACC,IAAIlC,eAAe,GAAG,IAAI,CAAC4B,OAAO,CAACI,WAAW,EAAE;MAChD,IAAI,IAAI,CAACJ,OAAO,CAACO,OAAO,EAAE,EAAE;QACxBD,MAAM,GAAG,IAAI,CAACE,eAAe,EAAE;QAC/BH,UAAU,GAAGC,MAAM,CAACD,UAAU,EAAE;MACpC,CAAC,MACI,IAAI,IAAI,CAACL,OAAO,CAACS,WAAW,EAAE,EAAE;QACjCH,MAAM,GAAG,IAAI,CAACI,mBAAmB,EAAE;QACnCL,UAAU,GAAGC,MAAM,CAACD,UAAU,EAAE;MACpC,CAAC,MACI;QAAE;QACHC,MAAM,GAAG,IAAI,CAACK,iBAAiB,EAAE;QACjCN,UAAU,GAAGC,MAAM,CAACD,UAAU,EAAE;MACpC;MACA,IAAIO,eAAe,GAAGxC,eAAe,KAAK,IAAI,CAAC4B,OAAO,CAACI,WAAW,EAAE;MACpE,IAAI,CAACQ,eAAe,IAAI,CAACP,UAAU,EAAE;QACjC;MACJ;IACJ,CAAC,QAAQ,CAACA,UAAU;IACpB,OAAOC,MAAM,CAACO,qBAAqB,EAAE;EACzC,CAAC;EACD/C,mBAAmB,CAACG,SAAS,CAAC0C,iBAAiB,GAAG,YAAY;IAC1D,OAAO,IAAI,CAAC1B,cAAc,CAAC,IAAI,CAACe,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MACpD,IAAIV,OAAO,GAAG,IAAI,CAACJ,aAAa,CAAC,IAAI,CAACU,OAAO,CAACI,WAAW,EAAE,CAAC;MAC5D,IAAI,CAACJ,OAAO,CAACC,WAAW,CAACP,OAAO,CAACX,cAAc,EAAE,CAAC;MAClD,IAAIW,OAAO,CAACoB,gBAAgB,EAAE,EAAE;QAC5B,IAAI/C,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI2B,OAAO,CAACqB,iBAAiB,EAAE,EAAE;UAC7BhD,WAAW,GAAG,IAAIJ,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,CAAC;QAC5F,CAAC,MACI;UACDjB,WAAW,GAAG,IAAIJ,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,EAAEU,OAAO,CAACsB,cAAc,EAAE,CAAC;QACtH;QACA,OAAO,IAAIvD,iBAAiB,CAAC,IAAI,EAAEM,WAAW,CAAC;MACnD;MACA,IAAI,CAACC,MAAM,CAACY,MAAM,CAACc,OAAO,CAACuB,aAAa,EAAE,CAAC;MAC3C,IAAIvB,OAAO,CAACqB,iBAAiB,EAAE,EAAE;QAC7B,IAAIhD,WAAW,GAAG,IAAIJ,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,CAAC;QAC5F,OAAO,IAAIvB,iBAAiB,CAAC,IAAI,EAAEM,WAAW,CAAC;MACnD;MACA,IAAI,CAACC,MAAM,CAACY,MAAM,CAACc,OAAO,CAACsB,cAAc,EAAE,CAAC;IAChD;IACA,IAAI,IAAI,CAACE,4BAA4B,CAAC,IAAI,CAAClB,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAC/D,IAAI,CAACJ,OAAO,CAACmB,QAAQ,EAAE;MACvB,IAAI,CAACnB,OAAO,CAACoB,iBAAiB,CAAC,CAAC,CAAC;IACrC;IACA,OAAO,IAAI3D,iBAAiB,CAAC,KAAK,CAAC;EACvC,CAAC;EACDK,mBAAmB,CAACG,SAAS,CAACyC,mBAAmB,GAAG,YAAY;IAC5D,OAAO,IAAI,CAACW,gBAAgB,CAAC,IAAI,CAACrB,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MACtD,IAAIkB,GAAG,GAAG,IAAI,CAACC,eAAe,CAAC,IAAI,CAACvB,OAAO,CAACI,WAAW,EAAE,CAAC;MAC1D,IAAI,CAACJ,OAAO,CAACC,WAAW,CAACqB,GAAG,CAACvC,cAAc,EAAE,CAAC;MAC9C,IAAIuC,GAAG,CAACE,MAAM,EAAE,EAAE;QACd,IAAIzD,WAAW,GAAG,IAAIJ,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,CAAC;QAC5F,OAAO,IAAIvB,iBAAiB,CAAC,IAAI,EAAEM,WAAW,CAAC;MACnD;MACA,IAAI,CAACC,MAAM,CAACY,MAAM,CAAC0C,GAAG,CAACG,QAAQ,EAAE,CAAC;IACtC;IACA,IAAI,IAAI,CAACC,0BAA0B,CAAC,IAAI,CAAC1B,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAC7D,IAAI,CAACJ,OAAO,CAACoB,iBAAiB,CAAC,CAAC,CAAC;MACjC,IAAI,CAACpB,OAAO,CAAC2B,UAAU,EAAE;IAC7B,CAAC,MACI,IAAI,IAAI,CAACC,wBAAwB,CAAC,IAAI,CAAC5B,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAChE,IAAI,IAAI,CAACJ,OAAO,CAACI,WAAW,EAAE,GAAG,CAAC,GAAG,IAAI,CAACrC,WAAW,CAACoB,OAAO,EAAE,EAAE;QAC7D,IAAI,CAACa,OAAO,CAACoB,iBAAiB,CAAC,CAAC,CAAC;MACrC,CAAC,MACI;QACD,IAAI,CAACpB,OAAO,CAACC,WAAW,CAAC,IAAI,CAAClC,WAAW,CAACoB,OAAO,EAAE,CAAC;MACxD;MACA,IAAI,CAACa,OAAO,CAACmB,QAAQ,EAAE;IAC3B;IACA,OAAO,IAAI1D,iBAAiB,CAAC,KAAK,CAAC;EACvC,CAAC;EACDK,mBAAmB,CAACG,SAAS,CAACuC,eAAe,GAAG,YAAY;IACxD,OAAO,IAAI,CAACqB,YAAY,CAAC,IAAI,CAAC7B,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAClD,IAAI0B,KAAK,GAAG,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAAC/B,OAAO,CAACI,WAAW,EAAE,CAAC;MAC/D,IAAI,CAACJ,OAAO,CAACC,WAAW,CAAC6B,KAAK,CAAC/C,cAAc,EAAE,CAAC;MAChD,IAAI+C,KAAK,CAACN,MAAM,EAAE,EAAE;QAChB,IAAIzD,WAAW,GAAG,IAAIJ,kBAAkB,CAAC,IAAI,CAACqC,OAAO,CAACI,WAAW,EAAE,EAAE,IAAI,CAACpC,MAAM,CAACgB,QAAQ,EAAE,CAAC;QAC5F,OAAO,IAAIvB,iBAAiB,CAAC,IAAI,EAAEM,WAAW,CAAC,CAAC,CAAC;MACrD;;MACA,IAAI,CAACC,MAAM,CAACY,MAAM,CAACkD,KAAK,CAACL,QAAQ,EAAE,CAAC;IACxC;IACA,IAAI,IAAI,CAACC,0BAA0B,CAAC,IAAI,CAAC1B,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAC7D,IAAI,CAACJ,OAAO,CAACoB,iBAAiB,CAAC,CAAC,CAAC;MACjC,IAAI,CAACpB,OAAO,CAAC2B,UAAU,EAAE;IAC7B,CAAC,MACI,IAAI,IAAI,CAACC,wBAAwB,CAAC,IAAI,CAAC5B,OAAO,CAACI,WAAW,EAAE,CAAC,EAAE;MAChE,IAAI,IAAI,CAACJ,OAAO,CAACI,WAAW,EAAE,GAAG,CAAC,GAAG,IAAI,CAACrC,WAAW,CAACoB,OAAO,EAAE,EAAE;QAC7D,IAAI,CAACa,OAAO,CAACoB,iBAAiB,CAAC,CAAC,CAAC;MACrC,CAAC,MACI;QACD,IAAI,CAACpB,OAAO,CAACC,WAAW,CAAC,IAAI,CAAClC,WAAW,CAACoB,OAAO,EAAE,CAAC;MACxD;MACA,IAAI,CAACa,OAAO,CAACgC,YAAY,EAAE;IAC/B;IACA,OAAO,IAAIvE,iBAAiB,CAAC,KAAK,CAAC;EACvC,CAAC;EACDK,mBAAmB,CAACG,SAAS,CAACoD,gBAAgB,GAAG,UAAUnC,GAAG,EAAE;IAC5D,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,IAAI8C,YAAY,GAAG,IAAI,CAACzC,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC/D,IAAI+C,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACxC,OAAO,IAAI;IACf;IACA,IAAI/C,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,IAAI+C,aAAa,GAAG,IAAI,CAAC1C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAChE,IAAIgD,aAAa,IAAI,EAAE,IAAIA,aAAa,GAAG,GAAG,EAAE;MAC5C,OAAO,IAAI;IACf;IACA,IAAIhD,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,IAAIgD,aAAa,GAAG,IAAI,CAAC3C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAChE,OAAOiD,aAAa,IAAI,GAAG,IAAIA,aAAa,GAAG,GAAG;EACtD,CAAC;EACDrE,mBAAmB,CAACG,SAAS,CAACsD,eAAe,GAAG,UAAUrC,GAAG,EAAE;IAC3D,IAAI+C,YAAY,GAAG,IAAI,CAACzC,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC/D,IAAI+C,YAAY,KAAK,EAAE,EAAE;MACrB,OAAO,IAAIvE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAExB,WAAW,CAAC+B,IAAI,CAAC;IACrD;IACA,IAAIwC,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACxC,OAAO,IAAIvE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAG,GAAG,IAAI+C,YAAY,GAAG,CAAC,CAAC,CAAE;IAC/D;IACA,IAAIC,aAAa,GAAG,IAAI,CAAC1C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAChE,IAAIgD,aAAa,IAAI,EAAE,IAAIA,aAAa,GAAG,EAAE,EAAE;MAC3C,OAAO,IAAIxE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAG,EAAE,IAAIgD,aAAa,GAAG,CAAC,CAAC,CAAE;IAC/D;IACA,IAAIA,aAAa,IAAI,EAAE,IAAIA,aAAa,GAAG,GAAG,EAAE;MAC5C,OAAO,IAAIxE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAG,EAAE,IAAIgD,aAAa,GAAG,CAAC,CAAC,CAAE;IAC/D;IACA,IAAIC,aAAa,GAAG,IAAI,CAAC3C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAChE,IAAIkD,CAAC;IACL,QAAQD,aAAa;MACjB,KAAK,GAAG;QACJC,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,IAAI;QACR;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,GAAG;QACJA,CAAC,GAAG,GAAG;QACP;MACJ;QACI,MAAM,IAAI9E,eAAe,EAAE;IAAC;IAEpC,OAAO,IAAII,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAEkD,CAAC,CAAC;EACtC,CAAC;EACDtE,mBAAmB,CAACG,SAAS,CAAC4D,YAAY,GAAG,UAAU3C,GAAG,EAAE;IACxD,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA;IACA,IAAI8C,YAAY,GAAG,IAAI,CAACzC,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC/D,IAAI+C,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACxC,OAAO,IAAI;IACf;IACA,IAAI/C,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,IAAIkD,WAAW,GAAG,IAAI,CAAC7C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC9D,OAAOmD,WAAW,IAAI,EAAE,IAAIA,WAAW,GAAG,EAAE,CAAC,CAAC;EAClD,CAAC;;EACDvE,mBAAmB,CAACG,SAAS,CAAC8D,kBAAkB,GAAG,UAAU7C,GAAG,EAAE;IAC9D,IAAI+C,YAAY,GAAG,IAAI,CAACzC,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC/D,IAAI+C,YAAY,KAAK,EAAE,EAAE;MACrB,OAAO,IAAIvE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAExB,WAAW,CAAC+B,IAAI,CAAC;IACrD;IACA,IAAIwC,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACxC,OAAO,IAAIvE,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAG,GAAG,IAAI+C,YAAY,GAAG,CAAC,CAAC,CAAE;IAC/D;IACA,IAAII,WAAW,GAAG,IAAI,CAAC7C,+BAA+B,CAACN,GAAG,EAAE,CAAC,CAAC;IAC9D,IAAImD,WAAW,IAAI,EAAE,IAAIA,WAAW,GAAG,EAAE,EAAE;MACvC,OAAO,IAAI3E,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAG,EAAE,IAAImD,WAAW,GAAG,EAAE,CAAC,CAAE;IAC9D;IACA,IAAID,CAAC;IACL,QAAQC,WAAW;MACf,KAAK,EAAE;QACHD,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,EAAE;QACHA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,EAAE;QACHA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,EAAE;QACHA,CAAC,GAAG,GAAG;QACP;MACJ,KAAK,EAAE;QACHA,CAAC,GAAG,GAAG;QACP;MACJ;QACI,MAAM,IAAI7E,qBAAqB,CAAC,uCAAuC,GAAG8E,WAAW,CAAC;IAAC;IAE/F,OAAO,IAAI3E,WAAW,CAACwB,GAAG,GAAG,CAAC,EAAEkD,CAAC,CAAC;EACtC,CAAC;EACDtE,mBAAmB,CAACG,SAAS,CAAC2D,wBAAwB,GAAG,UAAU1C,GAAG,EAAE;IACpE,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGF,GAAG,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE,EAAEC,CAAC,EAAE;MAChE,IAAIA,CAAC,KAAK,CAAC,EAAE;QACT,IAAI,CAAC,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACH,GAAG,GAAG,CAAC,CAAC,EAAE;UAChC,OAAO,KAAK;QAChB;MACJ,CAAC,MACI,IAAI,IAAI,CAACnB,WAAW,CAACsB,GAAG,CAACH,GAAG,GAAGE,CAAC,CAAC,EAAE;QACpC,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDtB,mBAAmB,CAACG,SAAS,CAACyD,0BAA0B,GAAG,UAAUxC,GAAG,EAAE;IACtE;IACA,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,KAAK,IAAIC,CAAC,GAAGF,GAAG,EAAEE,CAAC,GAAGF,GAAG,GAAG,CAAC,EAAE,EAAEE,CAAC,EAAE;MAChC,IAAI,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACD,CAAC,CAAC,EAAE;QACzB,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDtB,mBAAmB,CAACG,SAAS,CAACiD,4BAA4B,GAAG,UAAUhC,GAAG,EAAE;IACxE;IACA;IACA,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE;MACtC,OAAO,KAAK;IAChB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGF,GAAG,GAAG,IAAI,CAACnB,WAAW,CAACoB,OAAO,EAAE,EAAE,EAAEC,CAAC,EAAE;MAChE,IAAI,IAAI,CAACrB,WAAW,CAACsB,GAAG,CAACH,GAAG,GAAGE,CAAC,CAAC,EAAE;QAC/B,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD,OAAOtB,mBAAmB;AAC9B,CAAC,EAAG;AACJ,eAAeA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}