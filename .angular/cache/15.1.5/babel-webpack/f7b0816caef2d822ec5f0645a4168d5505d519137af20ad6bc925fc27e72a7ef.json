{"ast":null,"code":"/*\r\n* Copyright 2013 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.common.detector.MathUtils;\nimport MathUtils from '../../common/detector/MathUtils';\n// import com.google.zxing.pdf417.PDF417Common;\nimport PDF417Common from '../PDF417Common';\nimport Float from '../../util/Float';\n/**\r\n * @author Guenther Grau\r\n * @author creatale GmbH (christoph.schulz@creatale.de)\r\n */\nvar PDF417CodewordDecoder = /** @class */function () {\n  function PDF417CodewordDecoder() {}\n  /* @note\r\n   * this action have to be performed before first use of class\r\n   * - static constructor\r\n   * working with 32bit float (based from Java logic)\r\n  */\n  PDF417CodewordDecoder.initialize = function () {\n    // Pre-computes the symbol ratio table.\n    for ( /*int*/var i = 0; i < PDF417Common.SYMBOL_TABLE.length; i++) {\n      var currentSymbol = PDF417Common.SYMBOL_TABLE[i];\n      var currentBit = currentSymbol & 0x1;\n      for ( /*int*/var j = 0; j < PDF417Common.BARS_IN_MODULE; j++) {\n        var size = 0.0;\n        while ((currentSymbol & 0x1) === currentBit) {\n          size += 1.0;\n          currentSymbol >>= 1;\n        }\n        currentBit = currentSymbol & 0x1;\n        if (!PDF417CodewordDecoder.RATIOS_TABLE[i]) {\n          PDF417CodewordDecoder.RATIOS_TABLE[i] = new Array(PDF417Common.BARS_IN_MODULE);\n        }\n        PDF417CodewordDecoder.RATIOS_TABLE[i][PDF417Common.BARS_IN_MODULE - j - 1] = Math.fround(size / PDF417Common.MODULES_IN_CODEWORD);\n      }\n    }\n    this.bSymbolTableReady = true;\n  };\n  PDF417CodewordDecoder.getDecodedValue = function (moduleBitCount) {\n    var decodedValue = PDF417CodewordDecoder.getDecodedCodewordValue(PDF417CodewordDecoder.sampleBitCounts(moduleBitCount));\n    if (decodedValue !== -1) {\n      return decodedValue;\n    }\n    return PDF417CodewordDecoder.getClosestDecodedValue(moduleBitCount);\n  };\n  PDF417CodewordDecoder.sampleBitCounts = function (moduleBitCount) {\n    var bitCountSum = MathUtils.sum(moduleBitCount);\n    var result = new Int32Array(PDF417Common.BARS_IN_MODULE);\n    var bitCountIndex = 0;\n    var sumPreviousBits = 0;\n    for ( /*int*/var i = 0; i < PDF417Common.MODULES_IN_CODEWORD; i++) {\n      var sampleIndex = bitCountSum / (2 * PDF417Common.MODULES_IN_CODEWORD) + i * bitCountSum / PDF417Common.MODULES_IN_CODEWORD;\n      if (sumPreviousBits + moduleBitCount[bitCountIndex] <= sampleIndex) {\n        sumPreviousBits += moduleBitCount[bitCountIndex];\n        bitCountIndex++;\n      }\n      result[bitCountIndex]++;\n    }\n    return result;\n  };\n  PDF417CodewordDecoder.getDecodedCodewordValue = function (moduleBitCount) {\n    var decodedValue = PDF417CodewordDecoder.getBitValue(moduleBitCount);\n    return PDF417Common.getCodeword(decodedValue) === -1 ? -1 : decodedValue;\n  };\n  PDF417CodewordDecoder.getBitValue = function (moduleBitCount) {\n    var result = /*long*/0;\n    for (var /*int*/i = 0; i < moduleBitCount.length; i++) {\n      for ( /*int*/var bit = 0; bit < moduleBitCount[i]; bit++) {\n        result = result << 1 | (i % 2 === 0 ? 1 : 0);\n      }\n    }\n    return Math.trunc(result);\n  };\n  // working with 32bit float (as in Java)\n  PDF417CodewordDecoder.getClosestDecodedValue = function (moduleBitCount) {\n    var bitCountSum = MathUtils.sum(moduleBitCount);\n    var bitCountRatios = new Array(PDF417Common.BARS_IN_MODULE);\n    if (bitCountSum > 1) {\n      for (var /*int*/i = 0; i < bitCountRatios.length; i++) {\n        bitCountRatios[i] = Math.fround(moduleBitCount[i] / bitCountSum);\n      }\n    }\n    var bestMatchError = Float.MAX_VALUE;\n    var bestMatch = -1;\n    if (!this.bSymbolTableReady) {\n      PDF417CodewordDecoder.initialize();\n    }\n    for ( /*int*/var j = 0; j < PDF417CodewordDecoder.RATIOS_TABLE.length; j++) {\n      var error = 0.0;\n      var ratioTableRow = PDF417CodewordDecoder.RATIOS_TABLE[j];\n      for ( /*int*/var k = 0; k < PDF417Common.BARS_IN_MODULE; k++) {\n        var diff = Math.fround(ratioTableRow[k] - bitCountRatios[k]);\n        error += Math.fround(diff * diff);\n        if (error >= bestMatchError) {\n          break;\n        }\n      }\n      if (error < bestMatchError) {\n        bestMatchError = error;\n        bestMatch = PDF417Common.SYMBOL_TABLE[j];\n      }\n    }\n    return bestMatch;\n  };\n  // flag that the table is ready for use\n  PDF417CodewordDecoder.bSymbolTableReady = false;\n  PDF417CodewordDecoder.RATIOS_TABLE = new Array(PDF417Common.SYMBOL_TABLE.length).map(function (x) {\n    return x = new Array(PDF417Common.BARS_IN_MODULE);\n  });\n  return PDF417CodewordDecoder;\n}();\nexport default PDF417CodewordDecoder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}