{"ast":null,"code":"import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder } from '@zxing/library';\nvar svgNs = 'http://www.w3.org/2000/svg';\n/**/\nvar BrowserCodeSvgWriter = /** @class */function () {\n  /**\n   * Constructs. ðŸ˜‰\n   */\n  function BrowserCodeSvgWriter(containerElement) {\n    if (typeof containerElement === 'string') {\n      var container = document.getElementById(containerElement);\n      if (!container) {\n        throw new Error(\"Could not find a Container element with '\".concat(containerElement, \"'.\"));\n      }\n      this.containerElement = container;\n    } else {\n      this.containerElement = containerElement;\n    }\n  }\n  /**\n   * Writes the QR code to a SVG and renders it in the container.\n   */\n  BrowserCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException('Found empty contents');\n    }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n    var quietZone = hints && hints.get(EncodeHintType.MARGIN) !== undefined ? Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10) : BrowserCodeSvgWriter.QUIET_ZONE_SIZE;\n    var code = this.encode(hints, contents);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\n   * Creates a SVG element.\n   */\n  BrowserCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'svg');\n    el.setAttributeNS(svgNs, 'width', h.toString());\n    el.setAttributeNS(svgNs, 'height', w.toString());\n    return el;\n  };\n  /**\n   * Creates a SVG rect.\n   */\n  BrowserCodeSvgWriter.prototype.createSvgPathPlaceholderElement = function (w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'path');\n    el.setAttributeNS(svgNs, 'd', \"M0 0h\".concat(w, \"v\").concat(h, \"H0z\"));\n    el.setAttributeNS(svgNs, 'fill', 'none');\n    return el;\n  };\n  /**\n   * Creates a SVG rect.\n   */\n  BrowserCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'rect');\n    el.setAttributeNS(svgNs, 'x', x.toString());\n    el.setAttributeNS(svgNs, 'y', y.toString());\n    el.setAttributeNS(svgNs, 'height', w.toString());\n    el.setAttributeNS(svgNs, 'width', h.toString());\n    el.setAttributeNS(svgNs, 'fill', '#000000');\n    return el;\n  };\n  /**\n   * Encodes the content to a Barcode type.\n   */\n  BrowserCodeSvgWriter.prototype.encode = function (hints, contents) {\n    var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\n    if (hints && hints.get(EncodeHintType.ERROR_CORRECTION) !== undefined) {\n      var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\n      errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\n    }\n    var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\n    return code;\n  };\n  /**\n   * Renders the SVG in the container.\n   *\n   * @note the input matrix uses 0 == white, 1 == black. The output matrix\n   *  uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n   */\n  BrowserCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    // if (this.format && format != this.format) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n    var placeholder = this.createSvgPathPlaceholderElement(width, height);\n    svgElement.appendChild(placeholder);\n    this.containerElement.appendChild(svgElement);\n    // 2D loop\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n    return svgElement;\n  };\n  /**\n   * Default quiet zone in pixels.\n   */\n  BrowserCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  /**\n   * SVG markup NameSpace\n   */\n  BrowserCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n  return BrowserCodeSvgWriter;\n}();\nexport { BrowserCodeSvgWriter };","map":{"version":3,"names":["EncodeHintType","IllegalArgumentException","IllegalStateException","QRCodeDecoderErrorCorrectionLevel","QRCodeEncoder","svgNs","BrowserCodeSvgWriter","containerElement","container","document","getElementById","Error","concat","prototype","write","contents","width","height","hints","length","quietZone","get","MARGIN","undefined","Number","parseInt","toString","QUIET_ZONE_SIZE","code","encode","renderResult","createSVGElement","w","h","el","createElementNS","SVG_NS","setAttributeNS","createSvgPathPlaceholderElement","createSvgRectElement","x","y","errorCorrectionLevel","L","ERROR_CORRECTION","correctionStr","fromString","input","getMatrix","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","svgElement","placeholder","appendChild","inputY","outputY","inputX","outputX","svgRectElement"],"sources":["E:/GME/Angular/GME-Angular/node_modules/@zxing/browser/esm/writers/BrowserCodeSvgWriter.js"],"sourcesContent":["import { EncodeHintType, IllegalArgumentException, IllegalStateException, QRCodeDecoderErrorCorrectionLevel, QRCodeEncoder, } from '@zxing/library';\nvar svgNs = 'http://www.w3.org/2000/svg';\n/**/\nvar BrowserCodeSvgWriter = /** @class */ (function () {\n    /**\n     * Constructs. ðŸ˜‰\n     */\n    function BrowserCodeSvgWriter(containerElement) {\n        if (typeof containerElement === 'string') {\n            var container = document.getElementById(containerElement);\n            if (!container) {\n                throw new Error(\"Could not find a Container element with '\".concat(containerElement, \"'.\"));\n            }\n            this.containerElement = container;\n        }\n        else {\n            this.containerElement = containerElement;\n        }\n    }\n    /**\n     * Writes the QR code to a SVG and renders it in the container.\n     */\n    BrowserCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n        if (contents.length === 0) {\n            throw new IllegalArgumentException('Found empty contents');\n        }\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException('Requested dimensions are too small: ' + width + 'x' + height);\n        }\n        var quietZone = hints && hints.get(EncodeHintType.MARGIN) !== undefined\n            ? Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10)\n            : BrowserCodeSvgWriter.QUIET_ZONE_SIZE;\n        var code = this.encode(hints, contents);\n        return this.renderResult(code, width, height, quietZone);\n    };\n    /**\n     * Creates a SVG element.\n     */\n    BrowserCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'svg');\n        el.setAttributeNS(svgNs, 'width', h.toString());\n        el.setAttributeNS(svgNs, 'height', w.toString());\n        return el;\n    };\n    /**\n     * Creates a SVG rect.\n     */\n    BrowserCodeSvgWriter.prototype.createSvgPathPlaceholderElement = function (w, h) {\n        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'path');\n        el.setAttributeNS(svgNs, 'd', \"M0 0h\".concat(w, \"v\").concat(h, \"H0z\"));\n        el.setAttributeNS(svgNs, 'fill', 'none');\n        return el;\n    };\n    /**\n     * Creates a SVG rect.\n     */\n    BrowserCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'rect');\n        el.setAttributeNS(svgNs, 'x', x.toString());\n        el.setAttributeNS(svgNs, 'y', y.toString());\n        el.setAttributeNS(svgNs, 'height', w.toString());\n        el.setAttributeNS(svgNs, 'width', h.toString());\n        el.setAttributeNS(svgNs, 'fill', '#000000');\n        return el;\n    };\n    /**\n     * Encodes the content to a Barcode type.\n     */\n    BrowserCodeSvgWriter.prototype.encode = function (hints, contents) {\n        var errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.L;\n        if (hints && hints.get(EncodeHintType.ERROR_CORRECTION) !== undefined) {\n            var correctionStr = hints.get(EncodeHintType.ERROR_CORRECTION).toString();\n            errorCorrectionLevel = QRCodeDecoderErrorCorrectionLevel.fromString(correctionStr);\n        }\n        var code = QRCodeEncoder.encode(contents, errorCorrectionLevel, hints);\n        return code;\n    };\n    /**\n     * Renders the SVG in the container.\n     *\n     * @note the input matrix uses 0 == white, 1 == black. The output matrix\n     *  uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n     */\n    BrowserCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n        // if (this.format && format != this.format) {\n        //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n        // }\n        var input = code.getMatrix();\n        if (input === null) {\n            throw new IllegalStateException();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var qrWidth = inputWidth + (quietZone * 2);\n        var qrHeight = inputHeight + (quietZone * 2);\n        var outputWidth = Math.max(width, qrWidth);\n        var outputHeight = Math.max(height, qrHeight);\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n        var svgElement = this.createSVGElement(outputWidth, outputHeight);\n        var placeholder = this.createSvgPathPlaceholderElement(width, height);\n        svgElement.appendChild(placeholder);\n        this.containerElement.appendChild(svgElement);\n        // 2D loop\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY) === 1) {\n                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n                    svgElement.appendChild(svgRectElement);\n                }\n            }\n        }\n        return svgElement;\n    };\n    /**\n     * Default quiet zone in pixels.\n     */\n    BrowserCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n    /**\n     * SVG markup NameSpace\n     */\n    BrowserCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n    return BrowserCodeSvgWriter;\n}());\nexport { BrowserCodeSvgWriter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}