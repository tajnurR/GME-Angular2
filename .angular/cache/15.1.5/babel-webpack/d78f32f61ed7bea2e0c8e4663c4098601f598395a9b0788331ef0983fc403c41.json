{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport IllegalArgumentException from '../../IllegalArgumentException';\n/**\r\n * @author Satoru Takabayashi\r\n * @author Daniel Switkin\r\n * @author Sean Owen\r\n */\nvar MaskUtil = /** @class */function () {\n  function MaskUtil() {\n    // do nothing\n  }\n  /**\r\n   * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\r\n   * give penalty to them. Example: 00000 or 11111.\r\n   */\n  MaskUtil.applyMaskPenaltyRule1 = function (matrix) {\n    return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\n  };\n  /**\r\n   * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\r\n   * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\r\n   * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\r\n   */\n  MaskUtil.applyMaskPenaltyRule2 = function (matrix) {\n    var penalty = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height - 1; y++) {\n      var arrayY = array[y];\n      for (var x = 0; x < width - 1; x++) {\n        var value = arrayY[x];\n        if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\n          penalty++;\n        }\n      }\n    }\n    return MaskUtil.N2 * penalty;\n  };\n  /**\r\n   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\r\n   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\r\n   * find patterns like 000010111010000, we give penalty once.\r\n   */\n  MaskUtil.applyMaskPenaltyRule3 = function (matrix) {\n    var numPenalties = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var arrayY = array[y]; // We can at least optimize this access\n        if (x + 6 < width && arrayY[x] === 1 && arrayY[x + 1] === 0 && arrayY[x + 2] === 1 && arrayY[x + 3] === 1 && arrayY[x + 4] === 1 && arrayY[x + 5] === 0 && arrayY[x + 6] === 1 && (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\n          numPenalties++;\n        }\n        if (y + 6 < height && array[y][x] === 1 && array[y + 1][x] === 0 && array[y + 2][x] === 1 && array[y + 3][x] === 1 && array[y + 4][x] === 1 && array[y + 5][x] === 0 && array[y + 6][x] === 1 && (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\n          numPenalties++;\n        }\n      }\n    }\n    return numPenalties * MaskUtil.N3;\n  };\n  MaskUtil.isWhiteHorizontal = function (rowArray, from /*int*/, to /*int*/) {\n    from = Math.max(from, 0);\n    to = Math.min(to, rowArray.length);\n    for (var i = from; i < to; i++) {\n      if (rowArray[i] === 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  MaskUtil.isWhiteVertical = function (array, col /*int*/, from /*int*/, to /*int*/) {\n    from = Math.max(from, 0);\n    to = Math.min(to, array.length);\n    for (var i = from; i < to; i++) {\n      if (array[i][col] === 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\r\n   * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\r\n   * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\r\n   */\n  MaskUtil.applyMaskPenaltyRule4 = function (matrix) {\n    var numDarkCells = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height; y++) {\n      var arrayY = array[y];\n      for (var x = 0; x < width; x++) {\n        if (arrayY[x] === 1) {\n          numDarkCells++;\n        }\n      }\n    }\n    var numTotalCells = matrix.getHeight() * matrix.getWidth();\n    var fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\n    return fivePercentVariances * MaskUtil.N4;\n  };\n  /**\r\n   * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\r\n   * pattern conditions.\r\n   */\n  MaskUtil.getDataMaskBit = function (maskPattern /*int*/, x /*int*/, y /*int*/) {\n    var intermediate; /*int*/\n    var temp; /*int*/\n    switch (maskPattern) {\n      case 0:\n        intermediate = y + x & 0x1;\n        break;\n      case 1:\n        intermediate = y & 0x1;\n        break;\n      case 2:\n        intermediate = x % 3;\n        break;\n      case 3:\n        intermediate = (y + x) % 3;\n        break;\n      case 4:\n        intermediate = Math.floor(y / 2) + Math.floor(x / 3) & 0x1;\n        break;\n      case 5:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3;\n        break;\n      case 6:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3 & 0x1;\n        break;\n      case 7:\n        temp = y * x;\n        intermediate = temp % 3 + (y + x & 0x1) & 0x1;\n        break;\n      default:\n        throw new IllegalArgumentException('Invalid mask pattern: ' + maskPattern);\n    }\n    return intermediate === 0;\n  };\n  /**\r\n   * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\r\n   * vertical and horizontal orders respectively.\r\n   */\n  MaskUtil.applyMaskPenaltyRule1Internal = function (matrix, isHorizontal) {\n    var penalty = 0;\n    var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n    var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n    var array = matrix.getArray();\n    for (var i = 0; i < iLimit; i++) {\n      var numSameBitCells = 0;\n      var prevBit = -1;\n      for (var j = 0; j < jLimit; j++) {\n        var bit = isHorizontal ? array[i][j] : array[j][i];\n        if (bit === prevBit) {\n          numSameBitCells++;\n        } else {\n          if (numSameBitCells >= 5) {\n            penalty += MaskUtil.N1 + (numSameBitCells - 5);\n          }\n          numSameBitCells = 1; // Include the cell itself.\n          prevBit = bit;\n        }\n      }\n      if (numSameBitCells >= 5) {\n        penalty += MaskUtil.N1 + (numSameBitCells - 5);\n      }\n    }\n    return penalty;\n  };\n  // Penalty weights from section 6.8.2.1\n  MaskUtil.N1 = 3;\n  MaskUtil.N2 = 3;\n  MaskUtil.N3 = 40;\n  MaskUtil.N4 = 10;\n  return MaskUtil;\n}();\nexport default MaskUtil;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}