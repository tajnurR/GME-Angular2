{"ast":null,"code":"/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport UPCEANReader from './UPCEANReader';\nimport StringBuilder from '../util/StringBuilder';\nimport NotFoundException from '../NotFoundException';\nimport BarcodeFormat from '../BarcodeFormat';\n// package com.google.zxing.oned;\n// import com.google.zxing.BarcodeFormat;\n// import com.google.zxing.FormatException;\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.common.BitArray;\n/**\r\n * <p>Implements decoding of the UPC-E format.</p>\r\n * <p><a href=\"http://www.barcodeisland.com/upce.phtml\">This</a> is a great reference for\r\n * UPC-E information.</p>\r\n *\r\n * @author Sean Owen\r\n *\r\n * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCEReader.java\r\n *\r\n * @experimental\r\n */\nvar UPCEReader = /** @class */function (_super) {\n  __extends(UPCEReader, _super);\n  function UPCEReader() {\n    var _this = _super.call(this) || this;\n    _this.decodeMiddleCounters = new Int32Array(4);\n    return _this;\n  }\n  /**\r\n   * @throws NotFoundException\r\n   */\n  // @Override\n  UPCEReader.prototype.decodeMiddle = function (row, startRange, result) {\n    var e_1, _a;\n    var counters = this.decodeMiddleCounters.map(function (x) {\n      return x;\n    });\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var end = row.getSize();\n    var rowOffset = startRange[1];\n    var lgPatternFound = 0;\n    for (var x = 0; x < 6 && rowOffset < end; x++) {\n      var bestMatch = UPCEReader.decodeDigit(row, counters, rowOffset, UPCEReader.L_AND_G_PATTERNS);\n      result += String.fromCharCode('0'.charCodeAt(0) + bestMatch % 10);\n      try {\n        for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n          rowOffset += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      if (bestMatch >= 10) {\n        lgPatternFound |= 1 << 5 - x;\n      }\n    }\n    UPCEReader.determineNumSysAndCheckDigit(new StringBuilder(result), lgPatternFound);\n    return rowOffset;\n  };\n  /**\r\n   * @throws NotFoundException\r\n   */\n  // @Override\n  UPCEReader.prototype.decodeEnd = function (row, endStart) {\n    return UPCEReader.findGuardPatternWithoutCounters(row, endStart, true, UPCEReader.MIDDLE_END_PATTERN);\n  };\n  /**\r\n   * @throws FormatException\r\n   */\n  // @Override\n  UPCEReader.prototype.checkChecksum = function (s) {\n    return UPCEANReader.checkChecksum(UPCEReader.convertUPCEtoUPCA(s));\n  };\n  /**\r\n   * @throws NotFoundException\r\n   */\n  UPCEReader.determineNumSysAndCheckDigit = function (resultString, lgPatternFound) {\n    for (var numSys = 0; numSys <= 1; numSys++) {\n      for (var d = 0; d < 10; d++) {\n        if (lgPatternFound === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[numSys][d]) {\n          resultString.insert(0, /*(char)*/'0' + numSys);\n          resultString.append( /*(char)*/'0' + d);\n          return;\n        }\n      }\n    }\n    throw NotFoundException.getNotFoundInstance();\n  };\n  // @Override\n  UPCEReader.prototype.getBarcodeFormat = function () {\n    return BarcodeFormat.UPC_E;\n  };\n  /**\r\n   * Expands a UPC-E value back into its full, equivalent UPC-A code value.\r\n   *\r\n   * @param upce UPC-E code as string of digits\r\n   * @return equivalent UPC-A code as string of digits\r\n   */\n  UPCEReader.convertUPCEtoUPCA = function (upce) {\n    // the following line is equivalent to upce.getChars(1, 7, upceChars, 0);\n    var upceChars = upce.slice(1, 7).split('').map(function (x) {\n      return x.charCodeAt(0);\n    });\n    var result = new StringBuilder( /*12*/);\n    result.append(upce.charAt(0));\n    var lastChar = upceChars[5];\n    switch (lastChar) {\n      case 0:\n      case 1:\n      case 2:\n        result.appendChars(upceChars, 0, 2);\n        result.append(lastChar);\n        result.append('0000');\n        result.appendChars(upceChars, 2, 3);\n        break;\n      case 3:\n        result.appendChars(upceChars, 0, 3);\n        result.append('00000');\n        result.appendChars(upceChars, 3, 2);\n        break;\n      case 4:\n        result.appendChars(upceChars, 0, 4);\n        result.append('00000');\n        result.append(upceChars[4]);\n        break;\n      default:\n        result.appendChars(upceChars, 0, 5);\n        result.append('0000');\n        result.append(lastChar);\n        break;\n    }\n    // Only append check digit in conversion if supplied\n    if (upce.length >= 8) {\n      result.append(upce.charAt(7));\n    }\n    return result.toString();\n  };\n  /**\r\n   * The pattern that marks the middle, and end, of a UPC-E pattern.\r\n   * There is no \"second half\" to a UPC-E barcode.\r\n   */\n  UPCEReader.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);\n  // For an UPC-E barcode, the final digit is represented by the parities used\n  // to encode the middle six digits, according to the table below.\n  //\n  //                Parity of next 6 digits\n  //    Digit   0     1     2     3     4     5\n  //       0    Even   Even  Even Odd  Odd   Odd\n  //       1    Even   Even  Odd  Even Odd   Odd\n  //       2    Even   Even  Odd  Odd  Even  Odd\n  //       3    Even   Even  Odd  Odd  Odd   Even\n  //       4    Even   Odd   Even Even Odd   Odd\n  //       5    Even   Odd   Odd  Even Even  Odd\n  //       6    Even   Odd   Odd  Odd  Even  Even\n  //       7    Even   Odd   Even Odd  Even  Odd\n  //       8    Even   Odd   Even Odd  Odd   Even\n  //       9    Even   Odd   Odd  Even Odd   Even\n  //\n  // The encoding is represented by the following array, which is a bit pattern\n  // using Odd = 0 and Even = 1. For example, 5 is represented by:\n  //\n  //              Odd Even Even Odd Odd Even\n  // in binary:\n  //                0    1    1   0   0    1   == 0x19\n  //\n  /**\r\n   * See {@link #L_AND_G_PATTERNS}; these values similarly represent patterns of\r\n   * even-odd parity encodings of digits that imply both the number system (0 or 1)\r\n   * used, and the check digit.\r\n   */\n  UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [Int32Array.from([0x38, 0x34, 0x32, 0x31, 0x2C, 0x26, 0x23, 0x2A, 0x29, 0x25]), Int32Array.from([0x07, 0x0B, 0x0D, 0x0E, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1])];\n  return UPCEReader;\n}(UPCEANReader);\nexport default UPCEReader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}